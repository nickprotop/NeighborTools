#!/bin/bash

# NeighborTools Complete Development Environment Setup
# This script sets up both backend and frontend for development

set -e  # Exit on any error

echo "üöÄ NeighborTools Complete Development Setup"
echo "============================================"
echo ""
echo "This script will set up your complete development environment:"
echo "  üîß Backend: Database, storage services, and API configuration"
echo "  üé® Frontend: Blazor WebAssembly application configuration"
echo "  üê≥ Infrastructure: Docker containers for MySQL, Redis, MinIO"
echo ""
echo "Prerequisites:"
echo "  ‚úÖ Docker and Docker Compose"
echo "  ‚úÖ .NET 9 SDK"
echo "  ‚úÖ Git (for development)"
echo ""

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check prerequisites
echo "üîç Checking prerequisites..."
missing_deps=()

if ! command_exists docker; then
    missing_deps+=("Docker")
fi

if ! command_exists docker-compose; then
    missing_deps+=("Docker Compose")
fi

if ! command_exists dotnet; then
    missing_deps+=(".NET 9 SDK")
fi

if [ ${#missing_deps[@]} -gt 0 ]; then
    echo "‚ùå Missing prerequisites:"
    for dep in "${missing_deps[@]}"; do
        echo "   ‚Ä¢ $dep"
    done
    echo ""
    echo "Please install missing prerequisites and run this script again."
    echo ""
    echo "Installation links:"
    echo "  ‚Ä¢ Docker: https://docs.docker.com/get-docker/"
    echo "  ‚Ä¢ .NET 9 SDK: https://dotnet.microsoft.com/download"
    exit 1
fi

echo "‚úÖ Prerequisites check passed"
echo ""

# Check if we're in the right directory
if [ ! -d "backend" ] || [ ! -d "frontend" ]; then
    echo "‚ùå This script must be run from the NeighborTools root directory"
    echo "   Expected structure:"
    echo "   NeighborTools/"
    echo "   ‚îú‚îÄ‚îÄ backend/"
    echo "   ‚îî‚îÄ‚îÄ frontend/"
    echo ""
    echo "Current directory: $(pwd)"
    exit 1
fi

echo "‚úÖ Directory structure verified"
echo ""

# Confirmation
echo -n "Continue with complete setup? [Y/n]: "
read -r confirm
echo ""

if [[ "$confirm" =~ ^[Nn]$ ]]; then
    echo "‚ùå Setup cancelled."
    exit 0
fi

# Step 1: Backend Setup
echo "üîß Step 1: Backend Setup"
echo "========================"
echo "Setting up backend infrastructure, database, and API configuration..."
echo ""

cd backend
if [ -f "scripts/install.sh" ]; then
    ./scripts/install.sh
else
    echo "‚ùå Backend install script not found at: backend/scripts/install.sh"
    exit 1
fi
cd ..

echo ""
echo "‚úÖ Backend setup complete!"
echo ""

# Step 2: Frontend Configuration
echo "üé® Step 2: Frontend Configuration"
echo "================================="
echo "Configuring Blazor WebAssembly application..."
echo ""

cd frontend

# Check if configure.sh exists
if [ ! -f "configure.sh" ]; then
    echo "‚ùå Frontend configure.sh not found"
    exit 1
fi

# Use the frontend's own configuration script in interactive mode
echo "üîß Running frontend configuration (interactive mode)..."
echo "   You'll be prompted to configure API URL, environment, and home page URL"
echo "   Press Enter to accept defaults for development setup"
echo ""
./configure.sh

echo ""
echo "üì¶ Restoring frontend dependencies..."
dotnet restore
echo "‚úÖ Frontend dependencies restored"

cd ..

echo ""
echo "‚úÖ Frontend configuration complete!"
echo ""

# Step 3: Verify Infrastructure
echo "üê≥ Step 3: Infrastructure Verification"
echo "======================================"
echo "Verifying that infrastructure services are running..."
echo ""

cd backend

# Check if infrastructure is running
if [ -f "scripts/storage/status.sh" ]; then
    ./scripts/storage/status.sh
else
    echo "‚ö†Ô∏è  Infrastructure status script not found"
    echo "   Manually check with: cd backend && ./scripts/storage/status.sh"
fi

cd ..

echo ""

# Step 4: Display final instructions
# Step 4: Development Machine Setup
echo ""
echo "üîß Step 4: Development Environment Setup"
echo "========================================"
echo ""
echo "Are you setting up this environment for development? [Y/n]: "
read -r is_dev_machine

if [[ ! "$is_dev_machine" =~ ^[Nn]$ ]]; then
    echo ""
    echo "üîí Git Security Setup"
    echo "===================="
    echo "For development environments, we recommend setting up GitLeaks"
    echo "to prevent accidentally committing secrets (passwords, API keys, etc.)"
    echo ""
    echo "GitLeaks will:"
    echo "  ‚Ä¢ Scan commits for secrets before they're pushed"
    echo "  ‚Ä¢ Prevent accidental exposure of sensitive data"
    echo "  ‚Ä¢ Add pre-commit hooks for automatic scanning"
    echo ""
    echo "Would you like to set up GitLeaks now? [Y/n]: "
    read -r setup_gitleaks
    
    if [[ ! "$setup_gitleaks" =~ ^[Nn]$ ]]; then
        echo ""
        echo "üîß Setting up GitLeaks..."
        if [ -f "setup-gitleaks.sh" ]; then
            ./setup-gitleaks.sh
            echo "‚úÖ GitLeaks setup complete!"
        else
            echo "‚ùå GitLeaks setup script not found at: setup-gitleaks.sh"
            echo "   You can run it manually later if needed"
        fi
    else
        echo "‚ö†Ô∏è  GitLeaks setup skipped"
        echo "   You can run it later with: ./setup-gitleaks.sh"
    fi
else
    echo "‚ÑπÔ∏è  Production/staging environment detected"
    echo "   Skipping development-specific setup"
fi

echo ""
echo "üéâ Complete Setup Finished!"
echo "==========================="
echo ""
echo "üìã Your development environment is ready!"
echo ""
echo "üöÄ To start development:"
echo ""
echo "Option 1 - Full development with hot reload (recommended):"
echo "  cd backend && ./start-watch.sh"
echo "  # In another terminal:"
echo "  cd frontend && dotnet run"
echo ""
echo "Option 2 - Stable development (good for debugging):"
echo "  cd backend && ./start-dev.sh  "
echo "  # In another terminal:"
echo "  cd frontend && dotnet run"
echo ""
echo "Option 3 - Production-like testing:"
echo "  cd backend && ./start-production.sh"
echo "  # In another terminal:"
echo "  cd frontend && dotnet run"
echo ""
echo "üåê Application URLs:"
echo "  ‚Ä¢ Frontend: http://localhost:5000"
echo "  ‚Ä¢ Backend API: http://localhost:5002"
echo "  ‚Ä¢ Swagger UI: http://localhost:5002/swagger"
echo "  ‚Ä¢ MinIO Console: http://localhost:9001"
echo ""
echo "üë§ Default Admin Account:"
echo "  ‚Ä¢ Email: admin@neighbortools.com"
echo "  ‚Ä¢ Password: Admin123!"
echo ""
echo "üîß Useful Commands:"
echo "  ‚Ä¢ View configuration: cd backend && ./scripts/show-config.sh"
echo "  ‚Ä¢ Stop all services: cd backend && ./scripts/api/stop.sh && ./scripts/storage/stop.sh"
echo "  ‚Ä¢ Reset database: cd backend && ./scripts/uninstall.sh && ./scripts/install.sh"
echo ""
if [[ ! "$is_dev_machine" =~ ^[Nn]$ ]]; then
    echo "üîí Security:"
    echo "  ‚Ä¢ GitLeaks prevents secret commits (if installed)"
    echo "  ‚Ä¢ Run ./setup-gitleaks.sh if you skipped it"
    echo ""
fi
echo "üìö Documentation:"
echo "  ‚Ä¢ Backend scripts: backend/scripts/README.md"
echo "  ‚Ä¢ Project documentation: CLAUDE.md"
echo ""
echo "Happy coding! üöÄ"