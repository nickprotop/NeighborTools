@using Microsoft.AspNetCore.Components
@using MudBlazor
@using frontend.Models
@using frontend.Services
@using frontend.Components
@using frontend.Shared
@inject IRentalService RentalService
@inject IToolService ToolService
@inject IPaymentService PaymentService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IUrlService UrlService
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-4">Request Rental - @Tool?.Name</MudText>
        
        @if (Tool != null)
        {
            <MudGrid>
                <MudItem xs="12" Class="mb-4">
                    <MudPaper Elevation="2" Class="pa-4" Style="border-radius: 8px;">
                        <div class="d-flex align-center gap-3">
                            @if (Tool.ImageUrls.Any())
                            {
                                <img src="@UrlService.GetFileUrl(Tool.ImageUrls.First())" alt="@Tool.Name" style="width: 80px; height: 80px; object-fit: cover; border-radius: 8px;" />
                            }
                            else
                            {
                                <div class="d-flex align-center justify-center" style="width: 80px; height: 80px;  border-radius: 8px;">
                                    <MudIcon Icon="@Icons.Material.Filled.Build" Color="Color.Secondary" />
                                </div>
                            }
                            <div>
                                <MudText Typo="Typo.h6">@Tool.Name</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    Owner: <UserLink UserId="@Tool.OwnerId" DisplayName="@Tool.OwnerName" ShowAvatar="false" />
                                </MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Location: @Tool.Location</MudText>
                            </div>
                        </div>
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudDatePicker @bind-Date="startDate" 
                                   @bind-Date:after="CalculateRentalCost"
                                   Label="Start Date" 
                                   Variant="Variant.Outlined"
                                   MinDate="@GetMinimumStartDate()"
                                   Required="true"
                                   HelperText="@GetStartDateHelperText()" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudDatePicker @bind-Date="endDate" 
                                   @bind-Date:after="CalculateRentalCost"
                                   Label="End Date" 
                                   Variant="Variant.Outlined"
                                   MinDate="startDate ?? DateTime.Today.AddDays(1)"
                                   Required="true" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="notes" 
                                  Label="Notes (Optional)" 
                                  Variant="Variant.Outlined"
                                  Lines="3"
                                  Placeholder="Any special requirements or notes..."
                                  AdornmentIcon="@Icons.Material.Filled.Notes" 
                                  Adornment="Adornment.Start" />
                </MudItem>

                @if (settingsLoaded)
                {
                    <MudItem xs="12">
                        <MudPaper Elevation="1" Class="pa-3" Style="border-radius: 8px; ">
                            <MudText Typo="Typo.subtitle2" Class="mb-2">Rental Information</MudText>
                            <div class="d-flex flex-column gap-1">
                                <div class="d-flex align-center gap-2">
                                    <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" Color="Color.Primary" />
                                    <MudText Typo="Typo.body2">Lead time required: <strong>@ownerLeadTimeHours hours</strong></MudText>
                                </div>
                                @if (autoApprovalEnabled)
                                {
                                    <div class="d-flex align-center gap-2">
                                        <MudIcon Icon="@Icons.Material.Filled.AutoAwesome" Size="Size.Small" Color="Color.Success" />
                                        <MudText Typo="Typo.body2" Color="Color.Success">
                                            <strong>Auto-approval enabled</strong> - Your rental will be confirmed automatically!
                                        </MudText>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex align-center gap-2">
                                        <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Color="Color.Secondary" />
                                        <MudText Typo="Typo.body2">Owner approval required - You'll receive an email notification once reviewed</MudText>
                                    </div>
                                }
                            </div>
                        </MudPaper>
                    </MudItem>
                }

                @if (isCalculatingCost)
                {
                    <MudItem xs="12">
                        <MudPaper Elevation="2" Class="pa-4" Style="border-radius: 8px;">
                            <div class="d-flex justify-center align-center py-4">
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-3" />
                                <MudText Typo="Typo.body2">Calculating rental cost...</MudText>
                            </div>
                        </MudPaper>
                    </MudItem>
                }
                else if (costCalculation != null)
                {
                    <MudItem xs="12">
                        <MudPaper Elevation="2" Class="pa-4" Style="border-radius: 8px; ">
                            <div class="d-flex align-center mb-3">
                                <MudIcon Icon="@Icons.Material.Filled.Receipt" Color="Color.Primary" Class="mr-2" />
                                <MudText Typo="Typo.h6">Payment Breakdown</MudText>
                            </div>

                            <MudGrid>
                                <MudItem xs="8">
                                    <MudText Typo="Typo.body2">Rental Duration:</MudText>
                                </MudItem>
                                <MudItem xs="4" Class="text-right">
                                    <MudText Typo="Typo.body1"><strong>@costCalculation.RentalDays day@(costCalculation.RentalDays != 1 ? "s" : "")</strong></MudText>
                                </MudItem>

                                <MudItem xs="8">
                                    <MudText Typo="Typo.body2">Rate (@costCalculation.RateType):</MudText>
                                </MudItem>
                                <MudItem xs="4" Class="text-right">
                                    <MudText Typo="Typo.body1">$@costCalculation.SelectedRate.ToString("F2")</MudText>
                                </MudItem>

                                <MudItem xs="8">
                                    <MudText Typo="Typo.body2">Rental Amount:</MudText>
                                </MudItem>
                                <MudItem xs="4" Class="text-right">
                                    <MudText Typo="Typo.body1">$@costCalculation.RentalAmount.ToString("F2")</MudText>
                                </MudItem>

                                @if (costCalculation.SecurityDeposit > 0)
                                {
                                    <MudItem xs="8">
                                        <MudText Typo="Typo.body2">Security Deposit:</MudText>
                                    </MudItem>
                                    <MudItem xs="4" Class="text-right">
                                        <MudText Typo="Typo.body1">$@costCalculation.SecurityDeposit.ToString("F2")</MudText>
                                    </MudItem>
                                }

                                <MudItem xs="8">
                                    <MudText Typo="Typo.body2">Platform Fee (@((costCalculation.CommissionRate * 100).ToString("F1"))%):</MudText>
                                </MudItem>
                                <MudItem xs="4" Class="text-right">
                                    <MudText Typo="Typo.body1">$@costCalculation.CommissionAmount.ToString("F2")</MudText>
                                </MudItem>

                                <MudItem xs="12">
                                    <MudDivider Class="my-2" />
                                </MudItem>

                                <MudItem xs="8">
                                    <MudText Typo="Typo.h6" Color="Color.Primary"><strong>Total Amount:</strong></MudText>
                                </MudItem>
                                <MudItem xs="4" Class="text-right">
                                    <MudText Typo="Typo.h6" Color="Color.Primary"><strong>$@costCalculation.TotalPayerAmount.ToString("F2")</strong></MudText>
                                </MudItem>

                                @if (costCalculation.SecurityDeposit > 0)
                                {
                                    <MudItem xs="12" Class="mt-3">
                                        <MudAlert Severity="Severity.Info" Dense="true">
                                            <MudText Typo="Typo.caption">
                                                <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" /> 
                                                Security deposit will be refunded after the rental is completed and the tool is returned in good condition.
                                            </MudText>
                                        </MudAlert>
                                    </MudItem>
                                }

                                <MudItem xs="12" Class="mt-2">
                                    <MudAlert Severity="Severity.Info" Dense="true">
                                        <MudText Typo="Typo.caption">
                                            <MudIcon Icon="@Icons.Material.Filled.Payment" Size="Size.Small" /> 
                                            Payment will be processed securely via PayPal.
                                        </MudText>
                                    </MudAlert>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                }

                @if (paymentSettingsChecked && !ownerCanReceivePayments)
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Warning" Class="mb-3">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Payment" Class="mr-3" />
                                <div>
                                    <MudText Typo="Typo.subtitle2"><strong>Tool Temporarily Unavailable</strong></MudText>
                                    <MudText Typo="Typo.body2">
                                        This tool is currently unavailable for rent because the owner hasn't configured their payment settings yet. 
                                        Please check back later or contact the tool owner directly.
                                    </MudText>
                                </div>
                            </div>
                        </MudAlert>
                    </MudItem>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
                    </MudItem>
                }
            </MudGrid>
        }
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled" 
                   OnClick="SubmitRequest"
                   Disabled="@(isSubmitting || !IsFormValid() || !ownerCanReceivePayments)"
                   StartIcon="@(isSubmitting ? null : Icons.Material.Filled.Send)">
            @if (isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Submitting...</MudText>
            }
            else
            {
                <MudText>Submit Request</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public Tool? Tool { get; set; }

    private DateTime? startDate;
    private DateTime? endDate;
    private string notes = string.Empty;
    private string errorMessage = string.Empty;
    private bool isSubmitting = false;
    
    // Cost calculation from API
    private RentalCostCalculationResponse? costCalculation = null;
    private bool isCalculatingCost = false;

    // Lead time validation
    private int ownerLeadTimeHours = 24; // Default 24 hours, will be fetched from API
    private bool autoApprovalEnabled = false;
    private bool settingsLoaded = false;
    
    // Payment settings validation
    private bool ownerCanReceivePayments = true;
    private bool paymentSettingsChecked = false;

    protected override async Task OnInitializedAsync()
    {
        startDate = DateTime.Today.AddDays(1);
        endDate = DateTime.Today.AddDays(2);
        
        // Load owner settings for lead time and auto-approval info
        await LoadOwnerSettings();
        
        // Check if owner can receive payments
        await CheckOwnerPaymentSettings();
        
        await CalculateRentalCost();
    }

    private async Task CalculateRentalCost()
    {
        if (Tool == null || startDate == null || endDate == null || startDate >= endDate)
        {
            costCalculation = null;
            ValidateLeadTime();
            StateHasChanged();
            return;
        }

        try
        {
            isCalculatingCost = true;
            StateHasChanged();

            if (!Guid.TryParse(Tool.Id, out var toolGuid))
            {
                costCalculation = null;
                errorMessage = "Invalid tool ID format.";
                return;
            }

            var result = await PaymentService.CalculateRentalCostAsync(toolGuid, startDate.Value, endDate.Value);
            
            if (result.Success && result.Data != null)
            {
                costCalculation = result.Data;
                errorMessage = string.Empty;
            }
            else
            {
                costCalculation = null;
                errorMessage = result.Message ?? "Failed to calculate rental cost.";
            }
        }
        catch (Exception ex)
        {
            costCalculation = null;
            errorMessage = $"Error calculating rental cost: {ex.Message}";
        }
        finally
        {
            isCalculatingCost = false;
            ValidateLeadTime();
            StateHasChanged();
        }
    }

    private async Task LoadOwnerSettings()
    {
        if (Tool?.Id == null)
        {
            // Use defaults if no tool
            ownerLeadTimeHours = 24;
            autoApprovalEnabled = false;
            settingsLoaded = true;
            return;
        }

        try
        {
            var result = await ToolService.GetToolRentalPreferencesAsync(Tool.Id);
            
            if (result.Success && result.Data != null)
            {
                ownerLeadTimeHours = result.Data.LeadTimeHours;
                autoApprovalEnabled = result.Data.AutoApprovalEnabled;
            }
            else
            {
                // Use defaults if API fails
                ownerLeadTimeHours = 24;
                autoApprovalEnabled = false;
            }
        }
        catch (Exception)
        {
            // Use defaults if exception occurs
            ownerLeadTimeHours = 24;
            autoApprovalEnabled = false;
        }
        finally
        {
            settingsLoaded = true;
            StateHasChanged(); // Refresh UI with loaded settings
        }
    }

    private async Task CheckOwnerPaymentSettings()
    {
        if (Tool?.OwnerId == null)
        {
            ownerCanReceivePayments = false;
            paymentSettingsChecked = true;
            return;
        }

        try
        {
            // Check if we can get payment settings for the owner
            // We'll use the tool service to check if the owner has payment settings configured
            // This is a bit indirect, but we don't want to expose payment settings endpoint to all users
            var result = await PaymentService.CanOwnerReceivePaymentsAsync(Tool.OwnerId);
            
            if (result.Success)
            {
                ownerCanReceivePayments = result.Data.CanReceivePayments;
            }
            else
            {
                // If we can't determine, assume they can't receive payments (safe default)
                ownerCanReceivePayments = false;
            }
        }
        catch (Exception)
        {
            // If there's an error checking, assume they can't receive payments (safe default)
            ownerCanReceivePayments = false;
        }
        finally
        {
            paymentSettingsChecked = true;
            StateHasChanged();
        }
    }

    private void ValidateLeadTime()
    {
        if (startDate.HasValue && settingsLoaded)
        {
            var minimumStartTime = DateTime.Now.AddHours(ownerLeadTimeHours);
            
            if (startDate.Value < minimumStartTime)
            {
                errorMessage = $"Rental requests must be made at least {ownerLeadTimeHours} hours in advance. " +
                              $"Earliest available start time: {minimumStartTime:yyyy-MM-dd HH:mm}";
            }
            else if (errorMessage.Contains("must be made at least"))
            {
                errorMessage = string.Empty; // Clear lead time error if now valid
            }
        }
    }

    private bool IsFormValid()
    {
        if (Tool == null || !startDate.HasValue || !endDate.HasValue || startDate >= endDate || costCalculation == null)
            return false;

        // Check lead time requirement
        if (settingsLoaded)
        {
            var minimumStartTime = DateTime.Now.AddHours(ownerLeadTimeHours);
            if (startDate.Value < minimumStartTime)
                return false;
        }

        return true;
    }

    private DateTime GetMinimumStartDate()
    {
        if (settingsLoaded)
        {
            var minimumStartTime = DateTime.Now.AddHours(ownerLeadTimeHours);
            return minimumStartTime.Date; // Return just the date part for the date picker
        }
        return DateTime.Today.AddDays(1);
    }

    private string GetStartDateHelperText()
    {
        if (settingsLoaded && ownerLeadTimeHours > 24)
        {
            return $"Minimum {ownerLeadTimeHours} hours advance notice required";
        }
        return "Select start date for your rental";
    }

    private async Task SubmitRequest()
    {
        if (!IsFormValid())
            return;

        isSubmitting = true;
        errorMessage = string.Empty;

        try
        {
            var request = new CreateRentalRequest
            {
                ToolId = Tool!.Id,
                StartDate = startDate!.Value,
                EndDate = endDate!.Value,
                Notes = string.IsNullOrWhiteSpace(notes) ? null : notes
            };

            var result = await RentalService.CreateRentalAsync(request);

            if (result.Success && result.Data != null)
            { 
                // Close dialog with success result first
                MudDialog.Close(DialogResult.Ok(result.Data));
                
                // Then show flow explanation dialog after a brief delay to allow cleanup
                await Task.Delay(100);
                await ShowFlowExplanationDialog();
            }
            else
            {
                errorMessage = result.Message ?? "Failed to submit rental request.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
    
    private async Task ShowFlowExplanationDialog()
    {
        var parameters = new DialogParameters 
        { 
            { "OwnerName", Tool?.OwnerName ?? "the owner" },
            { "AutoApproval", autoApprovalEnabled },
            { "LeadTimeHours", ownerLeadTimeHours }
        };
        
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        
        await DialogService.ShowAsync<RentalFlowExplanationDialog>(
            "What Happens Next?", parameters, options);
    }

}