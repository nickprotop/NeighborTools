@page "/marketplace"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@using ToolsSharing.Frontend.Models
@using ToolsSharing.Frontend.Services
@using frontend.Components
@using frontend.Components.Bundles
@using frontend.Components.Location
@using ToolsSharing.Frontend.Models.Location
@implements IDisposable
@inject IToolService ToolService
@inject BundleService BundleService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IUrlService UrlService
@inject IRentalService RentalService
@inject FavoritesService FavoritesService
@inject MessageService MessageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [AllowAnonymous]

<PageTitle>Marketplace - NeighborTools</PageTitle>

<!-- Search Tools & Bundles Section -->
<MudContainer MaxWidth="MaxWidth.Large" Class="py-6">
    <NearbySearch Title="Search Tools & Bundles"
                  Subtitle="Find the perfect tools and bundles for your project"
                  RequiredLocation="false"
                  AutoSearchOnLocationChange="false"
                  DefaultRadius="25"
                  MaxResultsPerType="4"
                  ShowResultsCount="true"
                  ShowSearchTerm="true"
                  Elevation="2"
                  Style="border-radius: 16px;"
                  LocationChanged="OnHeroLocationChanged"
                  ToolResultsChanged="OnHeroToolResultsChanged"
                  BundleResultsChanged="OnHeroBundleResultsChanged"
                  SearchStateChanged="OnHeroSearchStateChanged" />
</MudContainer>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <!-- Statistics Section -->
    <MudPaper Class="pa-6 mb-6" Elevation="0" Style="border-radius: 16px;">
        <MudStack Row Justify="Justify.SpaceAround" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Spacing="4">
            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.h4" Color="Color.Primary" Style="font-weight: 700;">@toolsCount+</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary">Tools Available</MudText>
            </MudStack>
            
            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Color="Color.Secondary" />
                <MudText Typo="Typo.h4" Color="Color.Secondary" Style="font-weight: 700;">@bundlesCount+</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary">Tool Bundles</MudText>
            </MudStack>
            
            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Large" Color="Color.Info" />
                <MudText Typo="Typo.h4" Color="Color.Info" Style="font-weight: 700;">@usersCount+</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary">Active Users</MudText>
            </MudStack>
            
            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                <MudIcon Icon="@Icons.Material.Filled.Handshake" Size="Size.Large" Color="Color.Success" />
                <MudText Typo="Typo.h4" Color="Color.Success" Style="font-weight: 700;">@rentalsCount+</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary">Successful Rentals</MudText>
            </MudStack>
        </MudStack>
    </MudPaper>

    <!-- Quick Access Cards -->
    <QuickActionsCards ToolsCount="@toolsCount" BundlesCount="@bundlesCount" />

    <!-- Popular Categories Section -->
    <MudPaper Class="pa-6 mb-6" Elevation="0" Style="border-radius: 16px;">
        <MudStack Spacing="4">
            <MudText Typo="Typo.h5" Color="Color.Primary" Align="Align.Center">
                Popular Categories
            </MudText>
        
        <!-- Tool Categories -->
        <div>
            <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.Build" Class="mr-2" />
                Tool Categories
            </MudText>
            <MudGrid>
                @foreach (var category in popularToolCategories)
                {
                    <MudItem xs="6" sm="4" md="3">
                        <MudCard Class="category-card" Elevation="2" @onclick="() => NavigateToToolCategory(category)">
                            <MudCardContent Class="pa-4 text-center">
                                <MudIcon Icon="@GetCategoryIcon(category)" Size="Size.Medium" Color="Color.Primary" Class="mb-2" />
                                <MudText Typo="Typo.subtitle2" Style="font-weight: 600;">@category</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </div>
        
        <!-- Bundle Categories -->
        @if (popularBundleCategories.Any())
        {
            <div>
                <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Secondary">
                    <MudIcon Icon="@Icons.Material.Filled.Inventory" Class="mr-2" />
                    Bundle Categories
                </MudText>
                <MudGrid>
                    @foreach (var category in popularBundleCategories.Take(8))
                    {
                        <MudItem xs="6" sm="4" md="3">
                            <MudCard Class="category-card" Elevation="2" @onclick="() => NavigateToBundleCategory(category.Key)">
                                <MudCardContent Class="pa-4 text-center">
                                    <MudIcon Icon="@GetCategoryIcon(category.Key)" Size="Size.Medium" Color="Color.Secondary" Class="mb-2" />
                                    <MudText Typo="Typo.subtitle2" Style="font-weight: 600;">@category.Key</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">@category.Value bundles</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </div>
        }
        </MudStack>
    </MudPaper>

    <!-- Popular Tools Section (Featured + Popular/Recent) -->
    <PopularToolsSection MaxItems="8"
                       ShowViewAllButton="true"
                       IsLoading="false"
                       FeaturedTools="@featuredTools"
                       RecentTools="@recentTools" />

    <!-- Popular Bundles Section (Featured + Popular/Recent) -->
    <PopularBundlesSection MaxItems="6"
                         ShowViewAllButton="true"
                         IsLoading="false"
                         FeaturedBundles="@featuredBundles"
                         RecentBundles="@recentBundles" />

    <!-- Recent Activity Section -->
    @if (recentTools?.Any() == true || recentBundles?.Any() == true)
    {
        <MudPaper Class="pa-6 mb-6" Elevation="0" Style="border-radius: 16px;">
            <MudStack Spacing="4">
                <MudText Typo="Typo.h5" Color="Color.Primary" Align="Align.Center">
                    Recently Added
                </MudText>
            
            <MudGrid>
                @if (recentTools?.Any() == true)
                {
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Primary">Latest Tools</MudText>
                        <MudList T="string">
                            @foreach (var tool in recentTools.Take(5))
                            {
                                <MudListItem T="string" @onclick="() => ViewTool(tool.Id)" Style="cursor: pointer;">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="3">
                                        @if (tool.ImageUrls.Any())
                                        {
                                            <MudAvatar Size="Size.Medium">
                                                <MudImage Src="@UrlService.GetFileUrl(tool.ImageUrls.First())" Alt="@tool.Name" />
                                            </MudAvatar>
                                        }
                                        else
                                        {
                                            <MudAvatar Size="Size.Medium" Color="Color.Primary">
                                                <MudIcon Icon="@Icons.Material.Filled.Build" />
                                            </MudAvatar>
                                        }
                                        <div style="flex: 1;">
                                            <MudText Typo="Typo.subtitle2">@tool.Name</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">@tool.Category â€¢ $@tool.DailyRate/day</MudText>
                                        </div>
                                        <MudChip Size="Size.Small" Color="Color.Success" Text="New" T="string" />
                                    </MudStack>
                                </MudListItem>
                            }
                        </MudList>
                    </MudItem>
                }
                
                @if (recentBundles?.Any() == true)
                {
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Secondary">Latest Bundles</MudText>
                        <MudList T="string">
                            @foreach (var bundle in recentBundles.Take(5))
                            {
                                <MudListItem T="string" @onclick="() => ViewBundle(bundle.Id)" Style="cursor: pointer;">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="3">
                                        @if (!string.IsNullOrEmpty(bundle.ImageUrl))
                                        {
                                            <MudAvatar Size="Size.Medium">
                                                <MudImage Src="@UrlService.GetFileUrl(bundle.ImageUrl)" Alt="@bundle.Name" />
                                            </MudAvatar>
                                        }
                                        else
                                        {
                                            <MudAvatar Size="Size.Medium" Color="Color.Secondary">
                                                <MudIcon Icon="@Icons.Material.Filled.Inventory" />
                                            </MudAvatar>
                                        }
                                        <div style="flex: 1;">
                                            <MudText Typo="Typo.subtitle2">@bundle.Name</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">@bundle.Category â€¢ @bundle.Tools.Count tools</MudText>
                                        </div>
                                        <MudChip Size="Size.Small" Color="Color.Success" Text="New" T="string" />
                                    </MudStack>
                                </MudListItem>
                            }
                        </MudList>
                    </MudItem>
                }
                </MudGrid>
            </MudStack>
        </MudPaper>
    }
</MudContainer>

@code {
    private List<Tool>? featuredTools;
    private List<BundleModel>? featuredBundles;
    private List<Tool>? recentTools;
    private List<BundleModel>? recentBundles;
    private Dictionary<string, int> popularBundleCategories = new();
    
    // Statistics
    private int toolsCount = 0;
    private int bundlesCount = 0;
    private int usersCount = 0;
    private int rentalsCount = 0;
    
    // User Dashboard Data
    private int userToolsCount = 0;
    private int userBundlesCount = 0;
    private int activeRentalsCount = 0;
    private int pendingRequestsCount = 0;
    private int favoritesCount = 0;
    private int unreadMessagesCount = 0;
    private int totalMessagesCount = 0;
    private List<Rental>? recentUserActivity;
    
    // Navigation and Hero Display
    private bool showHero = true;
    
    // Unified Search Results from NearbySearch Component
    private List<NearbyToolDto> heroToolResults = new();
    private List<NearbyBundleDto> heroBundleResults = new();
    private bool isHeroSearching = false;
    
    // Categories
    private readonly string[] popularToolCategories = { "Power Tools", "Hand Tools", "Garden Tools", "Automotive", "Construction", "Home Improvement", "Cleaning", "Other" };

    protected override async Task OnInitializedAsync()
    {
        // Set up navigation change listener
        Navigation.LocationChanged += OnLocationChanged;
        UpdateHeroVisibility();
        
        await Task.WhenAll(
            LoadFeaturedTools(),
            LoadFeaturedBundles(),
            LoadRecentActivity(),
            LoadBundleCategories(),
            LoadStatistics(),
            LoadUserDashboardData()
        );
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateHeroVisibility();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateHeroVisibility()
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
        showHero = currentPath == "" || currentPath == "home";
    }

    private async Task LoadFeaturedTools()
    {
        try
        {
            var result = await ToolService.GetFeaturedToolsAsync();
            if (result.Success && result.Data != null)
            {
                featuredTools = result.Data.ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load featured tools: {ex.Message}");
            // Silently fail - don't disrupt the marketplace loading
        }
    }

    private async Task LoadFeaturedBundles()
    {
        try
        {
            var result = await BundleService.GetBundlesAsync(page: 1, pageSize: 6, featuredOnly: true);
            if (result.Success && result.Data?.Items != null)
            {
                featuredBundles = result.Data.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load featured bundles: {ex.Message}");
            // Silently fail - don't disrupt the marketplace loading
        }
    }

    private async Task LoadRecentActivity()
    {
        try
        {
            // Load recent tools (newest first)
            var toolsResult = await ToolService.GetToolsAsync();
            if (toolsResult.Success && toolsResult.Data != null)
            {
                recentTools = toolsResult.Data
                    .OrderByDescending(t => t.CreatedAt)
                    .Take(5)
                    .ToList();
            }

            // Load recent bundles (newest first)
            var bundlesResult = await BundleService.GetBundlesAsync(page: 1, pageSize: 10);
            if (bundlesResult.Success && bundlesResult.Data?.Items != null)
            {
                // Sort by newest (CreatedAt) and take 5
                recentBundles = bundlesResult.Data.Items
                    .OrderByDescending(b => b.CreatedAt)
                    .Take(5)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load recent activity: {ex.Message}");
            // Silently fail - don't disrupt the marketplace loading
        }
    }

    private async Task LoadBundleCategories()
    {
        try
        {
            var result = await BundleService.GetBundleCategoriesAsync();
            if (result.Success && result.Data != null)
            {
                popularBundleCategories = result.Data
                    .OrderByDescending(c => c.Value)
                    .Take(8)
                    .ToDictionary(c => c.Key, c => c.Value);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load bundle categories: {ex.Message}");
            // Silently fail - don't disrupt the marketplace loading
        }
    }

    private async Task LoadStatistics()
    {
        try
        {
            // Load tools count
            var toolsResult = await ToolService.GetToolsAsync();
            if (toolsResult.Success && toolsResult.Data != null)
            {
                toolsCount = toolsResult.Data.Count;
            }

            // Load bundles count
            var bundlesResult = await BundleService.GetBundlesAsync(page: 1, pageSize: 1);
            if (bundlesResult.Success && bundlesResult.Data != null)
            {
                bundlesCount = bundlesResult.Data.TotalCount;
            }

            // Placeholder statistics - these would come from proper APIs in production
            usersCount = Math.Max(50, toolsCount * 2); // Estimate based on tools
            rentalsCount = Math.Max(100, toolsCount * 3); // Estimate based on tools
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load statistics: {ex.Message}");
            // Use default values if loading fails
            toolsCount = 50;
            bundlesCount = 20;
            usersCount = 100;
            rentalsCount = 200;
        }
    }

    // NearbySearch Event Handlers
    private async Task OnHeroLocationChanged(LocationOption? location)
    {
        // Location selection handled by NearbySearch component
        await Task.CompletedTask;
    }

    private async Task OnHeroToolResultsChanged(List<NearbyToolDto> toolResults)
    {
        heroToolResults = toolResults ?? new List<NearbyToolDto>();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task OnHeroBundleResultsChanged(List<NearbyBundleDto> bundleResults)
    {
        heroBundleResults = bundleResults ?? new List<NearbyBundleDto>();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task OnHeroSearchStateChanged(bool isSearching)
    {
        isHeroSearching = isSearching;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private void ViewTool(string toolId)
    {
        Navigation.NavigateTo($"/tools/{toolId}");
    }

    private void ViewBundle(Guid bundleId)
    {
        Navigation.NavigateTo($"/bundles/{bundleId}");
    }

    private void NavigateToToolCategory(string category)
    {
        Navigation.NavigateTo($"/tools?category={Uri.EscapeDataString(category)}");
    }

    private void NavigateToBundleCategory(string category)
    {
        Navigation.NavigateTo($"/bundles?category={Uri.EscapeDataString(category)}");
    }

    private async Task LoadUserDashboardData()
    {
        try
        {
            // Check if user is authenticated first
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (!authState.User.Identity?.IsAuthenticated ?? true)
            {
                // User is not authenticated, skip loading user data
                return;
            }

            // Load user's tools count
            var userToolsResult = await ToolService.GetMyToolsAsync();
            if (userToolsResult.Success && userToolsResult.Data != null)
            {
                userToolsCount = userToolsResult.Data.Count;
            }

            // Load user's bundles count
            var userBundlesResult = await BundleService.GetMyBundlesAsync();
            if (userBundlesResult.Success && userBundlesResult.Data != null)
            {
                userBundlesCount = userBundlesResult.Data.Items.Count;
            }

            // Load rental statistics
            var rentalsResult = await RentalService.GetMyRentalsAsync();
            if (rentalsResult.Success && rentalsResult.Data != null)
            {
                var rentals = rentalsResult.Data.ToList();
                activeRentalsCount = rentals.Count(r => r.Status == "Active" || r.Status == "Approved");
                pendingRequestsCount = rentals.Count(r => r.Status == "Pending");
                
                // Get recent activity (last 5 rentals)
                recentUserActivity = rentals
                    .OrderByDescending(r => r.CreatedAt)
                    .Take(5)
                    .ToList();
            }

            // Load favorites count
            var favoritesResult = await FavoritesService.GetFavoritesCountAsync();
            if (favoritesResult.Success)
            {
                favoritesCount = favoritesResult.Data;
            }

            // Load message statistics (both unread and total counts)
            var messageStatsResult = await MessageService.GetMessageStatisticsAsync();
            if (messageStatsResult.Success && messageStatsResult.Data != null)
            {
                unreadMessagesCount = messageStatsResult.Data.UnreadMessages;
                totalMessagesCount = messageStatsResult.Data.TotalMessages;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load user dashboard data: {ex.Message}");
            // Silently fail - dashboard will show default values
        }
    }

    private string GetActivityIcon(Rental rental)
    {
        return rental.Status?.ToLower() switch
        {
            "pending" => Icons.Material.Filled.Schedule,
            "approved" => Icons.Material.Filled.CheckCircle,
            "active" => Icons.Material.Filled.PlayCircle,
            "completed" => Icons.Material.Filled.TaskAlt,
            "cancelled" => Icons.Material.Filled.Cancel,
            "disputed" => Icons.Material.Filled.Warning,
            _ => Icons.Material.Filled.Info
        };
    }

    private string GetActivityDescription(Rental rental)
    {
        var action = rental.Status?.ToLower() switch
        {
            "pending" => "requested",
            "approved" => "approved rental for",
            "active" => "currently renting",
            "completed" => "completed rental of",
            "cancelled" => "cancelled rental of",
            "disputed" => "disputed rental of",
            _ => "activity with"
        };
        
        return $"You {action} {rental.ToolName ?? "a tool"}";
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;
        
        if (timeSpan.TotalDays >= 1)
            return $"{(int)timeSpan.TotalDays}d ago";
        if (timeSpan.TotalHours >= 1)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalMinutes >= 1)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        
        return "Just now";
    }

    private string GetCategoryIcon(string category)
    {
        return category.ToLower() switch
        {
            "power tools" => Icons.Material.Filled.ElectricBolt,
            "hand tools" => Icons.Material.Filled.Handyman,
            "garden tools" or "garden" => Icons.Material.Filled.Grass,
            "automotive" => Icons.Material.Filled.DirectionsCar,
            "construction" => Icons.Material.Filled.Construction,
            "home improvement" => Icons.Material.Filled.Home,
            "cleaning" => Icons.Material.Filled.CleaningServices,
            "workshop" => Icons.Material.Filled.Build,
            _ => Icons.Material.Filled.Category
        };
    }

    // Helper methods for other functionality
    private bool IsFeaturedTool(string toolId)
    {
        return featuredTools?.Any(f => f.Id == toolId) == true;
    }
    
    private bool IsFeaturedBundle(Guid bundleId)
    {
        return featuredBundles?.Any(f => f.Id == bundleId) == true;
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}