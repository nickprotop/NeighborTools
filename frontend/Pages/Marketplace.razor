@page "/"
@page "/marketplace"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@using ToolsSharing.Frontend.Models
@using ToolsSharing.Frontend.Services
@using frontend.Components
@using frontend.Components.Bundles
@implements IDisposable
@inject IToolService ToolService
@inject BundleService BundleService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IUrlService UrlService
@inject IRentalService RentalService
@inject FavoritesService FavoritesService
@inject MessageService MessageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [AllowAnonymous]

<PageTitle>Marketplace - NeighborTools</PageTitle>

<!-- Modern Login/Register Banner for Non-Logged-In Users -->
@if (showHero)
{
<AuthorizeView>
    <NotAuthorized>
        <MudPaper Elevation="0" Class="pa-8 mb-8 animate-fade-in-up" Style="background: var(--mud-gradient-hero); border-radius: var(--mud-radius-2xl); box-shadow: var(--mud-shadow-lg);">
            <div class="d-flex flex-column align-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.Handyman" Size="Size.Large" Class="animate-float" Style="font-size: 4rem; color: white; margin-bottom: var(--mud-spacing-lg);" />
                <MudText Typo="Typo.h3" Style="color: white; font-weight: var(--mud-font-weight-bold); font-family: var(--mud-font-family-sans); line-height: var(--mud-line-height-tight);" GutterBottom="true">
                    Join NeighborTools Today
                </MudText>
                <MudText Typo="Typo.h6" Style="color: rgba(255,255,255,0.9); max-width: 700px; margin-bottom: var(--mud-spacing-xl); font-family: var(--mud-font-family-sans); line-height: var(--mud-line-height-relaxed);">
                    Start sharing and borrowing tools with your neighbors. Build stronger communities while saving money.
                </MudText>
                
                <!-- Benefits Grid -->
                <MudGrid Class="mb-6" Style="max-width: 800px;">
                    <MudItem xs="12" sm="4">
                        <div class="d-flex flex-column align-center">
                            <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Style="color: rgba(255,255,255,0.9); font-size: 2rem; margin-bottom: var(--mud-spacing-sm);" />
                            <MudText Typo="Typo.subtitle1" Style="color: white; font-weight: var(--mud-font-weight-semibold); font-family: var(--mud-font-family-sans);">Save Money</MudText>
                            <MudText Typo="Typo.caption" Style="color: rgba(255,255,255,0.8); font-family: var(--mud-font-family-sans); text-align: center;">
                                Rent tools instead of buying them
                            </MudText>
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <div class="d-flex flex-column align-center">
                            <MudIcon Icon="@Icons.Material.Filled.People" Style="color: rgba(255,255,255,0.9); font-size: 2rem; margin-bottom: var(--mud-spacing-sm);" />
                            <MudText Typo="Typo.subtitle1" Style="color: white; font-weight: var(--mud-font-weight-semibold); font-family: var(--mud-font-family-sans);">Build Community</MudText>
                            <MudText Typo="Typo.caption" Style="color: rgba(255,255,255,0.8); font-family: var(--mud-font-family-sans); text-align: center;">
                                Connect with your neighbors
                            </MudText>
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <div class="d-flex flex-column align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Recycling" Style="color: rgba(255,255,255,0.9); font-size: 2rem; margin-bottom: var(--mud-spacing-sm);" />
                            <MudText Typo="Typo.subtitle1" Style="color: white; font-weight: var(--mud-font-weight-semibold); font-family: var(--mud-font-family-sans);">Go Green</MudText>
                            <MudText Typo="Typo.caption" Style="color: rgba(255,255,255,0.8); font-family: var(--mud-font-family-sans); text-align: center;">
                                Reduce waste through sharing
                            </MudText>
                        </div>
                    </MudItem>
                </MudGrid>

                <!-- Action Buttons -->
                <div class="d-flex gap-4 flex-wrap justify-center">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Warning"
                               Size="Size.Large"
                               Href="/login"
                               StartIcon="@Icons.Material.Filled.Login"
                               Class="animate-glow"
                               Style="background: white; color: var(--mud-palette-primary); font-weight: var(--mud-font-weight-bold); font-family: var(--mud-font-family-sans); border-radius: var(--mud-radius-full); padding: var(--mud-spacing-lg) var(--mud-spacing-2xl); box-shadow: 0 4px 12px rgba(0,0,0,0.15);">
                        Sign In
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Surface"
                               Size="Size.Large"
                               Href="/register"
                               StartIcon="@Icons.Material.Filled.PersonAdd"
                               Style="color: white; border-color: rgba(255,255,255,0.8); background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); font-weight: var(--mud-font-weight-bold); font-family: var(--mud-font-family-sans); border-radius: var(--mud-radius-full); padding: var(--mud-spacing-lg) var(--mud-spacing-2xl);">
                        Get Started
                    </MudButton>
                </div>
            </div>
        </MudPaper>
    </NotAuthorized>
    <Authorized>
        <!-- User Dashboard Section for Logged-In Users -->
        <MudPaper Class="pa-6 mb-6" Elevation="2" Style="border-radius: 16px; background: var(--mud-gradient-hero); color: white;">
            <MudStack Spacing="4">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <div>
                        <MudText Typo="Typo.h5" Style="font-weight: 600;">
                            <MudIcon Icon="@Icons.Material.Filled.Dashboard" Class="mr-2" />
                            Welcome back to your marketplace!
                        </MudText>
                        <MudText Typo="Typo.body1" Style="opacity: 0.9;">
                            Here's a quick overview of your tool sharing activity
                        </MudText>
                    </div>
                </MudStack>
                
                <!-- Quick Stats Grid -->
                <MudGrid>
                    <MudItem xs="6" sm="3">
                        <MudButton Variant="Variant.Text" 
                                 FullWidth="true"
                                 Href="/favorites"
                                 Style="height: auto; padding: 0; border-radius: 12px;">
                            <MudPaper Class="pa-4 text-center" Style="background: rgba(255,255,255,0.15); border-radius: 12px; backdrop-filter: blur(10px); width: 100%; cursor: pointer;">
                                <MudIcon Icon="@Icons.Material.Filled.Favorite" Size="Size.Large" Style="color: white; margin-bottom: 8px;" />
                                <MudText Typo="Typo.h6" Style="color: white; font-weight: 600;">@favoritesCount</MudText>
                                <MudText Typo="Typo.caption" Style="color: rgba(255,255,255,0.8);">Favorites</MudText>
                            </MudPaper>
                        </MudButton>
                    </MudItem>
                    
                    <MudItem xs="6" sm="3">
                        <MudButton Variant="Variant.Text" 
                                 FullWidth="true"
                                 Href="/messages"
                                 Style="height: auto; padding: 0; border-radius: 12px;">
                            <MudPaper Class="pa-4 text-center" Style="background: rgba(255,255,255,0.15); border-radius: 12px; backdrop-filter: blur(10px); width: 100%; cursor: pointer;">
                                <MudIcon Icon="@Icons.Material.Filled.Message" Size="Size.Large" Style="color: white; margin-bottom: 8px;" />
                                <MudText Typo="Typo.h6" Style="color: white; font-weight: 600;">@unreadMessagesCount/@totalMessagesCount</MudText>
                                <MudText Typo="Typo.caption" Style="color: rgba(255,255,255,0.8);">Unread/Total</MudText>
                            </MudPaper>
                        </MudButton>
                    </MudItem>
                    
                    <MudItem xs="6" sm="3">
                        <MudPaper Class="pa-4 text-center" Style="background: rgba(255,255,255,0.15); border-radius: 12px; backdrop-filter: blur(10px);">
                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Large" Style="color: white; margin-bottom: 8px;" />
                            <MudText Typo="Typo.h6" Style="color: white; font-weight: 600;">@activeRentalsCount</MudText>
                            <MudText Typo="Typo.caption" Style="color: rgba(255,255,255,0.8);">Active Rentals</MudText>
                        </MudPaper>
                    </MudItem>
                    
                    <MudItem xs="6" sm="3">
                        <MudPaper Class="pa-4 text-center" Style="background: rgba(255,255,255,0.15); border-radius: 12px; backdrop-filter: blur(10px);">
                            <MudIcon Icon="@Icons.Material.Filled.Pending" Size="Size.Large" Style="color: white; margin-bottom: 8px;" />
                            <MudText Typo="Typo.h6" Style="color: white; font-weight: 600;">@pendingRequestsCount</MudText>
                            <MudText Typo="Typo.caption" Style="color: rgba(255,255,255,0.8);">Pending Requests</MudText>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
                
                <!-- Total Items Summary -->
                <MudPaper Class="pa-4 mt-4 text-center" Style="background: rgba(255,255,255,0.1); border-radius: 12px; backdrop-filter: blur(10px);">
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Large" Style="color: white; margin-bottom: 8px;" />
                    <MudText Typo="Typo.h5" Style="color: white; font-weight: 600;">@(userToolsCount + userBundlesCount)</MudText>
                    <MudText Typo="Typo.body2" Style="color: rgba(255,255,255,0.9);">@userToolsCount tools / @userBundlesCount bundles</MudText>
                </MudPaper>
                
                <!-- Quick Actions -->
                <MudStack Row Spacing="2" Wrap="Wrap.Wrap" Justify="Justify.Center">
                    <MudButton Variant="Variant.Outlined" 
                             Color="Color.Surface" 
                             StartIcon="@Icons.Material.Filled.Build"
                             Href="/my-tools"
                             Style="color: white; border-color: rgba(255,255,255,0.8); background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); border-radius: 25px;">
                        My Tools
                    </MudButton>
                    
                    <MudButton Variant="Variant.Outlined" 
                             Color="Color.Surface" 
                             StartIcon="@Icons.Material.Filled.History"
                             Href="/my-rentals"
                             Style="color: white; border-color: rgba(255,255,255,0.8); background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); border-radius: 25px;">
                        My Rentals
                    </MudButton>
                    
                    @if (pendingRequestsCount > 0)
                    {
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Error" 
                                 StartIcon="@Icons.Material.Filled.Notifications"
                                 Href="/rental-requests"
                                 Style="background: #EF4444; color: white; border-radius: 25px; box-shadow: 0 2px 8px rgba(239,68,68,0.3);">
                            @pendingRequestsCount Pending
                        </MudButton>
                    }
                </MudStack>
                
                <!-- Recent Activity -->
                @if (recentUserActivity?.Any() == true)
                {
                    <MudPaper Class="pa-4" Style="background: rgba(255,255,255,0.1); border-radius: 12px; backdrop-filter: blur(10px);">
                        <MudText Typo="Typo.subtitle1" Style="color: white; font-weight: 600; margin-bottom: 12px;">
                            <MudIcon Icon="@Icons.Material.Filled.Timeline" Class="mr-2" />
                            Recent Activity
                        </MudText>
                        <MudStack Spacing="2">
                            @foreach (var activity in recentUserActivity.Take(3))
                            {
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@GetActivityIcon(activity)" Size="Size.Small" Style="color: rgba(255,255,255,0.8);" />
                                    <MudText Typo="Typo.body2" Style="color: rgba(255,255,255,0.9); flex: 1;">
                                        @GetActivityDescription(activity)
                                    </MudText>
                                    <MudText Typo="Typo.caption" Style="color: rgba(255,255,255,0.7);">
                                        @GetRelativeTime(activity.CreatedAt)
                                    </MudText>
                                </MudStack>
                            }
                        </MudStack>
                    </MudPaper>
                }
            </MudStack>
        </MudPaper>
    </Authorized>
</AuthorizeView>
}

<style>
    .marketplace-hero {
        background: linear-gradient(135deg, var(--mud-palette-primary-lighten) 0%, var(--mud-palette-primary) 100%);
        color: white;
        padding: 4rem 0;
        margin-bottom: 2rem;
    }
    
    .marketplace-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        height: 100%;
    }
    
    .marketplace-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 12px 24px rgba(0,0,0,0.15);
    }
    
    .category-card {
        transition: all 0.3s ease;
        cursor: pointer;
        height: 100%;
    }
    
    .category-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 16px rgba(0,0,0,0.1);
    }
    
    .featured-carousel {
        margin-bottom: 3rem;
    }
    
</style>

<!-- Hero Section -->
<div class="marketplace-hero">
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudStack AlignItems="AlignItems.Center" Spacing="4">
            <MudIcon Icon="@Icons.Material.Filled.Store" Size="Size.Large" Style="font-size: 4rem;" />
            <MudText Typo="Typo.h3" Align="Align.Center" Style="font-weight: 600;">
                Find the perfect tools and bundles for your project
            </MudText>
            <MudText Typo="Typo.h6" Align="Align.Center" Style="opacity: 0.9; max-width: 600px;">
                Discover thousands of quality tools and curated bundles from your neighbors
            </MudText>
            
            <!-- Hero Search Bar -->
            <MudPaper Class="pa-2" Style="max-width: 600px; width: 100%; border-radius: 50px;">
                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                    <MudTextField @bind-Value="heroSearchTerm"
                                  Placeholder="Search tools and bundles for your next project..."
                                  Variant="Variant.Text"
                                  @onkeypress="HandleHeroKeyPress"
                                  Style="flex: 1;"
                                  DisableUnderLine="true" />
                    <MudButton Variant="Variant.Filled" 
                             Color="Color.Primary" 
                             Size="Size.Large"
                             OnClick="HandleHeroSearch"
                             StartIcon="@Icons.Material.Filled.Search"
                             Style="border-radius: 50px; min-width: 120px;">
                        Search
                    </MudButton>
                </MudStack>
            </MudPaper>
        </MudStack>
    </MudContainer>
</div>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-6">
    <!-- Quick Access Cards -->
    <MudPaper Class="pa-6 mb-6" Elevation="0" Style="border-radius: 16px;">
        <MudStack Spacing="4">
            <MudText Typo="Typo.h4" Color="Color.Primary" Align="Align.Center" Class="mb-4">
                What are you looking for?
            </MudText>
            
            <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="6" md="5">
                <MudCard Class="marketplace-card" Elevation="6" Style="border-radius: 16px;">
                    <MudCardContent Class="pa-6 text-center">
                        <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Large" Color="Color.Primary" Class="mb-4" Style="font-size: 4rem;" />
                        <MudText Typo="Typo.h5" Class="mb-3" Color="Color.Primary">Individual Tools</MudText>
                        <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                            Browse @toolsCount+ quality tools from power tools to hand tools
                        </MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-4">
                            Popular: Power Tools, Hand Tools, Garden Tools, Automotive
                        </MudText>
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Primary" 
                                 Size="Size.Large"
                                 FullWidth="true"
                                 OnClick="@(() => Navigation.NavigateTo("/tools"))"
                                 StartIcon="@Icons.Material.Filled.ArrowForward">
                            Browse All Tools
                        </MudButton>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="5">
                <MudCard Class="marketplace-card" Elevation="6" Style="border-radius: 16px;">
                    <MudCardContent Class="pa-6 text-center">
                        <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Color="Color.Secondary" Class="mb-4" Style="font-size: 4rem;" />
                        <MudText Typo="Typo.h5" Class="mb-3" Color="Color.Secondary">Tool Bundles</MudText>
                        <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                            Discover @bundlesCount+ curated tool collections for complete projects
                        </MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-4">
                            Popular: Construction, Garden, Workshop, Home Improvement
                        </MudText>
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Secondary" 
                                 Size="Size.Large"
                                 FullWidth="true"
                                 OnClick="@(() => Navigation.NavigateTo("/bundles"))"
                                 StartIcon="@Icons.Material.Filled.ArrowForward">
                            Browse All Bundles
                        </MudButton>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            </MudGrid>
        </MudStack>
    </MudPaper>

    <!-- Featured Tools Section -->
    @if (featuredTools?.Any() == true)
    {
        <MudPaper Class="pa-6 mb-6" Elevation="0" Style="border-radius: 16px;">
            <MudStack Spacing="3" Class="mb-4">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h5" Color="Color.Primary">
                        <MudIcon Icon="@Icons.Material.Filled.Star" Class="mr-2" />
                        Featured Tools
                    </MudText>
                    <MudButton Variant="Variant.Text" 
                             Color="Color.Primary" 
                             OnClick="@(() => Navigation.NavigateTo("/tools"))"
                             EndIcon="@Icons.Material.Filled.ArrowForward">
                        View All Tools
                    </MudButton>
                </MudStack>
                
                <MudGrid>
                    @foreach (var tool in featuredTools.Take(4))
                    {
                        <MudItem xs="12" sm="6" md="3">
                            <MudCard Class="marketplace-card" Elevation="4" Style="border-radius: 12px; cursor: pointer;" @onclick="() => ViewTool(tool.Id)">
                                @if (tool.ImageUrls.Any())
                                {
                                    <MudCardMedia Image="@UrlService.GetFileUrl(tool.ImageUrls.First())" Height="180" />
                                }
                                else
                                {
                                    <ThemeAwarePlaceholder Height="180px" 
                                                          Icon="@Icons.Material.Filled.Build" 
                                                          IconSize="Size.Large"
                                                          IconFontSize="3rem" />
                                }
                                
                                <MudCardContent Class="pa-3">
                                    <MudText Typo="Typo.subtitle1" Class="mb-2" Style="font-weight: 600;">@tool.Name</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2" Style="height: 2.5em; overflow: hidden;">
                                        @(tool.Description.Length > 60 ? tool.Description.Substring(0, 60) + "..." : tool.Description)
                                    </MudText>
                                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudChip Size="Size.Small" Color="Color.Primary" Text="@tool.Category" T="string" />
                                        <MudText Typo="Typo.subtitle2" Color="Color.Primary" Style="font-weight: 600;">
                                            $@tool.DailyRate.ToString("F2")/day
                                        </MudText>
                                    </MudStack>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudStack>
        </MudPaper>
    }

    <!-- Featured Bundles Section -->
    @if (featuredBundles?.Any() == true)
    {
        <MudPaper Class="pa-6 mb-6" Elevation="0" Style="border-radius: 16px;">
            <MudStack Spacing="3" Class="mb-4">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h5" Color="Color.Secondary">
                        <MudIcon Icon="@Icons.Material.Filled.Star" Class="mr-2" />
                        Featured Bundles
                    </MudText>
                    <MudButton Variant="Variant.Text" 
                             Color="Color.Secondary" 
                             OnClick="@(() => Navigation.NavigateTo("/bundles"))"
                             EndIcon="@Icons.Material.Filled.ArrowForward">
                        View All Bundles
                    </MudButton>
                </MudStack>
                
                <MudGrid>
                    @foreach (var bundle in featuredBundles.Take(3))
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <BundleCard Bundle="bundle" OnClick="() => ViewBundle(bundle.Id)" />
                        </MudItem>
                    }
                </MudGrid>
            </MudStack>
        </MudPaper>
    }

    <!-- Statistics Section -->
    <MudPaper Class="pa-6 mb-6" Elevation="0" Style="border-radius: 16px;">
        <MudStack Row Justify="Justify.SpaceAround" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Spacing="4">
            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.h4" Color="Color.Primary" Style="font-weight: 700;">@toolsCount+</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary">Tools Available</MudText>
            </MudStack>
            
            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Color="Color.Secondary" />
                <MudText Typo="Typo.h4" Color="Color.Secondary" Style="font-weight: 700;">@bundlesCount+</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary">Tool Bundles</MudText>
            </MudStack>
            
            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Large" Color="Color.Info" />
                <MudText Typo="Typo.h4" Color="Color.Info" Style="font-weight: 700;">@usersCount+</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary">Active Users</MudText>
            </MudStack>
            
            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                <MudIcon Icon="@Icons.Material.Filled.Handshake" Size="Size.Large" Color="Color.Success" />
                <MudText Typo="Typo.h4" Color="Color.Success" Style="font-weight: 700;">@rentalsCount+</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary">Successful Rentals</MudText>
            </MudStack>
        </MudStack>
    </MudPaper>

    <!-- Popular Categories Section -->
    <MudPaper Class="pa-6 mb-6" Elevation="0" Style="border-radius: 16px;">
        <MudStack Spacing="4">
            <MudText Typo="Typo.h5" Color="Color.Primary" Align="Align.Center">
                Popular Categories
            </MudText>
        
        <!-- Tool Categories -->
        <div>
            <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.Build" Class="mr-2" />
                Tool Categories
            </MudText>
            <MudGrid>
                @foreach (var category in popularToolCategories)
                {
                    <MudItem xs="6" sm="4" md="3">
                        <MudCard Class="category-card" Elevation="2" @onclick="() => NavigateToToolCategory(category)">
                            <MudCardContent Class="pa-4 text-center">
                                <MudIcon Icon="@GetCategoryIcon(category)" Size="Size.Medium" Color="Color.Primary" Class="mb-2" />
                                <MudText Typo="Typo.subtitle2" Style="font-weight: 600;">@category</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </div>
        
        <!-- Bundle Categories -->
        @if (popularBundleCategories.Any())
        {
            <div>
                <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Secondary">
                    <MudIcon Icon="@Icons.Material.Filled.Inventory" Class="mr-2" />
                    Bundle Categories
                </MudText>
                <MudGrid>
                    @foreach (var category in popularBundleCategories.Take(8))
                    {
                        <MudItem xs="6" sm="4" md="3">
                            <MudCard Class="category-card" Elevation="2" @onclick="() => NavigateToBundleCategory(category.Key)">
                                <MudCardContent Class="pa-4 text-center">
                                    <MudIcon Icon="@GetCategoryIcon(category.Key)" Size="Size.Medium" Color="Color.Secondary" Class="mb-2" />
                                    <MudText Typo="Typo.subtitle2" Style="font-weight: 600;">@category.Key</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">@category.Value bundles</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </div>
        }
        </MudStack>
    </MudPaper>

    <!-- Recent Activity Section -->
    @if (recentTools?.Any() == true || recentBundles?.Any() == true)
    {
        <MudPaper Class="pa-6 mb-6" Elevation="0" Style="border-radius: 16px;">
            <MudStack Spacing="4">
                <MudText Typo="Typo.h5" Color="Color.Primary" Align="Align.Center">
                    Recently Added
                </MudText>
            
            <MudGrid>
                @if (recentTools?.Any() == true)
                {
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Primary">Latest Tools</MudText>
                        <MudList T="string">
                            @foreach (var tool in recentTools.Take(5))
                            {
                                <MudListItem T="string" @onclick="() => ViewTool(tool.Id)" Style="cursor: pointer;">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="3">
                                        @if (tool.ImageUrls.Any())
                                        {
                                            <MudAvatar Size="Size.Medium">
                                                <MudImage Src="@UrlService.GetFileUrl(tool.ImageUrls.First())" Alt="@tool.Name" />
                                            </MudAvatar>
                                        }
                                        else
                                        {
                                            <MudAvatar Size="Size.Medium" Color="Color.Primary">
                                                <MudIcon Icon="@Icons.Material.Filled.Build" />
                                            </MudAvatar>
                                        }
                                        <div style="flex: 1;">
                                            <MudText Typo="Typo.subtitle2">@tool.Name</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">@tool.Category • $@tool.DailyRate/day</MudText>
                                        </div>
                                        <MudChip Size="Size.Small" Color="Color.Success" Text="New" T="string" />
                                    </MudStack>
                                </MudListItem>
                            }
                        </MudList>
                    </MudItem>
                }
                
                @if (recentBundles?.Any() == true)
                {
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Secondary">Latest Bundles</MudText>
                        <MudList T="string">
                            @foreach (var bundle in recentBundles.Take(5))
                            {
                                <MudListItem T="string" @onclick="() => ViewBundle(bundle.Id)" Style="cursor: pointer;">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="3">
                                        @if (!string.IsNullOrEmpty(bundle.ImageUrl))
                                        {
                                            <MudAvatar Size="Size.Medium">
                                                <MudImage Src="@UrlService.GetFileUrl(bundle.ImageUrl)" Alt="@bundle.Name" />
                                            </MudAvatar>
                                        }
                                        else
                                        {
                                            <MudAvatar Size="Size.Medium" Color="Color.Secondary">
                                                <MudIcon Icon="@Icons.Material.Filled.Inventory" />
                                            </MudAvatar>
                                        }
                                        <div style="flex: 1;">
                                            <MudText Typo="Typo.subtitle2">@bundle.Name</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">@bundle.Category • @bundle.Tools.Count tools</MudText>
                                        </div>
                                        <MudChip Size="Size.Small" Color="Color.Success" Text="New" T="string" />
                                    </MudStack>
                                </MudListItem>
                            }
                        </MudList>
                    </MudItem>
                }
                </MudGrid>
            </MudStack>
        </MudPaper>
    }
</MudContainer>

@code {
    private List<Tool>? featuredTools;
    private List<BundleModel>? featuredBundles;
    private List<Tool>? recentTools;
    private List<BundleModel>? recentBundles;
    private Dictionary<string, int> popularBundleCategories = new();
    
    // Statistics
    private int toolsCount = 0;
    private int bundlesCount = 0;
    private int usersCount = 0;
    private int rentalsCount = 0;
    
    // User Dashboard Data
    private int userToolsCount = 0;
    private int userBundlesCount = 0;
    private int activeRentalsCount = 0;
    private int pendingRequestsCount = 0;
    private int favoritesCount = 0;
    private int unreadMessagesCount = 0;
    private int totalMessagesCount = 0;
    private List<Rental>? recentUserActivity;
    
    // Navigation and Hero Display
    private bool showHero = true;
    
    // Search
    private string heroSearchTerm = string.Empty;
    
    // Categories
    private readonly string[] popularToolCategories = { "Power Tools", "Hand Tools", "Garden Tools", "Automotive", "Construction", "Home Improvement", "Cleaning", "Other" };

    protected override async Task OnInitializedAsync()
    {
        // Set up navigation change listener
        Navigation.LocationChanged += OnLocationChanged;
        UpdateHeroVisibility();
        
        await Task.WhenAll(
            LoadFeaturedTools(),
            LoadFeaturedBundles(),
            LoadRecentActivity(),
            LoadBundleCategories(),
            LoadStatistics(),
            LoadUserDashboardData()
        );
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateHeroVisibility();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateHeroVisibility()
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
        showHero = currentPath == "" || currentPath == "home";
    }

    private async Task LoadFeaturedTools()
    {
        try
        {
            var result = await ToolService.GetFeaturedToolsAsync();
            if (result.Success && result.Data != null)
            {
                featuredTools = result.Data.ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load featured tools: {ex.Message}");
            // Silently fail - don't disrupt the marketplace loading
        }
    }

    private async Task LoadFeaturedBundles()
    {
        try
        {
            var result = await BundleService.GetBundlesAsync(page: 1, pageSize: 6, featuredOnly: true);
            if (result.Success && result.Data?.Items != null)
            {
                featuredBundles = result.Data.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load featured bundles: {ex.Message}");
            // Silently fail - don't disrupt the marketplace loading
        }
    }

    private async Task LoadRecentActivity()
    {
        try
        {
            // Load recent tools (newest first)
            var toolsResult = await ToolService.GetToolsAsync();
            if (toolsResult.Success && toolsResult.Data != null)
            {
                recentTools = toolsResult.Data
                    .OrderByDescending(t => t.CreatedAt)
                    .Take(5)
                    .ToList();
            }

            // Load recent bundles (newest first)
            var bundlesResult = await BundleService.GetBundlesAsync(page: 1, pageSize: 10);
            if (bundlesResult.Success && bundlesResult.Data?.Items != null)
            {
                // Sort by newest (CreatedAt) and take 5
                recentBundles = bundlesResult.Data.Items
                    .OrderByDescending(b => b.CreatedAt)
                    .Take(5)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load recent activity: {ex.Message}");
            // Silently fail - don't disrupt the marketplace loading
        }
    }

    private async Task LoadBundleCategories()
    {
        try
        {
            var result = await BundleService.GetBundleCategoriesAsync();
            if (result.Success && result.Data != null)
            {
                popularBundleCategories = result.Data
                    .OrderByDescending(c => c.Value)
                    .Take(8)
                    .ToDictionary(c => c.Key, c => c.Value);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load bundle categories: {ex.Message}");
            // Silently fail - don't disrupt the marketplace loading
        }
    }

    private async Task LoadStatistics()
    {
        try
        {
            // Load tools count
            var toolsResult = await ToolService.GetToolsAsync();
            if (toolsResult.Success && toolsResult.Data != null)
            {
                toolsCount = toolsResult.Data.Count;
            }

            // Load bundles count
            var bundlesResult = await BundleService.GetBundlesAsync(page: 1, pageSize: 1);
            if (bundlesResult.Success && bundlesResult.Data != null)
            {
                bundlesCount = bundlesResult.Data.TotalCount;
            }

            // Placeholder statistics - these would come from proper APIs in production
            usersCount = Math.Max(50, toolsCount * 2); // Estimate based on tools
            rentalsCount = Math.Max(100, toolsCount * 3); // Estimate based on tools
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load statistics: {ex.Message}");
            // Use default values if loading fails
            toolsCount = 50;
            bundlesCount = 20;
            usersCount = 100;
            rentalsCount = 200;
        }
    }

    private async Task HandleHeroKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await HandleHeroSearch();
        }
    }

    private async Task HandleHeroSearch()
    {
        if (!string.IsNullOrWhiteSpace(heroSearchTerm))
        {
            // For now, redirect to tools page with search term
            // In the future, we could implement a unified search
            Navigation.NavigateTo($"/tools?search={Uri.EscapeDataString(heroSearchTerm)}");
        }
        else
        {
            Navigation.NavigateTo("/tools");
        }
        await Task.CompletedTask;
    }

    private void ViewTool(string toolId)
    {
        Navigation.NavigateTo($"/tools/{toolId}");
    }

    private void ViewBundle(Guid bundleId)
    {
        Navigation.NavigateTo($"/bundles/{bundleId}");
    }

    private void NavigateToToolCategory(string category)
    {
        Navigation.NavigateTo($"/tools?category={Uri.EscapeDataString(category)}");
    }

    private void NavigateToBundleCategory(string category)
    {
        Navigation.NavigateTo($"/bundles?category={Uri.EscapeDataString(category)}");
    }

    private async Task LoadUserDashboardData()
    {
        try
        {
            // Check if user is authenticated first
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (!authState.User.Identity?.IsAuthenticated ?? true)
            {
                // User is not authenticated, skip loading user data
                return;
            }

            // Load user's tools count
            var userToolsResult = await ToolService.GetMyToolsAsync();
            if (userToolsResult.Success && userToolsResult.Data != null)
            {
                userToolsCount = userToolsResult.Data.Count;
            }

            // Load user's bundles count
            var userBundlesResult = await BundleService.GetMyBundlesAsync();
            if (userBundlesResult.Success && userBundlesResult.Data != null)
            {
                userBundlesCount = userBundlesResult.Data.Items.Count;
            }

            // Load rental statistics
            var rentalsResult = await RentalService.GetMyRentalsAsync();
            if (rentalsResult.Success && rentalsResult.Data != null)
            {
                var rentals = rentalsResult.Data.ToList();
                activeRentalsCount = rentals.Count(r => r.Status == "Active" || r.Status == "Approved");
                pendingRequestsCount = rentals.Count(r => r.Status == "Pending");
                
                // Get recent activity (last 5 rentals)
                recentUserActivity = rentals
                    .OrderByDescending(r => r.CreatedAt)
                    .Take(5)
                    .ToList();
            }

            // Load favorites count
            var favoritesResult = await FavoritesService.GetFavoritesCountAsync();
            if (favoritesResult.Success)
            {
                favoritesCount = favoritesResult.Data;
            }

            // Load message statistics (both unread and total counts)
            var messageStatsResult = await MessageService.GetMessageStatisticsAsync();
            if (messageStatsResult.Success && messageStatsResult.Data != null)
            {
                unreadMessagesCount = messageStatsResult.Data.UnreadMessages;
                totalMessagesCount = messageStatsResult.Data.TotalMessages;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load user dashboard data: {ex.Message}");
            // Silently fail - dashboard will show default values
        }
    }

    private string GetActivityIcon(Rental rental)
    {
        return rental.Status?.ToLower() switch
        {
            "pending" => Icons.Material.Filled.Schedule,
            "approved" => Icons.Material.Filled.CheckCircle,
            "active" => Icons.Material.Filled.PlayCircle,
            "completed" => Icons.Material.Filled.TaskAlt,
            "cancelled" => Icons.Material.Filled.Cancel,
            "disputed" => Icons.Material.Filled.Warning,
            _ => Icons.Material.Filled.Info
        };
    }

    private string GetActivityDescription(Rental rental)
    {
        var action = rental.Status?.ToLower() switch
        {
            "pending" => "requested",
            "approved" => "approved rental for",
            "active" => "currently renting",
            "completed" => "completed rental of",
            "cancelled" => "cancelled rental of",
            "disputed" => "disputed rental of",
            _ => "activity with"
        };
        
        return $"You {action} {rental.ToolName ?? "a tool"}";
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;
        
        if (timeSpan.TotalDays >= 1)
            return $"{(int)timeSpan.TotalDays}d ago";
        if (timeSpan.TotalHours >= 1)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalMinutes >= 1)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        
        return "Just now";
    }

    private string GetCategoryIcon(string category)
    {
        return category.ToLower() switch
        {
            "power tools" => Icons.Material.Filled.ElectricBolt,
            "hand tools" => Icons.Material.Filled.Handyman,
            "garden tools" or "garden" => Icons.Material.Filled.Grass,
            "automotive" => Icons.Material.Filled.DirectionsCar,
            "construction" => Icons.Material.Filled.Construction,
            "home improvement" => Icons.Material.Filled.Home,
            "cleaning" => Icons.Material.Filled.CleaningServices,
            "workshop" => Icons.Material.Filled.Build,
            _ => Icons.Material.Filled.Category
        };
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}