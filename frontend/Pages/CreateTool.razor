@page "/tools/create"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@inject IToolService ToolService
@inject UserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IBreadcrumbService BreadcrumbService
@attribute [Authorize]

<PageTitle>Add Tool - NeighborTools</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <!-- Breadcrumb -->
    <BreadcrumbNavigation Items="@breadcrumbItems" />
    <MudPaper Elevation="8" Class="pa-8" Style="border-radius: 16px;">
        @if (isInitializing)
        {
            <div class="d-flex justify-center align-center" style="min-height: 200px;">
                <MudProgressCircular Size="Size.Large" Indeterminate="true" />
            </div>
        }
        else
        {
            <!-- Header -->
            <div class="d-flex flex-column align-center mb-6">
                <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Primary" Class="mb-4" Style="font-size: 4rem;" />
                <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">
                    Add Your Tool
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary" Align="Align.Center">
                    Share your tools with neighbors and start earning money today!
                </MudText>
            </div>

        <EditForm Model="createToolRequest" OnValidSubmit="HandleCreateTool">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="@(() => errorMessage = string.Empty)">
                    @errorMessage
                </MudAlert>
            }

            <MudTabs Elevation="4" Rounded="true" Color="Color.Primary">
                <!-- Basic Information Tab -->
                <MudTabPanel Text="Basic Info" Icon="@Icons.Material.Filled.Info">
                    <div class="pa-4">
                        <MudGrid>
                            <MudItem xs="12" md="8">
                                <MudTextField @bind-Value="createToolRequest.Name"
                                              Label="Tool Name"
                                              Variant="Variant.Outlined"
                                              FullWidth="true"
                                              Required="true"
                                              RequiredError="Tool name is required"
                                              Adornment="Adornment.Start"
                                              AdornmentIcon="@Icons.Material.Filled.Build"
                                              Class="mb-4" />

                                <MudTextField @bind-Value="createToolRequest.Description"
                                              Label="Description"
                                              Variant="Variant.Outlined"
                                              Lines="4"
                                              FullWidth="true"
                                              Required="true"
                                              RequiredError="Description is required"
                                              Adornment="Adornment.Start"
                                              AdornmentIcon="@Icons.Material.Filled.Description"
                                              Class="mb-4" />

                                <MudGrid>
                                    <MudItem xs="12" sm="6">
                                        <MudSelect @bind-Value="createToolRequest.Category" 
                                                   Label="Category" 
                                                   Variant="Variant.Outlined" 
                                                   Required="true"
                                                   RequiredError="Category is required"
                                                   AdornmentIcon="@Icons.Material.Filled.Category" 
                                                   Adornment="Adornment.Start">
                                            <MudSelectItem T="string" Value="@("Power Tools")">Power Tools</MudSelectItem>
                                            <MudSelectItem T="string" Value="@("Hand Tools")">Hand Tools</MudSelectItem>
                                            <MudSelectItem T="string" Value="@("Garden Tools")">Garden Tools</MudSelectItem>
                                            <MudSelectItem T="string" Value="@("Automotive")">Automotive</MudSelectItem>
                                            <MudSelectItem T="string" Value="@("Construction")">Construction</MudSelectItem>
                                            <MudSelectItem T="string" Value="@("Home Improvement")">Home Improvement</MudSelectItem>
                                            <MudSelectItem T="string" Value="@("Cleaning")">Cleaning</MudSelectItem>
                                            <MudSelectItem T="string" Value="@("Other")">Other</MudSelectItem>
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudSelect @bind-Value="createToolRequest.Condition" 
                                                   Label="Condition" 
                                                   Variant="Variant.Outlined" 
                                                   Required="true"
                                                   RequiredError="Condition is required"
                                                   AdornmentIcon="@Icons.Material.Filled.Assessment" 
                                                   Adornment="Adornment.Start">
                                            <MudSelectItem T="string" Value="@("Excellent")">Excellent</MudSelectItem>
                                            <MudSelectItem T="string" Value="@("Very Good")">Very Good</MudSelectItem>
                                            <MudSelectItem T="string" Value="@("Good")">Good</MudSelectItem>
                                            <MudSelectItem T="string" Value="@("Fair")">Fair</MudSelectItem>
                                            <MudSelectItem T="string" Value="@("Poor")">Poor</MudSelectItem>
                                        </MudSelect>
                                    </MudItem>
                                </MudGrid>
                            </MudItem>
                            
                            <MudItem xs="12" md="4">
                                <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px;">
                                    <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Primary">
                                        <MudIcon Icon="@Icons.Material.Filled.Lightbulb" Class="mr-2" />
                                        Tips for Success
                                    </MudText>
                                    <MudList T="string" Dense="true">
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Success">
                                            Use a clear, descriptive name
                                        </MudListItem>
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Success">
                                            Include detailed description
                                        </MudListItem>
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Success">
                                            Be honest about condition
                                        </MudListItem>
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Success">
                                            Add high-quality photos
                                        </MudListItem>
                                    </MudList>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    </div>
                </MudTabPanel>

                <!-- Details Tab -->
                <MudTabPanel Text="Details" Icon="@Icons.Material.Filled.Settings">
                    <div class="pa-4">
                        <MudGrid>
                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="createToolRequest.Brand"
                                              Label="Brand"
                                              Variant="Variant.Outlined"
                                              FullWidth="true"
                                              Adornment="Adornment.Start"
                                              AdornmentIcon="@Icons.Material.Filled.Business"
                                              Class="mb-4" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="createToolRequest.Model"
                                              Label="Model"
                                              Variant="Variant.Outlined"
                                              FullWidth="true"
                                              Adornment="Adornment.Start"
                                              AdornmentIcon="@Icons.Material.Filled.ModelTraining"
                                              Class="mb-4" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="createToolRequest.Location"
                                              Label="Location (Optional)"
                                              Variant="Variant.Outlined"
                                              FullWidth="true"
                                              Adornment="Adornment.Start"
                                              AdornmentIcon="@Icons.Material.Filled.LocationOn"
                                              HelperText="Location where the tool is available. Leave empty to use your public profile location."
                                              Class="mb-4" />
                                
                                @if (ShowLocationWarning)
                                {
                                    <MudAlert Severity="Severity.Warning" Icon="@Icons.Material.Filled.LocationOff" Class="mb-4">
                                        <strong>Location Warning:</strong> No location specified and your profile has no public location set. 
                                        This may prevent your tool from appearing in location-based searches and could reduce rental opportunities.
                                        <MudLink Href="/profile" Class="ml-2">Update your profile location</MudLink>
                                    </MudAlert>
                                }
                            </MudItem>
                        </MudGrid>
                    </div>
                </MudTabPanel>

                <!-- Pricing Tab -->
                <MudTabPanel Text="Pricing" Icon="@Icons.Material.Filled.AttachMoney">
                    <div class="pa-4">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Lightbulb" Class="mb-4">
                                    Set competitive prices to attract more renters. You can always adjust these later.
                                </MudAlert>
                            </MudItem>
                            
                            <MudItem xs="12" sm="4">
                                <MudNumericField @bind-Value="createToolRequest.DailyRate"
                                                 Label="Daily Rate"
                                                 Variant="Variant.Outlined"
                                                 FullWidth="true"
                                                 Required="true"
                                                 RequiredError="Daily rate is required"
                                                 Adornment="Adornment.Start"
                                                 AdornmentText="$"
                                                 Min="0.01m"
                                                 Step="0.01m"
                                                 Format="F2"
                                                 Class="mb-4" />
                            </MudItem>
                            
                            <MudItem xs="12" sm="4">
                                <MudNumericField @bind-Value="createToolRequest.WeeklyRate"
                                                 Label="Weekly Rate (Optional)"
                                                 Variant="Variant.Outlined"
                                                 FullWidth="true"
                                                 Adornment="Adornment.Start"
                                                 AdornmentText="$"
                                                 Min="0m"
                                                 Step="0.01m"
                                                 Format="F2"
                                                 Class="mb-4" />
                            </MudItem>
                            
                            <MudItem xs="12" sm="4">
                                <MudNumericField @bind-Value="createToolRequest.MonthlyRate"
                                                 Label="Monthly Rate (Optional)"
                                                 Variant="Variant.Outlined"
                                                 FullWidth="true"
                                                 Adornment="Adornment.Start"
                                                 AdornmentText="$"
                                                 Min="0m"
                                                 Step="0.01m"
                                                 Format="F2"
                                                 Class="mb-4" />
                            </MudItem>
                            
                            <MudItem xs="12" sm="6">
                                <MudNumericField @bind-Value="createToolRequest.DepositRequired"
                                                 Label="Security Deposit"
                                                 Variant="Variant.Outlined"
                                                 FullWidth="true"
                                                 Required="true"
                                                 RequiredError="Deposit amount is required"
                                                 Adornment="Adornment.Start"
                                                 AdornmentText="$"
                                                 Min="0m"
                                                 Step="0.01m"
                                                 Format="F2"
                                                 HelperText="Refundable deposit to cover potential damages"
                                                 Class="mb-4" />
                            </MudItem>
                            
                            <MudItem xs="12" sm="6">
                                <MudNumericField @bind-Value="createToolRequest.LeadTimeHours"
                                                 Label="Lead Time Hours (Optional)"
                                                 Variant="Variant.Outlined"
                                                 FullWidth="true"
                                                 Adornment="Adornment.Start"
                                                 AdornmentText="hrs"
                                                 Min="0"
                                                 Step="1"
                                                 HelperText="Minimum hours advance notice required for bookings (leave empty to use your default setting)"
                                                 Class="mb-4" />
                            </MudItem>
                        </MudGrid>
                    </div>
                </MudTabPanel>

                <!-- Images Tab -->
                <MudTabPanel Text="Photos" Icon="@Icons.Material.Filled.PhotoCamera">
                    <div class="pa-4">
                        <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.PhotoCamera" Class="mb-4">
                            High-quality photos increase your rental chances by up to 80%! Add up to 5 photos.
                        </MudAlert>
                        
                        <!-- Image Upload Area -->
                        @if (previewUrls.Count < 5)
                        {
                            <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".jpg,.jpeg,.png,.gif,.webp" Multiple="true" MaximumFileCount="5" OnFilesChanged="@(async args => await OnImagesSelected(args.GetMultipleFiles()))">
                                <ActivatorContent>
                                    <MudPaper Class="pa-8 text-center mb-4" Elevation="2" Style="border: 2px dashed var(--mud-palette-primary); border-radius: 12px;">
                                        <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Size="Size.Large" Color="Color.Primary" Class="mb-2" />
                                        <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-2">Add Photos</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                                            Drag and drop images here, or click to browse<br />
                                            <small>Images will be uploaded when you create the tool</small>
                                        </MudText>
                                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" Disabled="isUploadingImages">
                                            @if (isUploadingImages)
                                            {
                                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                                <MudText Class="ml-2">Processing...</MudText>
                                            }
                                            else
                                            {
                                                <MudText>Choose Files (@previewUrls.Count/5)</MudText>
                                            }
                                        </MudButton>
                                    </MudPaper>
                                </ActivatorContent>
                            </MudFileUpload>
                        }
                        
                        <!-- Image Preview Area -->
                        <div class="d-flex flex-wrap gap-4">
                            @for (int i = 0; i < Math.Min(5, previewUrls.Count); i++)
                            {
                                var imageUrl = previewUrls[i];
                                var imageIndex = i;
                                <MudPaper Class="pa-2" Style="width: 150px; height: 150px; border-radius: 12px; position: relative;">
                                    <img src="@imageUrl" alt="Tool photo @(i + 1)" style="width: 100%; height: 130px; object-fit: cover; border-radius: 8px;" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Close"
                                                   Size="Size.Small"
                                                   Color="Color.Error"
                                                   Variant="Variant.Filled"
                                                   Style="position: absolute; top: 8px; right: 8px; padding: 4px;"
                                                   OnClick="@(() => RemoveImage(imageIndex))" />
                                    <MudChip Size="Size.Small" 
                                             Color="Color.Warning" 
                                             Style="position: absolute; bottom: 4px; left: 4px; font-size: 0.6rem;"
                                             Text="Preview" 
                                             T="string" />
                                </MudPaper>
                            }
                            
                            @for (int i = previewUrls.Count; i < 5; i++)
                            {
                                <MudPaper Class="pa-4 text-center" Style="width: 150px; height: 150px; border-radius: 12px; border: 2px dashed var(--mud-palette-surface-variant);">
                                    <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Secondary" Size="Size.Large" />
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Photo @(i + 1)</MudText>
                                </MudPaper>
                            }
                        </div>
                    </div>
                </MudTabPanel>
            </MudTabs>

            <!-- Action Buttons -->
            <div class="d-flex justify-end gap-4 mt-6">
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Secondary" 
                           Size="Size.Large"
                           OnClick="Cancel"
                           StartIcon="@Icons.Material.Filled.Cancel">
                    Cancel
                </MudButton>
                
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           Disabled="isLoading"
                           StartIcon="@(isLoading ? null : Icons.Material.Filled.Save)">
                    @if (isLoading)
                    {
                        <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                        @if (isUploadingImages)
                        {
                            <MudText Class="ml-2">Uploading Images...</MudText>
                        }
                        else
                        {
                            <MudText Class="ml-2">Creating Tool...</MudText>
                        }
                    }
                    else
                    {
                        <MudText>Create Tool @(pendingFiles.Any() ? $"& Upload {pendingFiles.Count} Images" : "")</MudText>
                    }
                </MudButton>
            </div>
        </EditForm>
        }
    </MudPaper>
</MudContainer>

@code {
    private CreateToolRequest createToolRequest = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private bool isInitializing = true;
    private bool isUploadingImages = false;
    private string? userLocationDisplay = null;
    
    // For delayed upload pattern
    private List<IBrowserFile> pendingFiles = new();
    private List<string> previewUrls = new();
    private List<frontend.Models.BreadcrumbItem> breadcrumbItems = new();
    
    // Show warning when both tool location and user public location are empty
    private bool ShowLocationWarning => string.IsNullOrEmpty(createToolRequest.Location) && string.IsNullOrEmpty(userLocationDisplay);

    protected override async Task OnInitializedAsync()
    {
        SetupBreadcrumbs();
        await LoadUserLocation();
        isInitializing = false;
        StateHasChanged();
    }

    private async Task LoadUserLocation()
    {
        try
        {
            var response = await UserService.GetProfileAsync();
            if (response?.Success == true && response.Data != null)
            {
                // Store user's location display for warning logic
                userLocationDisplay = response.Data.LocationDisplay;
                
                // Set default location from user's location display
                if (!string.IsNullOrEmpty(response.Data.LocationDisplay))
                {
                    createToolRequest.Location = response.Data.LocationDisplay;
                }
            }
        }
        catch (Exception ex)
        {
            // Don't show error for location loading failure, just continue with empty location
        }
    }

    private async Task HandleCreateTool()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            // First upload images if there are any pending files
            if (pendingFiles.Any())
            {
                isUploadingImages = true;
                StateHasChanged();
                
                var uploadResponse = await ToolService.UploadImagesAsync(pendingFiles);
                
                if (!uploadResponse.Success)
                {
                    var uploadError = uploadResponse.Message ?? "Failed to upload images";
                    if (uploadResponse.Errors?.Any() == true)
                    {
                        uploadError += ": " + string.Join(", ", uploadResponse.Errors);
                    }
                    errorMessage = uploadError;
                    return;
                }
                
                // Use uploaded URLs
                createToolRequest.ImageUrls = uploadResponse.Data ?? new List<string>();
                isUploadingImages = false;
                StateHasChanged();
            }

            // Then create the tool with uploaded image URLs
            var response = await ToolService.CreateToolAsync(createToolRequest);
            
            if (response.Success && response.Data != null)
            {
                Snackbar.Add("Tool created successfully! It will be available for rent once approved.", Severity.Success);
                Navigation.NavigateTo("/my-tools");
            }
            else
            {
                errorMessage = response.Message ?? "Failed to create tool. Please try again.";
                if (response.Errors?.Any() == true)
                {
                    errorMessage += "\n" + string.Join("\n", response.Errors);
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            isUploadingImages = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/my-tools");
    }

    private async Task OnImagesSelected(IReadOnlyList<IBrowserFile> files)
    {
        if (files == null || !files.Any()) return;

        isUploadingImages = true;
        StateHasChanged();

        try
        {
            var filesToProcess = files.Take(5 - previewUrls.Count).ToList();
            
            // Validate files before processing
            foreach (var file in filesToProcess)
            {
                if (file.Size > 5 * 1024 * 1024) // 5MB limit
                {
                    Snackbar.Add($"File {file.Name} is too large. Maximum size is 5MB.", Severity.Warning);
                    return;
                }
                
                // Validate file type
                var extension = Path.GetExtension(file.Name).ToLowerInvariant();
                var allowedTypes = new[] { ".jpg", ".jpeg", ".png", ".gif", ".webp" };
                if (!allowedTypes.Contains(extension))
                {
                    Snackbar.Add($"Invalid file type: {file.Name}. Only JPG, JPEG, PNG, GIF, and WebP files are allowed.", Severity.Warning);
                    return;
                }
            }

            // Create Base64 previews and store files for delayed upload
            foreach (var file in filesToProcess)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(5 * 1024 * 1024).ReadAsync(buffer);
                var dataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
                
                previewUrls.Add(dataUrl);
                pendingFiles.Add(file);
            }

            Snackbar.Add($"Added {filesToProcess.Count} image(s) for preview. They will be uploaded when you create the tool.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to process images: {ex.Message}", Severity.Error);
        }
        finally
        {
            isUploadingImages = false;
            StateHasChanged();
        }
    }

    private void RemoveImage(int index)
    {
        if (index >= 0 && index < previewUrls.Count)
        {
            previewUrls.RemoveAt(index);
            pendingFiles.RemoveAt(index);
            StateHasChanged();
        }
    }

    private void SetupBreadcrumbs()
    {
        breadcrumbItems = BreadcrumbService.GenerateToolsBreadcrumb(
            page: BreadcrumbPage.Create);
    }
}