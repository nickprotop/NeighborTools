@page "/tools/edit/{id}"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@inject IToolService ToolService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject INavigationHelperService NavigationHelper
@inject IDialogService DialogService
@inject IUrlService UrlService
@inject IBreadcrumbService BreadcrumbService
@attribute [Authorize]

<PageTitle>Edit Tool - NeighborTools</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <!-- Breadcrumb -->
    <BreadcrumbNavigation Items="@breadcrumbItems" />
    
    <MudPaper Elevation="8" Class="pa-8" Style="border-radius: 16px;">
        @if (isLoading)
        {
            <div class="d-flex flex-column align-center justify-center" style="min-height: 300px;">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                <MudText Typo="Typo.h6" Class="mt-4">Loading tool details...</MudText>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="@(() => errorMessage = string.Empty)">
                @errorMessage
            </MudAlert>
        }
        else
        {
            <!-- Header -->
            <div class="d-flex flex-column align-center mb-6">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Large" Color="Color.Primary" Class="mb-4" Style="font-size: 4rem;" />
                <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">
                    Edit Tool
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary" Align="Align.Center">
                    Update your tool details to keep your listing current and attractive!
                </MudText>
            </div>

            <!-- Approval Status Alert -->
            @if (currentTool != null && !currentTool.IsApproved && currentTool.HasPendingApproval)
            {
                <MudAlert Severity="Severity.Info" Class="mb-4" Variant="Variant.Filled">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.HourglassEmpty" Class="me-3" />
                        <div>
                            <MudText Typo="Typo.h6" Class="mb-1">Pending Approval</MudText>
                            <MudText Typo="Typo.body2">
                                Your tool is currently being reviewed by our team. We'll notify you once it's approved.
                            </MudText>
                        </div>
                    </div>
                </MudAlert>
            }
            else if (currentTool != null && !currentTool.IsApproved && !currentTool.HasPendingApproval)
            {
                <MudAlert Severity="Severity.Error" Class="mb-4" Variant="Variant.Filled">
                    <div class="d-flex align-center justify-space-between">
                        <div>
                            <MudText Typo="Typo.h6" Class="mb-2">
                                <MudIcon Icon="@Icons.Material.Filled.Warning" Class="me-2" />
                                Tool Rejected
                            </MudText>
                            @if (!string.IsNullOrEmpty(currentTool.RejectionReason))
                            {
                                <MudText Typo="Typo.body2" Class="mb-3">
                                    <strong>Reason:</strong> @currentTool.RejectionReason
                                </MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Class="mb-3">
                                    This tool was rejected during review and needs to be updated before resubmission.
                                </MudText>
                            }
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                Please address the issues and request approval again.
                            </MudText>
                        </div>
                        <div>
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Warning" 
                                       StartIcon="@Icons.Material.Filled.Refresh"
                                       OnClick="ShowRequestApprovalDialog"
                                       Disabled="isSubmitting"
                                       Size="Size.Small">
                                Request Re-approval
                            </MudButton>
                        </div>
                    </div>
                </MudAlert>
            }

            <EditForm Model="updateToolRequest" OnValidSubmit="HandleUpdateTool">
                <DataAnnotationsValidator />

                @if (!string.IsNullOrEmpty(submitErrorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="@(() => submitErrorMessage = string.Empty)">
                        @submitErrorMessage
                    </MudAlert>
                }

                <MudTabs Elevation="4" Rounded="true" Color="Color.Primary">
                    <!-- Basic Information Tab -->
                    <MudTabPanel Text="Basic Info" Icon="@Icons.Material.Filled.Info">
                        <div class="pa-4">
                            <MudGrid>
                                <MudItem xs="12" md="8">
                                    <MudTextField @bind-Value="updateToolRequest.Name"
                                                  Label="Tool Name"
                                                  Variant="Variant.Outlined"
                                                  FullWidth="true"
                                                  Required="true"
                                                  RequiredError="Tool name is required"
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.Build"
                                                  Class="mb-4" />

                                    <MudTextField @bind-Value="updateToolRequest.Description"
                                                  Label="Description"
                                                  Variant="Variant.Outlined"
                                                  Lines="4"
                                                  FullWidth="true"
                                                  Required="true"
                                                  RequiredError="Description is required"
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.Description"
                                                  Class="mb-4" />

                                    <MudGrid>
                                        <MudItem xs="12" sm="6">
                                            <MudSelect @bind-Value="updateToolRequest.Category" 
                                                       Label="Category" 
                                                       Variant="Variant.Outlined" 
                                                       Required="true"
                                                       RequiredError="Category is required"
                                                       AdornmentIcon="@Icons.Material.Filled.Category" 
                                                       Adornment="Adornment.Start">
                                                <MudSelectItem T="string" Value="@("Power Tools")">Power Tools</MudSelectItem>
                                                <MudSelectItem T="string" Value="@("Hand Tools")">Hand Tools</MudSelectItem>
                                                <MudSelectItem T="string" Value="@("Garden Tools")">Garden Tools</MudSelectItem>
                                                <MudSelectItem T="string" Value="@("Automotive")">Automotive</MudSelectItem>
                                                <MudSelectItem T="string" Value="@("Construction")">Construction</MudSelectItem>
                                                <MudSelectItem T="string" Value="@("Home Improvement")">Home Improvement</MudSelectItem>
                                                <MudSelectItem T="string" Value="@("Cleaning")">Cleaning</MudSelectItem>
                                                <MudSelectItem T="string" Value="@("Other")">Other</MudSelectItem>
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="12" sm="6">
                                            <MudSelect @bind-Value="updateToolRequest.Condition" 
                                                       Label="Condition" 
                                                       Variant="Variant.Outlined" 
                                                       Required="true"
                                                       AdornmentIcon="@Icons.Material.Filled.Assessment" 
                                                       Adornment="Adornment.Start"
                                                       RequiredError="Condition is required">
                                                <MudSelectItem T="string" Value="@("Excellent")">Excellent</MudSelectItem>
                                                <MudSelectItem T="string" Value="@("Very Good")">Very Good</MudSelectItem>
                                                <MudSelectItem T="string" Value="@("Good")">Good</MudSelectItem>
                                                <MudSelectItem T="string" Value="@("Fair")">Fair</MudSelectItem>
                                                <MudSelectItem T="string" Value="@("Poor")">Poor</MudSelectItem>
                                            </MudSelect>
                                        </MudItem>
                                    </MudGrid>
                                </MudItem>
                                
                                <MudItem xs="12" md="4">
                                    <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px;">
                                        <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Primary">
                                            <MudIcon Icon="@Icons.Material.Filled.Lightbulb" Class="mr-2" />
                                            Edit Tips
                                        </MudText>
                                        <MudList T="string" Dense="true">
                                            <MudListItem T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Success">
                                                Keep information current
                                            </MudListItem>
                                            <MudListItem T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Success">
                                                Update condition honestly
                                            </MudListItem>
                                            <MudListItem T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Success">
                                                Adjust pricing as needed
                                            </MudListItem>
                                            <MudListItem T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Success">
                                                Add new photos if helpful
                                            </MudListItem>
                                        </MudList>
                                    </MudPaper>
                                </MudItem>
                            </MudGrid>
                        </div>
                    </MudTabPanel>

                    <!-- Details Tab -->
                    <MudTabPanel Text="Details" Icon="@Icons.Material.Filled.Settings">
                        <div class="pa-4">
                            <MudGrid>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="updateToolRequest.Brand"
                                                  Label="Brand"
                                                  Variant="Variant.Outlined"
                                                  FullWidth="true"
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.Business"
                                                  Class="mb-4" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="updateToolRequest.Model"
                                                  Label="Model"
                                                  Variant="Variant.Outlined"
                                                  FullWidth="true"
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.ModelTraining"
                                                  Class="mb-4" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField @bind-Value="updateToolRequest.Location"
                                                  Label="Location"
                                                  Variant="Variant.Outlined"
                                                  FullWidth="true"
                                                  Required="true"
                                                  RequiredError="Location is required"
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.LocationOn"
                                                  HelperText="Location where the tool is available (can be updated from your public profile location)"
                                                  Class="mb-4" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudSwitch @bind-Value="updateToolRequest.IsAvailable"
                                               Label="Available for Rent"
                                               Color="Color.Success"
                                               UnCheckedColor="Color.Error"
                                               ThumbIcon="@(updateToolRequest.IsAvailable ? Icons.Material.Filled.Check : Icons.Material.Filled.Close)"
                                               Class="mb-4" />
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        Toggle this to make your tool available or unavailable for rent
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </div>
                    </MudTabPanel>

                    <!-- Pricing Tab -->
                    <MudTabPanel Text="Pricing" Icon="@Icons.Material.Filled.AttachMoney">
                        <div class="pa-4">
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Lightbulb" Class="mb-4">
                                        Adjust your pricing to stay competitive. Consider recent market trends and tool condition.
                                    </MudAlert>
                                </MudItem>
                                
                                <MudItem xs="12" sm="4">
                                    <MudNumericField @bind-Value="updateToolRequest.DailyRate"
                                                     Label="Daily Rate"
                                                     Variant="Variant.Outlined"
                                                     FullWidth="true"
                                                     Required="true"
                                                     RequiredError="Daily rate is required"
                                                     Adornment="Adornment.Start"
                                                     AdornmentText="$"
                                                     Min="0.01m"
                                                     Step="0.01m"
                                                     Format="F2"
                                                     Class="mb-4" />
                                </MudItem>
                                
                                <MudItem xs="12" sm="4">
                                    <MudNumericField @bind-Value="updateToolRequest.WeeklyRate"
                                                     Label="Weekly Rate (Optional)"
                                                     Variant="Variant.Outlined"
                                                     FullWidth="true"
                                                     Adornment="Adornment.Start"
                                                     AdornmentText="$"
                                                     Min="0m"
                                                     Step="0.01m"
                                                     Format="F2"
                                                     Class="mb-4" />
                                </MudItem>
                                
                                <MudItem xs="12" sm="4">
                                    <MudNumericField @bind-Value="updateToolRequest.MonthlyRate"
                                                     Label="Monthly Rate (Optional)"
                                                     Variant="Variant.Outlined"
                                                     FullWidth="true"
                                                     Adornment="Adornment.Start"
                                                     AdornmentText="$"
                                                     Min="0m"
                                                     Step="0.01m"
                                                     Format="F2"
                                                     Class="mb-4" />
                                </MudItem>
                                
                                <MudItem xs="12" sm="6">
                                    <MudNumericField @bind-Value="updateToolRequest.DepositRequired"
                                                     Label="Security Deposit"
                                                     Variant="Variant.Outlined"
                                                     FullWidth="true"
                                                     Required="true"
                                                     RequiredError="Deposit amount is required"
                                                     Adornment="Adornment.Start"
                                                     AdornmentText="$"
                                                     Min="0m"
                                                     Step="0.01m"
                                                     Format="F2"
                                                     HelperText="Refundable deposit to cover potential damages"
                                                     Class="mb-4" />
                                </MudItem>
                                
                                <MudItem xs="12" sm="6">
                                    <MudNumericField @bind-Value="updateToolRequest.LeadTimeHours"
                                                     Label="Lead Time Hours (Optional)"
                                                     Variant="Variant.Outlined"
                                                     FullWidth="true"
                                                     Adornment="Adornment.Start"
                                                     AdornmentText="hrs"
                                                     Min="0"
                                                     Step="1"
                                                     HelperText="Minimum hours advance notice required for bookings (leave empty to use your default setting)"
                                                     Class="mb-4" />
                                </MudItem>
                            </MudGrid>
                        </div>
                    </MudTabPanel>

                    <!-- Images Tab -->
                    <MudTabPanel Text="Photos" Icon="@Icons.Material.Filled.PhotoCamera">
                        <div class="pa-4">
                            <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.PhotoCamera" Class="mb-4">
                                Update your photos to show the current condition of your tool. Fresh photos can increase rental requests!
                            </MudAlert>
                            
                            <!-- Current Images -->
                            
                            <!-- Image Upload Area -->
                            @{
                                var totalImages = existingImageUrls.Count + previewUrls.Count;
                            }
                            @if (totalImages < 5)
                            {
                                <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".jpg,.jpeg,.png,.gif,.webp" Multiple="true" MaximumFileCount="5" OnFilesChanged="@(async args => await OnImagesSelected(args.GetMultipleFiles()))">
                                    <ActivatorContent>
                                        <MudPaper Class="pa-8 text-center mb-4" Elevation="2" Style="border: 2px dashed var(--mud-palette-primary); border-radius: 12px;">
                                            <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Size="Size.Large" Color="Color.Primary" Class="mb-2" />
                                            <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-2">Add More Photos</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                                                Drag and drop images here, or click to browse<br />
                                                <small>New images will be uploaded when you save changes</small>
                                            </MudText>
                                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" Disabled="isUploadingImages">
                                                @if (isUploadingImages)
                                                {
                                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                                    <MudText Class="ml-2">Processing...</MudText>
                                                }
                                                else
                                                {
                                                    <MudText>Choose Files (@totalImages/5)</MudText>
                                                }
                                            </MudButton>
                                        </MudPaper>
                                    </ActivatorContent>
                                </MudFileUpload>
                            }
                            
                            <!-- Image Preview Area -->
                            <div class="d-flex flex-wrap gap-4">
                                <!-- Existing Images -->
                                @for (int i = 0; i < existingImageUrls.Count; i++)
                                {
                                    var imageUrl = existingImageUrls[i];
                                    var imageIndex = i;
                                    <MudPaper Class="pa-2" Style="width: 150px; height: 150px; border-radius: 12px; position: relative;">
                                        <img src="@UrlService.GetFileUrl(imageUrl)" alt="Tool photo @(i + 1)" style="width: 100%; height: 130px; object-fit: cover; border-radius: 8px;" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Close"
                                                       Size="Size.Small"
                                                       Color="Color.Error"
                                                       Variant="Variant.Filled"
                                                       Style="position: absolute; top: 8px; right: 8px; padding: 4px;"
                                                       OnClick="@(() => RemoveImage(imageIndex, true))" />
                                        <MudChip Size="Size.Small" 
                                                 Color="Color.Success" 
                                                 Style="position: absolute; bottom: 4px; left: 4px; font-size: 0.6rem;"
                                                 Text="Current" 
                                                 T="string" />
                                    </MudPaper>
                                }
                                
                                <!-- Preview Images (New) -->
                                @for (int i = 0; i < previewUrls.Count; i++)
                                {
                                    var imageUrl = previewUrls[i];
                                    var totalIndex = existingImageUrls.Count + i;
                                    <MudPaper Class="pa-2" Style="width: 150px; height: 150px; border-radius: 12px; position: relative;">
                                        <img src="@imageUrl" alt="New tool photo @(totalIndex + 1)" style="width: 100%; height: 130px; object-fit: cover; border-radius: 8px;" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Close"
                                                       Size="Size.Small"
                                                       Color="Color.Error"
                                                       Variant="Variant.Filled"
                                                       Style="position: absolute; top: 8px; right: 8px; padding: 4px;"
                                                       OnClick="@(() => RemoveImage(totalIndex, false))" />
                                        <MudChip Size="Size.Small" 
                                                 Color="Color.Warning" 
                                                 Style="position: absolute; bottom: 4px; left: 4px; font-size: 0.6rem;"
                                                 Text="Preview" 
                                                 T="string" />
                                    </MudPaper>
                                }
                                
                                <!-- Empty Slots -->
                                @for (int i = totalImages; i < 5; i++)
                                {
                                    <MudPaper Class="pa-4 text-center" Style="width: 150px; height: 150px; border-radius: 12px; border: 2px dashed var(--mud-palette-surface-variant);">
                                        <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Secondary" Size="Size.Large" />
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">Photo @(i + 1)</MudText>
                                    </MudPaper>
                                }
                            </div>
                        </div>
                    </MudTabPanel>
                </MudTabs>

                <!-- Action Buttons -->
                <div class="d-flex justify-space-between align-center mt-6">
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Secondary" 
                               Size="Size.Large"
                               OnClick="Cancel"
                               StartIcon="@Icons.Material.Filled.Cancel">
                        Cancel
                    </MudButton>
                    
                    <div class="d-flex gap-3">
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Warning" 
                                   Size="Size.Large"
                                   OnClick="ViewTool"
                                   StartIcon="@Icons.Material.Filled.Visibility">
                            View Tool
                        </MudButton>

                        <MudButton ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Large"
                                   Disabled="isSubmitting"
                                   StartIcon="@(isSubmitting ? null : Icons.Material.Filled.Save)">
                            @if (isSubmitting)
                            {
                                <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ml-2">Updating Tool...</MudText>
                            }
                            else
                            {
                                <MudText>Update Tool</MudText>
                            }
                        </MudButton>
                    </div>
                </div>
            </EditForm>
        }
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public string Id { get; set; } = string.Empty;
    
    private UpdateToolRequest updateToolRequest = new();
    private Tool? currentTool = null;
    private string errorMessage = string.Empty;
    private string submitErrorMessage = string.Empty;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool isUploadingImages = false;
    
    // For delayed upload pattern
    private List<IBrowserFile> pendingFiles = new();
    private List<string> previewUrls = new();
    private List<string> existingImageUrls = new(); // Track existing images separately
    private List<frontend.Models.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadToolForEdit();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            await LoadToolForEdit();
        }
    }

    private async Task LoadToolForEdit()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await ToolService.GetToolAsync(Id);
            
            if (result.Success && result.Data != null)
            {
                var tool = result.Data;
                currentTool = tool;
                
                // Map tool data to update request
                updateToolRequest = new UpdateToolRequest
                {
                    Name = tool.Name ?? string.Empty,
                    Description = tool.Description ?? string.Empty,
                    Category = tool.Category ?? string.Empty,
                    Brand = tool.Brand ?? string.Empty,
                    Model = tool.Model ?? string.Empty,
                    DailyRate = tool.DailyRate,
                    WeeklyRate = tool.WeeklyRate,
                    MonthlyRate = tool.MonthlyRate,
                    DepositRequired = tool.DepositRequired,
                    Condition = tool.Condition ?? string.Empty,
                    Location = tool.Location ?? string.Empty,
                    IsAvailable = tool.IsAvailable,
                    LeadTimeHours = tool.LeadTimeHours,
                    ImageUrls = tool.ImageUrls?.ToList() ?? new List<string>()
                };
                
                // Initialize existing images for display
                existingImageUrls = tool.ImageUrls?.ToList() ?? new List<string>();
                
                // Setup breadcrumbs
                SetupBreadcrumbs();
            }
            else
            {
                errorMessage = result.Message ?? "Tool not found or you don't have permission to edit it.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading the tool: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleUpdateTool()
    {
        isSubmitting = true;
        submitErrorMessage = string.Empty;

        try
        {
            // Upload new images if any pending files exist
            if (pendingFiles.Any())
            {
                isUploadingImages = true;
                StateHasChanged();
                
                var uploadResponse = await ToolService.UploadImagesAsync(pendingFiles);
                
                if (!uploadResponse.Success)
                {
                    var uploadError = uploadResponse.Message ?? "Failed to upload images";
                    if (uploadResponse.Errors?.Any() == true)
                    {
                        uploadError += ": " + string.Join(", ", uploadResponse.Errors);
                    }
                    submitErrorMessage = uploadError;
                    return;
                }
                
                // Combine existing images with newly uploaded ones
                var newImageUrls = uploadResponse.Data ?? new List<string>();
                updateToolRequest.ImageUrls = existingImageUrls.Concat(newImageUrls).ToList();
                
                isUploadingImages = false;
                StateHasChanged();
            }
            else
            {
                // No new images, just use existing ones
                updateToolRequest.ImageUrls = existingImageUrls;
            }

            // Update the tool with the combined image URLs
            var result = await ToolService.UpdateToolAsync(Id, updateToolRequest);
            
            if (result.Success)
            {
                Snackbar.Add("Tool updated successfully!", Severity.Success);
                await NavigationHelper.NavigateBack("/my-tools");
            }
            else
            {
                submitErrorMessage = result.Message ?? "Failed to update tool.";
            }
        }
        catch (Exception ex)
        {
            submitErrorMessage = $"An error occurred while updating the tool: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            isUploadingImages = false;
        }
    }

    private async Task Cancel()
    {
        await NavigationHelper.NavigateBack("/my-tools");
    }

    private void ViewTool()
    {
        Navigation.NavigateTo($"/tools/{Id}");
    }

    private async Task OnImagesSelected(IReadOnlyList<IBrowserFile> files)
    {
        if (files == null || !files.Any()) return;

        isUploadingImages = true;
        StateHasChanged();

        try
        {
            var totalCurrentImages = existingImageUrls.Count + previewUrls.Count;
            var filesToProcess = files.Take(5 - totalCurrentImages).ToList();
            
            // Validate files before processing
            foreach (var file in filesToProcess)
            {
                if (file.Size > 5 * 1024 * 1024) // 5MB limit
                {
                    Snackbar.Add($"File {file.Name} is too large. Maximum size is 5MB.", Severity.Warning);
                    return;
                }
                
                // Validate file type
                var extension = Path.GetExtension(file.Name).ToLowerInvariant();
                var allowedTypes = new[] { ".jpg", ".jpeg", ".png", ".gif", ".webp" };
                if (!allowedTypes.Contains(extension))
                {
                    Snackbar.Add($"Invalid file type: {file.Name}. Only JPG, JPEG, PNG, GIF, and WebP files are allowed.", Severity.Warning);
                    return;
                }
            }

            // Create Base64 previews and store files for delayed upload
            foreach (var file in filesToProcess)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(5 * 1024 * 1024).ReadAsync(buffer);
                var dataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
                
                previewUrls.Add(dataUrl);
                pendingFiles.Add(file);
            }

            Snackbar.Add($"Added {filesToProcess.Count} image(s) for preview. They will be uploaded when you save the tool.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to upload images: {ex.Message}", Severity.Error);
        }
        finally
        {
            isUploadingImages = false;
            StateHasChanged();
        }
    }

    private void RemoveImage(int index, bool isExisting)
    {
        if (isExisting)
        {
            // Remove from existing images
            if (index >= 0 && index < existingImageUrls.Count)
            {
                existingImageUrls.RemoveAt(index);
                StateHasChanged();
            }
        }
        else
        {
            // Remove from preview images (adjust index for previews)
            var previewIndex = index - existingImageUrls.Count;
            if (previewIndex >= 0 && previewIndex < previewUrls.Count)
            {
                previewUrls.RemoveAt(previewIndex);
                pendingFiles.RemoveAt(previewIndex);
                StateHasChanged();
            }
        }
    }

    private async Task ShowRequestApprovalDialog()
    {
        if (currentTool == null) return;

        var parameters = new DialogParameters
        {
            { "Title", "Request Tool Approval" },
            { "Message", "Would you like to provide any additional information with your approval request?" },
            { "InputLabel", "Additional Message (Optional)" },
            { "ConfirmText", "Request Approval" },
            { "CancelText", "Cancel" },
            { "ConfirmColor", Color.Primary },
            { "ShowInput", true },
            { "MaxLength", 500 }
        };

        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true, 
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = DialogService.Show<InputConfirmationDialog>("Request Approval", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string message)
        {
            await RequestApproval(message);
        }
    }

    private async Task RequestApproval(string message)
    {
        if (currentTool == null) return;

        isSubmitting = true;
        StateHasChanged();

        try
        {
            var request = new RequestApprovalRequest { Message = message };
            var result = await ToolService.RequestApprovalAsync(currentTool.Id, request);

            if (result.Success)
            {
                Snackbar.Add("Approval request submitted successfully! We'll review your tool and notify you soon.", Severity.Success);
                
                // Update the tool status to pending
                currentTool.HasPendingApproval = true;
                currentTool.RejectionReason = null;
                StateHasChanged();
            }
            else
            {
                Snackbar.Add($"Failed to request approval: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error requesting approval: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void SetupBreadcrumbs()
    {
        if (currentTool != null)
        {
            breadcrumbItems = BreadcrumbService.GenerateToolsBreadcrumb(
                toolName: currentTool.Name,
                category: currentTool.Category,
                page: BreadcrumbPage.Edit,
                toolId: Id);
        }
    }
}