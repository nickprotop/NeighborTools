@page "/settings"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject SettingsService SettingsService
@inject ISessionTimeoutService SessionTimeoutService
@attribute [Authorize]

<PageTitle>Settings - NeighborTools</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (isPageLoading)
    {
        <div class="d-flex justify-center align-center" style="min-height: 400px;">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
        </div>
    }
    else if (settings == null)
    {
        <MudAlert Severity="Severity.Error">
            Failed to load settings. Please try refreshing the page.
        </MudAlert>
    }
    else
    {
        <!-- Header -->
        <div class="mb-6">
            <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">
                <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-2" />
                Settings
            </MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                Manage your account preferences and privacy settings
            </MudText>
        </div>

        <MudTabs Elevation="4" Rounded="true" Color="Color.Primary">
            <!-- Account Settings Tab -->
            <MudTabPanel Text="Account" Icon="@Icons.Material.Filled.AccountCircle">
                <div class="pa-6">
                    <MudGrid>
                        <MudItem xs="12" md="8">
                            <!-- Password Change Section -->
                            <MudPaper Class="pa-4 mb-6" Elevation="2" Style="border-radius: 12px;">
                                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">
                                    <MudIcon Icon="@Icons.Material.Filled.Lock" Class="mr-2" />
                                    Change Password
                                </MudText>
                                
                                <EditForm Model="passwordForm" OnValidSubmit="ChangePassword">
                                    <DataAnnotationsValidator />
                                    <MudGrid>
                                        <MudItem xs="12">
                                            <MudTextField @bind-Value="passwordForm.CurrentPassword"
                                                          Label="Current Password"
                                                          Variant="Variant.Outlined"
                                                          InputType="InputType.Password"
                                                          FullWidth
                                                          Required="true"
                                                          For="@(() => passwordForm.CurrentPassword)"
                                                          Adornment="Adornment.Start"
                                                          AdornmentIcon="@Icons.Material.Filled.Lock" />
                                        </MudItem>
                                        <MudItem xs="12" sm="6">
                                            <MudTextField @bind-Value="passwordForm.NewPassword"
                                                          Label="New Password"
                                                          Variant="Variant.Outlined"
                                                          InputType="InputType.Password"
                                                          FullWidth
                                                          Required="true"
                                                          For="@(() => passwordForm.NewPassword)"
                                                          Adornment="Adornment.Start"
                                                          AdornmentIcon="@Icons.Material.Filled.VpnKey" />
                                        </MudItem>
                                        <MudItem xs="12" sm="6">
                                            <MudTextField @bind-Value="passwordForm.ConfirmPassword"
                                                          Label="Confirm New Password"
                                                          Variant="Variant.Outlined"
                                                          InputType="InputType.Password"
                                                          FullWidth
                                                          Required="true"
                                                          For="@(() => passwordForm.ConfirmPassword)"
                                                          Adornment="Adornment.Start"
                                                          AdornmentIcon="@Icons.Material.Filled.VpnKey" />
                                        </MudItem>
                                        <MudItem xs="12">
                                            <MudButton ButtonType="ButtonType.Submit" 
                                                       Variant="Variant.Filled" 
                                                       Color="Color.Primary" 
                                                       Disabled="isPasswordChanging"
                                                       StartIcon="@(isPasswordChanging ? null : Icons.Material.Filled.Save)">
                                                @if (isPasswordChanging)
                                                {
                                                    <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                                                    <MudText Class="ml-2">Changing Password...</MudText>
                                                }
                                                else
                                                {
                                                    <MudText>Change Password</MudText>
                                                }
                                            </MudButton>
                                        </MudItem>
                                    </MudGrid>
                                </EditForm>
                            </MudPaper>

                            <!-- Security Settings -->
                            <MudPaper Class="pa-4 mb-6" Elevation="2" Style="border-radius: 12px;">
                                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">
                                    <MudIcon Icon="@Icons.Material.Filled.Security" Class="mr-2" />
                                    Security Settings
                                </MudText>
                                
                                <MudList T="string">
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Two-Factor Authentication</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Add an extra layer of security to your account</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Security.TwoFactorEnabled" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SaveSecuritySettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Login Alerts</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Receive notifications for account sign-ins</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Security.LoginAlertsEnabled" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SaveSecuritySettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="w-100">
                                            <MudText Typo="Typo.body1" Class="mb-2">Session Timeout</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">How long you stay logged in without activity</MudText>
                                            <MudSelect @bind-Value="settings.Security.SessionTimeoutMinutes"
                                                       @bind-Value:after="() => SaveSecuritySettings()"
                                                       Label="Session Duration"
                                                       Variant="Variant.Outlined"
                                                       AnchorOrigin="Origin.BottomCenter">
                                                @foreach (var option in SessionTimeoutOptions.Options)
                                                {
                                                    <MudSelectItem Value="@option.Value">@option.Display</MudSelectItem>
                                                }
                                            </MudSelect>
                                            @if (settings.Security.SessionTimeoutMinutes >= 10080)
                                            {
                                                <MudAlert Severity="Severity.Warning" Dense="true" Class="mt-2">
                                                    <MudText Typo="Typo.caption">
                                                        <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small" Class="mr-1" />
                                                        Extended sessions may pose security risks on shared devices
                                                    </MudText>
                                                </MudAlert>
                                            }
                                        </div>
                                    </MudListItem>
                                </MudList>
                            </MudPaper>

                            <!-- Account Actions Section -->
                            <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px;">
                                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">
                                    <MudIcon Icon="@Icons.Material.Filled.AdminPanelSettings" Class="mr-2" />
                                    Account Actions
                                </MudText>
                                
                                <MudList T="string">
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.Refresh" IconColor="Color.Info">
                                        <div class="d-flex justify-space-between align-center">
                                            <div>
                                                <MudText Typo="Typo.body1">Reset Settings</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Reset all settings to default values</MudText>
                                            </div>
                                            <MudButton Variant="Variant.Outlined" Color="Color.Info" Size="Size.Small" OnClick="ResetSettings" StartIcon="@Icons.Material.Filled.Refresh">
                                                Reset
                                            </MudButton>
                                        </div>
                                    </MudListItem>
                                    
                                    <MudDivider />
                                    
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.Download" IconColor="Color.Info">
                                        <div class="d-flex justify-space-between align-center">
                                            <div>
                                                <MudText Typo="Typo.body1">Export Account Data</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Download a copy of your data</MudText>
                                            </div>
                                            <MudButton Variant="Variant.Outlined" Color="Color.Info" Size="Size.Small" OnClick="ExportData" StartIcon="@Icons.Material.Filled.Download">
                                                Export
                                            </MudButton>
                                        </div>
                                    </MudListItem>
                                    
                                    <MudDivider />
                                    
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.DeleteForever" IconColor="Color.Error">
                                        <div class="d-flex justify-space-between align-center">
                                            <div>
                                                <MudText Typo="Typo.body1">Delete Account</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Permanently delete your account and data</MudText>
                                            </div>
                                            <MudButton Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="DeleteAccount" StartIcon="@Icons.Material.Filled.DeleteForever">
                                                Delete
                                            </MudButton>
                                        </div>
                                    </MudListItem>
                                </MudList>
                            </MudPaper>
                        </MudItem>
                        
                        <MudItem xs="12" md="4">
                            <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px; background: var(--mud-palette-surface-variant);">
                                <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Primary">
                                    <MudIcon Icon="@Icons.Material.Filled.Security" Class="mr-2" />
                                    Security Tips
                                </MudText>
                                <MudList T="string" Dense="true">
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Success">
                                        Use a strong, unique password
                                    </MudListItem>
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Success">
                                        Enable two-factor authentication
                                    </MudListItem>
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Success">
                                        Keep personal info private
                                    </MudListItem>
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.Check" IconColor="Color.Success">
                                        Log out on shared devices
                                    </MudListItem>
                                </MudList>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </div>
            </MudTabPanel>

            <!-- Privacy Settings Tab -->
            <MudTabPanel Text="Privacy" Icon="@Icons.Material.Filled.PrivacyTip">
                <div class="pa-6">
                    <MudGrid>
                        <MudItem xs="12" md="8">
                            <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px;">
                                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">
                                    <MudIcon Icon="@Icons.Material.Filled.Visibility" Class="mr-2" />
                                    Profile Visibility
                                </MudText>
                                
                                <MudList T="string">
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Show Profile Picture</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Let others see your profile picture</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Privacy.ShowProfilePicture" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SavePrivacySettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Show Real Name</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Display your real name to other users</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Privacy.ShowRealName" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SavePrivacySettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Show Location</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Let others see your general location</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Privacy.ShowLocation" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SavePrivacySettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Show Phone Number</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Share phone number with approved renters</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Privacy.ShowPhoneNumber" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SavePrivacySettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Show Email Address</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Display email address in your public profile</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Privacy.ShowEmail" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SavePrivacySettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Show Statistics</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Display rental stats and ratings on your profile</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Privacy.ShowStatistics" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SavePrivacySettings()" />
                                        </div>
                                    </MudListItem>
                                </MudList>
                            </MudPaper>
                        </MudItem>
                        
                        <MudItem xs="12" md="4">
                            <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px; background: var(--mud-palette-surface-variant);">
                                <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Primary">
                                    <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                                    Privacy Guide
                                </MudText>
                                <MudText Typo="Typo.body2" Class="mb-3">
                                    Control what information you share with the NeighborTools community.
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    More visible profiles tend to get more rental requests and build trust faster.
                                </MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </div>
            </MudTabPanel>

            <!-- Notifications Tab -->
            <MudTabPanel Text="Notifications" Icon="@Icons.Material.Filled.Notifications">
                <div class="pa-6">
                    <MudGrid>
                        <MudItem xs="12" md="8">
                            <MudPaper Class="pa-4 mb-4" Elevation="2" Style="border-radius: 12px;">
                                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">
                                    <MudIcon Icon="@Icons.Material.Filled.Email" Class="mr-2" />
                                    Email Notifications
                                </MudText>
                                
                                <MudList T="string">
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Rental Requests</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">When someone wants to rent your tools</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Notifications.EmailRentalRequests" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SaveNotificationSettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Rental Updates</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Status changes on your rentals</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Notifications.EmailRentalUpdates" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SaveNotificationSettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Messages</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">New messages from other users</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Notifications.EmailMessages" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SaveNotificationSettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Security Alerts</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Important security notifications</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Notifications.EmailSecurityAlerts" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SaveNotificationSettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Marketing Emails</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Tips, features, and promotions</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Notifications.EmailMarketing" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SaveNotificationSettings()" />
                                        </div>
                                    </MudListItem>
                                </MudList>
                            </MudPaper>

                            <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px;">
                                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">
                                    <MudIcon Icon="@Icons.Material.Filled.PhoneIphone" Class="mr-2" />
                                    Push Notifications
                                </MudText>
                                
                                <MudList T="string">
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Instant Messages</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Real-time chat messages</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Notifications.PushMessages" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SaveNotificationSettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Rental Requests</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">New rental requests for your tools</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Notifications.PushRentalRequests" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SaveNotificationSettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Rental Updates</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Status changes on your rentals</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Notifications.PushRentalUpdates" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SaveNotificationSettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Rental Reminders</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Pickup and return reminders</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Notifications.PushReminders" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SaveNotificationSettings()" />
                                        </div>
                                    </MudListItem>
                                </MudList>
                            </MudPaper>
                        </MudItem>
                        
                        <MudItem xs="12" md="4">
                            <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px; background: var(--mud-palette-surface-variant);">
                                <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Primary">
                                    <MudIcon Icon="@Icons.Material.Filled.Tune" Class="mr-2" />
                                    Stay Connected
                                </MudText>
                                <MudText Typo="Typo.body2" Class="mb-3">
                                    Enable notifications to stay updated on your tool sharing activities.
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    You can always change these settings later.
                                </MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </div>
            </MudTabPanel>

            <!-- Display Preferences Tab -->
            <MudTabPanel Text="Display" Icon="@Icons.Material.Filled.Palette">
                <div class="pa-6">
                    <MudGrid>
                        <MudItem xs="12" md="8">
                            <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px;">
                                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">
                                    <MudIcon Icon="@Icons.Material.Filled.Palette" Class="mr-2" />
                                    Display Preferences
                                </MudText>
                                
                                <MudGrid>
                                    <MudItem xs="12" sm="6">
                                        <MudSelect T="string" @bind-Value="settings.Display.Theme" 
                                                   Label="Theme" 
                                                   Variant="Variant.Outlined" 
                                                   Adornment="Adornment.Start" 
                                                   AdornmentIcon="@Icons.Material.Filled.Palette"
                                                   @bind-Value:after="() => SaveDisplaySettings()">
                                            @foreach (var option in ThemeOptions.Options)
                                            {
                                                <MudSelectItem T="string" Value="@option.Value">@option.Display</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    
                                    <MudItem xs="12" sm="6">
                                        <MudSelect T="string" @bind-Value="settings.Display.Language" 
                                                   Label="Language" 
                                                   Variant="Variant.Outlined" 
                                                   Adornment="Adornment.Start" 
                                                   AdornmentIcon="@Icons.Material.Filled.Language"
                                                   @bind-Value:after="() => SaveDisplaySettings()">
                                            @foreach (var option in LanguageOptions.Options)
                                            {
                                                <MudSelectItem T="string" Value="@option.Value">@option.Display</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    
                                    <MudItem xs="12" sm="6">
                                        <MudSelect T="string" @bind-Value="settings.Display.Currency" 
                                                   Label="Currency" 
                                                   Variant="Variant.Outlined" 
                                                   Adornment="Adornment.Start" 
                                                   AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                                                   @bind-Value:after="() => SaveDisplaySettings()">
                                            @foreach (var option in CurrencyOptions.Options)
                                            {
                                                <MudSelectItem T="string" Value="@option.Value">@option.Display</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    
                                    <MudItem xs="12" sm="6">
                                        <MudSelect T="string" @bind-Value="settings.Display.TimeZone" 
                                                   Label="Time Zone" 
                                                   Variant="Variant.Outlined" 
                                                   Adornment="Adornment.Start" 
                                                   AdornmentIcon="@Icons.Material.Filled.Schedule"
                                                   @bind-Value:after="() => SaveDisplaySettings()">
                                            @foreach (var option in TimezoneOptions.Options)
                                            {
                                                <MudSelectItem T="string" Value="@option.Value">@option.Display</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                </MudGrid>
                            </MudPaper>
                        </MudItem>
                        
                        <MudItem xs="12" md="4">
                            <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px; background: var(--mud-palette-surface-variant);">
                                <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Primary">
                                    <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                                    Display Info
                                </MudText>
                                <MudText Typo="Typo.body2" Class="mb-3">
                                    Customize how dates, currencies, and content are displayed throughout the application.
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    These settings affect how you see information but don't change what others see.
                                </MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </div>
            </MudTabPanel>

            <!-- Rental Preferences Tab -->
            <MudTabPanel Text="Rentals" Icon="@Icons.Material.Filled.Build">
                <div class="pa-6">
                    <MudGrid>
                        <MudItem xs="12" md="8">
                            <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px;">
                                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">
                                    <MudIcon Icon="@Icons.Material.Filled.Build" Class="mr-2" />
                                    Rental Preferences
                                </MudText>
                                
                                <MudList T="string">
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Auto-Approve Rentals</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Automatically approve rental requests for your tools</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Rental.AutoApproveRentals" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SaveRentalSettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="d-flex justify-space-between align-center w-100">
                                            <div>
                                                <MudText Typo="Typo.body1">Require Security Deposit</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Require a security deposit for all rentals</MudText>
                                            </div>
                                            <MudSwitch @bind-Value="settings.Rental.RequireDeposit" 
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SaveRentalSettings()" />
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="w-100">
                                            <MudText Typo="Typo.body1" Class="mb-2">Rental Lead Time</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">Minimum notice required before rental start (hours)</MudText>
                                            <MudSlider @bind-Value="settings.Rental.RentalLeadTime"
                                                       Min="1" Max="168" Step="1"
                                                       ValueLabel="true"
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => SaveRentalSettings()" />
                                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1">
                                                @($"{settings.Rental.RentalLeadTime} hours")
                                            </MudText>
                                        </div>
                                    </MudListItem>
                                    
                                    <MudListItem T="string">
                                        <div class="w-100">
                                            <MudText Typo="Typo.body1" Class="mb-2">Default Deposit Percentage</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">Default security deposit as percentage of rental cost</MudText>
                                            <MudSlider @bind-Value="depositPercentageSlider"
                                                       Min="0" Max="100" Step="5"
                                                       ValueLabel="true"
                                                       Color="Color.Primary"
                                                       @bind-Value:after="() => UpdateDepositPercentage()" />
                                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1">
                                                @($"{depositPercentageSlider}%")
                                            </MudText>
                                        </div>
                                    </MudListItem>
                                </MudList>
                            </MudPaper>
                        </MudItem>
                        
                        <MudItem xs="12" md="4">
                            <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px; background: var(--mud-palette-surface-variant);">
                                <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Primary">
                                    <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                                    Rental Tips
                                </MudText>
                                <MudText Typo="Typo.body2" Class="mb-3">
                                    These settings help streamline your rental process and protect your tools.
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    Auto-approval can increase bookings but requires more trust in renters.
                                </MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </div>
            </MudTabPanel>
        </MudTabs>
    }
</MudContainer>

@code {
    private UserSettingsDto? settings;
    private PasswordForm passwordForm = new();
    private bool isPageLoading = true;
    private bool isPasswordChanging = false;
    private int depositPercentageSlider = 20;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
    }

    private async Task LoadSettings()
    {
        try
        {
            isPageLoading = true;
            var response = await SettingsService.GetSettingsAsync();
            
            if (response?.Success == true && response.Data != null)
            {
                settings = response.Data;
                depositPercentageSlider = (int)(settings.Rental.DefaultDepositPercentage * 100);
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to load settings.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading settings: {ex.Message}", Severity.Error);
        }
        finally
        {
            isPageLoading = false;
            StateHasChanged();
        }
    }

    private async Task ChangePassword()
    {
        if (settings == null) return;
        
        isPasswordChanging = true;
        
        try
        {
            var request = new ChangePasswordRequest
            {
                CurrentPassword = passwordForm.CurrentPassword,
                NewPassword = passwordForm.NewPassword,
                ConfirmPassword = passwordForm.ConfirmPassword
            };
            
            var response = await SettingsService.ChangePasswordAsync(request);
            
            if (response?.Success == true)
            {
                Snackbar.Add("Password changed successfully!", Severity.Success);
                passwordForm = new PasswordForm();
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to change password.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error changing password: {ex.Message}", Severity.Error);
        }
        finally
        {
            isPasswordChanging = false;
        }
    }

    private async Task SavePrivacySettings()
    {
        if (settings == null) return;
        
        try
        {
            var response = await SettingsService.UpdatePrivacySettingsAsync(settings.Privacy);
            
            if (response?.Success == true)
            {
                Snackbar.Add("Privacy settings saved!", Severity.Success);
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to save privacy settings.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving privacy settings: {ex.Message}", Severity.Error);
        }
    }

    private async Task SaveNotificationSettings()
    {
        if (settings == null) return;
        
        try
        {
            var response = await SettingsService.UpdateNotificationSettingsAsync(settings.Notifications);
            
            if (response?.Success == true)
            {
                Snackbar.Add("Notification settings saved!", Severity.Success);
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to save notification settings.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving notification settings: {ex.Message}", Severity.Error);
        }
    }

    private async Task SaveDisplaySettings()
    {
        if (settings == null) return;
        
        try
        {
            var request = new UpdateUserSettingsRequest { Display = settings.Display };
            var response = await SettingsService.UpdateSettingsAsync(request);
            
            if (response?.Success == true)
            {
                Snackbar.Add("Display settings saved!", Severity.Success);
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to save display settings.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving display settings: {ex.Message}", Severity.Error);
        }
    }

    private async Task SaveRentalSettings()
    {
        if (settings == null) return;
        
        try
        {
            var request = new UpdateUserSettingsRequest { Rental = settings.Rental };
            var response = await SettingsService.UpdateSettingsAsync(request);
            
            if (response?.Success == true)
            {
                Snackbar.Add("Rental settings saved!", Severity.Success);
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to save rental settings.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving rental settings: {ex.Message}", Severity.Error);
        }
    }

    private async Task SaveSecuritySettings()
    {
        if (settings == null) return;
        
        try
        {
            var request = new UpdateUserSettingsRequest { Security = settings.Security };
            var response = await SettingsService.UpdateSettingsAsync(request);
            
            if (response?.Success == true)
            {
                // Update the session timeout service with the new timeout value
                await SessionTimeoutService.UpdateTimeoutAsync(settings.Security.SessionTimeoutMinutes);
                
                Snackbar.Add("Security settings saved!", Severity.Success);
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to save security settings.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving security settings: {ex.Message}", Severity.Error);
        }
    }

    private async Task UpdateDepositPercentage()
    {
        if (settings == null) return;
        
        settings.Rental.DefaultDepositPercentage = depositPercentageSlider / 100.0m;
        await SaveRentalSettings();
    }

    private async Task ResetSettings()
    {
        try
        {
            var response = await SettingsService.ResetSettingsAsync();
            
            if (response?.Success == true && response.Data != null)
            {
                settings = response.Data;
                depositPercentageSlider = (int)(settings.Rental.DefaultDepositPercentage * 100);
                Snackbar.Add("Settings reset to defaults successfully!", Severity.Success);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to reset settings.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error resetting settings: {ex.Message}", Severity.Error);
        }
    }

    private void ExportData()
    {
        Navigation.NavigateTo("/privacy-dashboard");
    }

    private void DeleteAccount()
    {
        Navigation.NavigateTo("/privacy-dashboard");
    }
}