@page "/my-rentals"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@using frontend.Components
@using frontend.Shared
@using ToolsSharing.Frontend.Models
@using ToolsSharing.Frontend.Services
@inject IRentalService RentalService
@inject BundleService BundleService
@inject IPaymentService PaymentService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IUrlService UrlService
@attribute [Authorize]

<PageTitle>My Rentals - NeighborTools</PageTitle>

<!-- Overdue Rental Alerts -->
<OverdueRentalAlertComponent ShowDetails="true" 
                           ShowActions="true" 
                           ShowOverdueProgress="true"
                           AutoRefresh="true" 
                           Class="mb-4" />

<!-- Header Section -->
<div class="d-flex flex-column flex-sm-row justify-space-between align-center mb-6 gap-4">
    <div>
        <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">
            <MudIcon Icon="@Icons.Material.Filled.Assignment" Class="mr-2" />
            My Rentals
        </MudText>
        <MudText Typo="Typo.body1" Color="Color.Secondary">
            Track your rental requests and manage your tool rentals
        </MudText>
    </div>
</div>

<!-- Tabs for different rental types -->
<MudTabs Elevation="4" Rounded="true" PanelClass="pa-6" @bind-ActivePanelIndex="activeTab">
    <MudTabPanel Text="My Requests" Icon="@Icons.Material.Filled.ShoppingCart">
        <div class="d-flex flex-column flex-sm-row justify-space-between align-start align-sm-center mb-4 gap-3">
            <div>
                <MudText Typo="Typo.h6">Tools I'm Renting</MudText>
                @if (renterRentals?.Any() == true)
                {
                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                        @GetFilteredRenterRentals().Count() of @renterRentals.Count rental requests
                        @if (GetPendingCount() > 0)
                        {
                            <span> â€¢ @GetPendingCount() pending</span>
                        }
                        @if (GetUrgentCount() > 0)
                        {
                            <MudChip T="string" Color="Color.Warning" Size="Size.Small" Class="ml-2">
                                @GetUrgentCount() urgent
                            </MudChip>
                        }
                    </MudText>
                }
            </div>
            <div class="d-flex flex-column flex-sm-row gap-2 align-stretch align-sm-center">
                <!-- Quick Filter Chips -->
                <div class="d-flex gap-1 flex-wrap">
                    <MudChip T="string" 
                             Color="@(selectedRenterQuickFilter == "pending" ? Color.Primary : Color.Default)" 
                             Size="Size.Small" 
                             OnClick="() => SetQuickFilter("pending")"
                             Class="cursor-pointer">
                        Pending (@GetPendingCount())
                    </MudChip>
                    <MudChip T="string" 
                             Color="@(selectedRenterQuickFilter == "approved" ? Color.Primary : Color.Default)" 
                             Size="Size.Small" 
                             OnClick="() => SetQuickFilter("approved")"
                             Class="cursor-pointer">
                        Approved (@GetApprovedCount())
                    </MudChip>
                    <MudChip T="string" 
                             Color="@(selectedRenterQuickFilter == "active" ? Color.Primary : Color.Default)" 
                             Size="Size.Small" 
                             OnClick="() => SetQuickFilter("active")"
                             Class="cursor-pointer">
                        Active (@GetActiveCount())
                    </MudChip>
                </div>
                
                <!-- Advanced Filters -->
                <div class="d-flex gap-2">
                    <MudSelect T="string" @bind-Value="selectedRenterStatus" Label="Status" Variant="Variant.Outlined" Dense="true" Style="min-width: 120px;">
                        <MudSelectItem T="string" Value="@string.Empty">All Status</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Pending")">Pending</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Approved")">Approved</MudSelectItem>
                        <MudSelectItem T="string" Value="@("PickedUp")">Active</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Returned")">Completed</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Rejected")">Rejected</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Cancelled")">Cancelled</MudSelectItem>
                    </MudSelect>
                    
                    <MudSelect T="string" @bind-Value="selectedRenterSort" Label="Sort" Variant="Variant.Outlined" Dense="true" Style="min-width: 120px;">
                        <MudSelectItem T="string" Value="@("newest")">Newest First</MudSelectItem>
                        <MudSelectItem T="string" Value="@("oldest")">Oldest First</MudSelectItem>
                        <MudSelectItem T="string" Value="@("status")">By Status</MudSelectItem>
                        <MudSelectItem T="string" Value="@("cost-high")">Cost: High to Low</MudSelectItem>
                        <MudSelectItem T="string" Value="@("cost-low")">Cost: Low to High</MudSelectItem>
                        <MudSelectItem T="string" Value="@("start-date")">By Start Date</MudSelectItem>
                    </MudSelect>
                    
                    @if (HasActiveFilters())
                    {
                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Secondary" 
                                   OnClick="ClearAllFilters"
                                   StartIcon="@Icons.Material.Filled.Clear"
                                   Size="Size.Small">
                            Clear
                        </MudButton>
                    }
                </div>
            </div>
        </div>
        
        @if (isLoadingRenterRentals)
        {
            <div class="text-center pa-8">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                <MudText Typo="Typo.h6" Class="mt-4">Loading rental requests...</MudText>
            </div>
        }
        else if (renterRentals?.Any() == true)
        {
            <MudGrid>
                @foreach (var rental in GetFilteredRenterRentals())
                {
                    <MudItem xs="12" md="6" lg="4">
                        <MudCard Elevation="4" Style="height: 100%; border-radius: 12px;">
                            @if (rental.Tool?.ImageUrls.Any() == true)
                            {
                                <MudCardMedia Image="@UrlService.GetFileUrl(rental.Tool.ImageUrls.First())" Height="200" Style="border-radius: 12px 12px 0 0;" />
                            }
                            else
                            {
                                <div class="d-flex align-center justify-center mud-elevation-1" style="height: 200px; border-radius: 12px 12px 0 0;">
                                    <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Large" Color="Color.Secondary" />
                                </div>
                            }
                            
                            <MudCardContent>
                                <MudLink Href="@($"/tools/{rental.ToolId}")" Typo="Typo.h6" Color="Color.Primary" GutterBottom="true">
                                    @rental.ToolName
                                </MudLink>
                                
                                <div class="d-flex justify-space-between align-center mb-2">
                                    <div class="d-flex align-center gap-2">
                                        <MudChip T="string" Color="@GetEnhancedStatusColor(rental)" Size="Size.Small" Class="@GetStatusChipClass(rental)">
                                            <MudIcon Icon="@GetStatusIcon(rental.Status)" Size="Size.Small" Class="mr-1" />
                                            @GetSmartStatusLabel(rental)
                                        </MudChip>
                                        @if (IsUrgentStatus(rental))
                                        {
                                            <MudChip T="string" Color="Color.Error" Size="Size.Small" Variant="Variant.Outlined">
                                                <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" Class="mr-1" />
                                                @GetUrgencyLabel(rental)
                                            </MudChip>
                                        }
                                    </div>
                                    <div class="text-right">
                                        <MudText Typo="Typo.h6" Color="Color.Primary">
                                            @GetDisplayCost(rental)
                                        </MudText>
                                        @if (rental.Status == "Pending")
                                        {
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                @GetTimeAgoText(rental.CreatedAt)
                                            </MudText>
                                        }
                                        else if (rental.Status == "Approved" && !rental.IsPaid)
                                        {
                                            <MudText Typo="Typo.caption" Color="Color.Warning">
                                                @GetApprovalTimeText(rental)
                                            </MudText>
                                        }
                                    </div>
                                </div>
                                
                                <!-- Rental Progress Timeline -->
                                <div class="mb-3">
                                    <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelineAlign="TimelineAlign.Center" Class="pa-2">
                                        <!-- Step 1: Request Sent -->
                                        <MudTimelineItem Size="Size.Small" Color="Color.Success">
                                            <div class="text-center">
                                                <MudIcon Icon="@Icons.Material.Filled.Send" Size="Size.Small" />
                                                <MudText Typo="Typo.caption" Class="mt-1">Sent</MudText>
                                            </div>
                                        </MudTimelineItem>
                                        
                                        <!-- Step 2: Owner Response -->
                                        <MudTimelineItem Size="Size.Small" Color="@GetTimelineColor(rental, "approval")">
                                            <div class="text-center">
                                                <MudIcon Icon="@GetTimelineIcon(rental, "approval")" Size="Size.Small" />
                                                <MudText Typo="Typo.caption" Class="mt-1">@GetTimelineText(rental, "approval")</MudText>
                                            </div>
                                        </MudTimelineItem>
                                        
                                        <!-- Step 3: Payment (if approved) -->
                                        @if (rental.Status != "Rejected" && rental.Status != "Cancelled")
                                        {
                                            <MudTimelineItem Size="Size.Small" Color="@GetTimelineColor(rental, "payment")">
                                                <div class="text-center">
                                                    <MudIcon Icon="@GetTimelineIcon(rental, "payment")" Size="Size.Small" />
                                                    <MudText Typo="Typo.caption" Class="mt-1">@GetTimelineText(rental, "payment")</MudText>
                                                </div>
                                            </MudTimelineItem>
                                        }
                                        
                                        <!-- Step 4: Rental Active (if paid) -->
                                        @if (rental.Status == "PickedUp" || rental.Status == "Returned")
                                        {
                                            <MudTimelineItem Size="Size.Small" Color="@GetTimelineColor(rental, "active")">
                                                <div class="text-center">
                                                    <MudIcon Icon="@GetTimelineIcon(rental, "active")" Size="Size.Small" />
                                                    <MudText Typo="Typo.caption" Class="mt-1">@GetTimelineText(rental, "active")</MudText>
                                                </div>
                                            </MudTimelineItem>
                                        }
                                    </MudTimeline>
                                </div>
                                
                                <!-- Smart Status Messaging with Time Context -->
                                @{
                                    var statusInfo = GetSmartStatusInfo(rental);
                                }
                                <MudAlert Severity="@statusInfo.Severity" Dense="true" Class="mb-2">
                                    <div class="d-flex align-center justify-space-between">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@statusInfo.Icon" Size="Size.Small" Class="mr-2" /> 
                                            <div>
                                                <MudText Typo="Typo.caption">
                                                    <strong>@statusInfo.Title:</strong> @statusInfo.Message
                                                </MudText>
                                                @if (!string.IsNullOrEmpty(statusInfo.SubMessage))
                                                {
                                                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1">
                                                        @statusInfo.SubMessage
                                                    </MudText>
                                                }
                                            </div>
                                        </div>
                                        @if (statusInfo.ShowUrgency)
                                        {
                                            <MudChip T="string" Color="@statusInfo.UrgencyColor" Size="Size.Small" Class="ml-2">
                                                <MudIcon Icon="@statusInfo.UrgencyIcon" Size="Size.Small" Class="mr-1" />
                                                @statusInfo.UrgencyText
                                            </MudChip>
                                        }
                                    </div>
                                </MudAlert>
                                
                                <!-- Additional contextual information -->
                                @if (statusInfo.ShowAdditionalInfo)
                                {
                                    <MudPaper Elevation="1" Class="pa-2 mb-2" Style="border-radius: 6px; background: var(--mud-palette-background-grey);">
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="mr-1" />
                                            @statusInfo.AdditionalInfo
                                        </MudText>
                                    </MudPaper>
                                }
                                
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <strong>Owner:</strong> 
                                    <UserLink UserId="@rental.OwnerId" 
                                              DisplayName="@rental.OwnerName" 
                                              ShowAsLink="true" 
                                              ShowAvatar="false" />
                                </MudText>
                                
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <strong>Period:</strong> @rental.StartDate.ToString("MMM dd") - @rental.EndDate.ToString("MMM dd, yyyy")
                                </MudText>
                                
                                @if (rental.DepositAmount > 0)
                                {
                                    <MudText Typo="Typo.body2" Class="mb-2">
                                        <strong>Deposit:</strong> $@rental.DepositAmount.ToString("F2")
                                    </MudText>
                                }
                                
                                @if (!string.IsNullOrEmpty(rental.Notes))
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-2">
                                        <strong>Notes:</strong> @rental.Notes
                                    </MudText>
                                }
                                
                                
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    Requested: @rental.CreatedAt.ToString("MMM dd, yyyy")
                                </MudText>
                            </MudCardContent>
                            
                            <MudCardActions Class="pa-4">
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ViewRentalDetails(rental.Id)" StartIcon="@Icons.Material.Filled.Visibility">
                                    View Details
                                </MudButton>
                                @if (rental.Status == "Approved" && !rental.IsPaid)
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="() => InitiatePayment(rental.Id)" StartIcon="@Icons.Material.Filled.Payment">
                                        Complete Payment
                                    </MudButton>
                                }
                                else if (rental.Status == "Pending")
                                {
                                    <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => RefreshRentalStatus(rental.Id)" StartIcon="@Icons.Material.Filled.Refresh" Size="Size.Small">
                                        Refresh Status
                                    </MudButton>
                                    
                                    @if (ShouldShowReminder(rental))
                                    {
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ShowReminderDialog(rental)" StartIcon="@Icons.Material.Filled.Lightbulb" Size="Size.Small">
                                            Get Help
                                        </MudButton>
                                    }
                                    
                                    <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => CancelRental(rental.Id)" StartIcon="@Icons.Material.Filled.Cancel" Size="Size.Small">
                                        Cancel Request
                                    </MudButton>
                                }
                                else if (rental.Status == "Approved" && rental.IsPaid)
                                {
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ContactOwner(rental.OwnerId, rental.ToolName)" StartIcon="@Icons.Material.Filled.Message" Size="Size.Small">
                                        Message Owner
                                    </MudButton>
                                }
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudPaper Class="pa-8 text-center" Elevation="2" Style="border-radius: 12px;">
                <MudIcon Icon="@Icons.Material.Filled.ShoppingCartCheckout" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">No rental requests found</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                    You haven't made any rental requests yet. Browse tools to get started!
                </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/tools" StartIcon="@Icons.Material.Filled.Search">
                    Browse Tools
                </MudButton>
            </MudPaper>
        }
    </MudTabPanel>

    <MudTabPanel Text="Tool Rentals" Icon="@Icons.Material.Filled.Build">
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.h6">My Tools Being Rented</MudText>
            <div class="d-flex justify-end">
                <MudSelect T="string" @bind-Value="selectedOwnerStatus" Label="Status Filter" Variant="Variant.Outlined" Dense="true" Style="width: fit-content;">
                    <MudSelectItem T="string" Value="@string.Empty">All Status</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Pending")">Pending</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Approved")">Approved</MudSelectItem>
                    <MudSelectItem T="string" Value="@("PickedUp")">Picked Up</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Returned")">Returned</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Rejected")">Rejected</MudSelectItem>
                </MudSelect>
            </div>
        </div>
        
        @if (isLoadingOwnerRentals)
        {
            <div class="text-center pa-8">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                <MudText Typo="Typo.h6" Class="mt-4">Loading tool rentals...</MudText>
            </div>
        }
        else if (ownerRentals?.Any() == true)
        {
            <MudGrid>
                @foreach (var rental in GetFilteredOwnerRentals())
                {
                    <MudItem xs="12" md="6" lg="4">
                        <MudCard Elevation="4" Style="height: 100%; border-radius: 12px;">
                            @if (rental.Tool?.ImageUrls.Any() == true)
                            {
                                <MudCardMedia Image="@UrlService.GetFileUrl(rental.Tool.ImageUrls.First())" Height="200" Style="border-radius: 12px 12px 0 0;" />
                            }
                            else
                            {
                                <div class="d-flex align-center justify-center mud-elevation-1" style="height: 200px; border-radius: 12px 12px 0 0;">
                                    <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Large" Color="Color.Secondary" />
                                </div>
                            }
                            
                            <MudCardContent>
                                <MudLink Href="@($"/tools/{rental.ToolId}")" Typo="Typo.h6" Color="Color.Primary" GutterBottom="true">
                                    @rental.ToolName
                                </MudLink>
                                
                                <div class="d-flex justify-space-between align-center mb-2">
                                    <div class="d-flex align-center gap-2">
                                        <MudChip T="string" Color="@GetEnhancedStatusColor(rental)" Size="Size.Small" Class="@GetStatusChipClass(rental)">
                                            <MudIcon Icon="@GetStatusIcon(rental.Status)" Size="Size.Small" Class="mr-1" />
                                            @GetSmartStatusLabel(rental)
                                        </MudChip>
                                        @if (IsUrgentStatus(rental))
                                        {
                                            <MudChip T="string" Color="Color.Error" Size="Size.Small" Variant="Variant.Outlined">
                                                <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" Class="mr-1" />
                                                @GetUrgencyLabel(rental)
                                            </MudChip>
                                        }
                                    </div>
                                    <div class="text-right">
                                        <MudText Typo="Typo.h6" Color="Color.Primary">
                                            @GetDisplayCost(rental)
                                        </MudText>
                                        @if (rental.Status == "Pending")
                                        {
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                @GetTimeAgoText(rental.CreatedAt)
                                            </MudText>
                                        }
                                        else if (rental.Status == "Approved" && !rental.IsPaid)
                                        {
                                            <MudText Typo="Typo.caption" Color="Color.Warning">
                                                @GetApprovalTimeText(rental)
                                            </MudText>
                                        }
                                    </div>
                                </div>
                                
                                @if (rental.Status == "Approved" && !rental.IsPaid)
                                {
                                    <MudAlert Severity="Severity.Info" Dense="true" Class="mb-2">
                                        <MudText Typo="Typo.caption">
                                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" /> Waiting for renter payment
                                        </MudText>
                                    </MudAlert>
                                }
                                else if (rental.Status == "Approved" && rental.IsPaid)
                                {
                                    <MudAlert Severity="Severity.Success" Dense="true" Class="mb-2">
                                        <MudText Typo="Typo.caption">
                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" /> Payment received
                                        </MudText>
                                    </MudAlert>
                                }
                                
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <strong>Renter:</strong> 
                                    <UserLink UserId="@rental.RenterId" 
                                              DisplayName="@rental.RenterName" 
                                              ShowAsLink="true" 
                                              ShowAvatar="false" />
                                </MudText>
                                
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <strong>Period:</strong> @rental.StartDate.ToString("MMM dd") - @rental.EndDate.ToString("MMM dd, yyyy")
                                </MudText>
                                
                                @if (!string.IsNullOrEmpty(rental.Notes))
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-2">
                                        <strong>Notes:</strong> @rental.Notes
                                    </MudText>
                                }
                                
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    Requested: @rental.CreatedAt.ToString("MMM dd, yyyy")
                                </MudText>
                            </MudCardContent>
                            
                            <MudCardActions Class="pa-4">
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ViewRentalDetails(rental.Id)" StartIcon="@Icons.Material.Filled.Visibility">
                                    View Details
                                </MudButton>
                                @if (rental.Status == "Pending")
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" OnClick="() => ApproveRental(rental.Id)" StartIcon="@Icons.Material.Filled.CheckCircle">
                                        Approve
                                    </MudButton>
                                    <MudButton Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="() => RejectRental(rental.Id)" StartIcon="@Icons.Material.Filled.Cancel">
                                        Reject
                                    </MudButton>
                                }
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudPaper Class="pa-8 text-center" Elevation="2" Style="border-radius: 12px;">
                <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">No rental requests for your tools</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                    Share your tools to start receiving rental requests!
                </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/tools/create" StartIcon="@Icons.Material.Filled.Add">
                    Add Tool
                </MudButton>
            </MudPaper>
        }
    </MudTabPanel>

    <MudTabPanel Text="Bundle Rentals" Icon="@Icons.Material.Filled.Inventory">
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.h6">Bundle Rental Requests</MudText>
            <div class="d-flex justify-end">
                <MudSelect T="string" @bind-Value="selectedBundleStatus" Label="Status Filter" Variant="Variant.Outlined" Dense="true" Style="width: fit-content;">
                    <MudSelectItem T="string" Value="@string.Empty">All Status</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Pending")">Pending</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Approved")">Approved</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Rejected")">Rejected</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Cancelled")">Cancelled</MudSelectItem>
                </MudSelect>
            </div>
        </div>
        
        @if (isLoadingBundleRentals)
        {
            <div class="text-center pa-8">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                <MudText Typo="Typo.h6" Class="mt-4">Loading bundle rentals...</MudText>
            </div>
        }
        else if (GetFilteredBundleRentals()?.Any() == true)
        {
            <MudGrid>
                @foreach (var bundleRental in GetFilteredBundleRentals())
                {
                    <MudItem xs="12" md="6" lg="4">
                        <MudCard Elevation="2" Style="border-radius: 12px;">
                            <MudCardContent>
                                <MudLink Href="@($"/bundles/{bundleRental.BundleId}")" Typo="Typo.h6" Color="Color.Primary" GutterBottom="true">
                                    @bundleRental.BundleName
                                </MudLink>
                                
                                <div class="d-flex justify-space-between align-center mb-2">
                                    <MudChip T="string" Color="@GetBundleStatusColor(bundleRental.Status)" Size="Size.Small">
                                        @bundleRental.Status
                                    </MudChip>
                                    <MudText Typo="Typo.h6" Color="Color.Primary">
                                        $@bundleRental.FinalCost.ToString("F2")
                                    </MudText>
                                </div>
                                
                                @if (bundleRental.Status == "Pending")
                                {
                                    <MudAlert Severity="Severity.Info" Dense="true" Class="mb-2">
                                        <MudText Typo="Typo.caption">
                                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" /> Awaiting bundle owner approval
                                        </MudText>
                                    </MudAlert>
                                }
                                else if (bundleRental.Status == "Approved")
                                {
                                    <MudAlert Severity="Severity.Success" Dense="true" Class="mb-2">
                                        <MudText Typo="Typo.caption">
                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" /> Bundle rental approved - Ready for coordination
                                        </MudText>
                                    </MudAlert>
                                }
                                
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <strong>Renter:</strong> 
                                    <UserLink UserId="@bundleRental.RenterUserId" 
                                              DisplayName="@bundleRental.RenterName" 
                                              ShowAsLink="true" 
                                              ShowAvatar="false" />
                                </MudText>
                                
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <strong>Period:</strong> @bundleRental.RentalDate.ToString("MMM dd") - @bundleRental.ReturnDate.ToString("MMM dd, yyyy")
                                </MudText>
                                
                                @if (!string.IsNullOrEmpty(bundleRental.RenterNotes))
                                {
                                    <MudText Typo="Typo.body2" Class="mb-2">
                                        <strong>Notes:</strong> @bundleRental.RenterNotes
                                    </MudText>
                                }
                                
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    Created: @bundleRental.CreatedAt.ToString("MMM dd, yyyy")
                                </MudText>
                            </MudCardContent>
                            
                            <MudCardActions>
                                @if (bundleRental.Status == "Pending")
                                {
                                    <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="() => ApproveBundleRental(bundleRental.Id)" StartIcon="@Icons.Material.Filled.Check" Size="Size.Small">
                                        Approve
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => RejectBundleRental(bundleRental.Id)" StartIcon="@Icons.Material.Filled.Close" Size="Size.Small">
                                        Reject
                                    </MudButton>
                                }
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudPaper Class="pa-8 text-center" Elevation="2" Style="border-radius: 12px;">
                <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">No bundle rental requests found</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                    Bundle rental requests will appear here when users request to rent your bundles.
                </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/bundles" StartIcon="@Icons.Material.Filled.Search">
                    Browse Bundles
                </MudButton>
            </MudPaper>
        }
    </MudTabPanel>
</MudTabs>

@code {
    private List<Rental>? renterRentals;
    private List<Rental>? ownerRentals;
    private List<BundleRentalModel>? bundleRentals;
    private bool isLoadingRenterRentals = true;
    private bool isLoadingOwnerRentals = true;
    private bool isLoadingBundleRentals = true;
    private string selectedRenterStatus = string.Empty;
    private string selectedOwnerStatus = string.Empty;
    private string selectedBundleStatus = string.Empty;
    private string selectedRenterQuickFilter = string.Empty;
    private string selectedRenterSort = "newest";
    private int activeTab = 0;
    private Dictionary<string, decimal?> rentalCosts = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            LoadRenterRentals(),
            LoadOwnerRentals(),
            LoadBundleRentals()
        );
    }

    private async Task LoadRenterRentals()
    {
        isLoadingRenterRentals = true;
        try
        {
            var result = await RentalService.GetMyRentalsAsync();
            if (result.Success)
            {
                renterRentals = result.Data;
                
                // Calculate costs for display
                await LoadRentalCosts(renterRentals);
            }
            else
            {
                Snackbar.Add($"Error loading rentals: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading rentals: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingRenterRentals = false;
        }
    }

    private async Task LoadOwnerRentals()
    {
        isLoadingOwnerRentals = true;
        try
        {
            var result = await RentalService.GetMyToolRentalsAsync();
            if (result.Success)
            {
                ownerRentals = result.Data;
            }
            else
            {
                Snackbar.Add($"Error loading tool rentals: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading tool rentals: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingOwnerRentals = false;
        }
    }

    private List<Rental> GetFilteredRenterRentals()
    {
        if (renterRentals == null) return new List<Rental>();
        
        var filtered = renterRentals.AsEnumerable();
        
        // Apply status filter
        if (!string.IsNullOrEmpty(selectedRenterStatus))
        {
            filtered = filtered.Where(r => r.Status == selectedRenterStatus);
        }
        
        // Apply quick filter
        if (!string.IsNullOrEmpty(selectedRenterQuickFilter))
        {
            filtered = selectedRenterQuickFilter switch
            {
                "pending" => filtered.Where(r => r.Status == "Pending"),
                "approved" => filtered.Where(r => r.Status == "Approved"),
                "active" => filtered.Where(r => r.Status == "PickedUp"),
                _ => filtered
            };
        }
        
        // Apply sorting
        filtered = selectedRenterSort switch
        {
            "oldest" => filtered.OrderBy(r => r.CreatedAt),
            "status" => filtered.OrderBy(r => GetStatusSortOrder(r.Status)).ThenByDescending(r => r.CreatedAt),
            "cost-high" => filtered.OrderByDescending(r => GetRentalCost(r)),
            "cost-low" => filtered.OrderBy(r => GetRentalCost(r)),
            "start-date" => filtered.OrderBy(r => r.StartDate),
            _ => filtered.OrderByDescending(r => r.CreatedAt) // newest (default)
        };
        
        return filtered.ToList();
    }
    
    private int GetStatusSortOrder(string status)
    {
        return status switch
        {
            "Pending" => 1,
            "Approved" => 2,
            "PickedUp" => 3,
            "Returned" => 4,
            "Rejected" => 5,
            "Cancelled" => 6,
            _ => 7
        };
    }
    
    private decimal GetRentalCost(Rental rental)
    {
        return rentalCosts.ContainsKey(rental.Id) && rentalCosts[rental.Id].HasValue 
            ? rentalCosts[rental.Id].Value 
            : rental.TotalCost;
    }
    
    private string GetDisplayCost(Rental rental)
    {
        return GetRentalCost(rental).ToString("F2");
    }

    private List<Rental> GetFilteredOwnerRentals()
    {
        if (ownerRentals == null) return new List<Rental>();
        
        return string.IsNullOrEmpty(selectedOwnerStatus) 
            ? ownerRentals.ToList()
            : ownerRentals.Where(r => r.Status == selectedOwnerStatus).ToList();
    }

    private Color GetStatusColor(string status)
    {
        return status switch
        {
            "Pending" => Color.Warning,
            "Approved" => Color.Info,
            "PickedUp" => Color.Primary,
            "Returned" => Color.Success,
            "Rejected" => Color.Error,
            "Cancelled" => Color.Secondary,
            "Overdue" => Color.Error,
            _ => Color.Default
        };
    }

    private void ViewRentalDetails(string rentalId)
    {
        Navigation.NavigateTo($"/rentals/{rentalId}");
    }

    private async Task ApproveRental(string rentalId)
    {
        try
        {
            var request = new RentalApprovalRequest { IsApproved = true };
            var result = await RentalService.ApproveRentalAsync(rentalId, request);
            
            if (result.Success)
            {
                Snackbar.Add("Rental approved successfully!", Severity.Success);
                await LoadOwnerRentals();
            }
            else
            {
                Snackbar.Add($"Error approving rental: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error approving rental: {ex.Message}", Severity.Error);
        }
    }

    private async Task RejectRental(string rentalId)
    {
        try
        {
            var request = new RentalApprovalRequest { IsApproved = false, Reason = "Rejected by owner" };
            var result = await RentalService.RejectRentalAsync(rentalId, request);
            
            if (result.Success)
            {
                Snackbar.Add("Rental rejected.", Severity.Info);
                await LoadOwnerRentals();
            }
            else
            {
                Snackbar.Add($"Error rejecting rental: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error rejecting rental: {ex.Message}", Severity.Error);
        }
    }

    private async Task InitiatePayment(string rentalId)
    {
        try
        {
            if (!Guid.TryParse(rentalId, out var rentalGuid))
            {
                Snackbar.Add("Invalid rental ID", Severity.Error);
                return;
            }

            // Find the rental to get tool details for the dialog
            var rental = renterRentals?.FirstOrDefault(r => r.Id == rentalId);
            if (rental?.Tool == null)
            {
                Snackbar.Add("Rental information not found", Severity.Error);
                return;
            }

            // Calculate rental cost using the backend API for accuracy
            if (!Guid.TryParse(rental.Tool.Id, out var toolGuid))
            {
                Snackbar.Add("Invalid tool ID format", Severity.Error);
                return;
            }

            var costResult = await PaymentService.CalculateRentalCostAsync(toolGuid, rental.StartDate, rental.EndDate);
            if (!costResult.Success || costResult.Data == null)
            {
                Snackbar.Add($"Failed to calculate rental cost: {costResult.Message}", Severity.Error);
                return;
            }
            
            var parameters = new DialogParameters 
            { 
                { "RentalId", rentalGuid },
                { "Tool", rental.Tool },
                { "RentalAmount", costResult.Data.RentalAmount },
                { "SecurityDeposit", costResult.Data.SecurityDeposit },
                { "CommissionAmount", costResult.Data.CommissionAmount },
                { "CommissionRate", costResult.Data.CommissionRate },
                { "TotalAmount", costResult.Data.TotalPayerAmount },
                { "StartDate", rental.StartDate },
                { "EndDate", rental.EndDate }
            };
            
            var options = new DialogOptions 
            { 
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
            
            var dialog = await DialogService.ShowAsync<PaymentConfirmationDialog>("Confirm Payment", parameters, options);
            var result = await dialog.Result;
            
            if (!result.Canceled)
            {
                // Payment was initiated successfully, refresh the rentals
                await LoadRenterRentals();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error opening payment dialog: {ex.Message}", Severity.Error);
        }
    }

    private async Task CancelRental(string rentalId)
    {
        var rental = renterRentals?.FirstOrDefault(r => r.Id == rentalId);
        if (rental == null)
        {
            Snackbar.Add("Rental not found", Severity.Error);
            return;
        }

        // Show confirmation dialog
        var parameters = new DialogParameters
        {
            { "Title", "Cancel Rental Request" },
            { "Message", $"Are you sure you want to cancel your rental request for \"{rental.ToolName}\"?" },
            { "ShowReasonInput", true },
            { "ReasonLabel", "Cancellation reason (optional)" },
            { "ConfirmText", "Cancel Rental" },
            { "ConfirmColor", Color.Error }
        };

        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = DialogService.Show<ConfirmationDialog>("Cancel Rental", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is ConfirmationDialogResult dialogResult && dialogResult.Confirmed)
        {
            try
            {
                var apiResult = await RentalService.CancelRentalAsync(rentalId, dialogResult.Reason);
                
                if (apiResult.Success)
                {
                    Snackbar.Add("Rental cancelled successfully", Severity.Success);
                    await LoadRenterRentals(); // Refresh the list
                }
                else
                {
                    Snackbar.Add($"Error cancelling rental: {apiResult.Message}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error cancelling rental: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task LoadRentalCosts(List<Rental>? rentals)
    {
        if (rentals == null) return;
        
        foreach (var rental in rentals)
        {
            if (rental.Tool != null && Guid.TryParse(rental.Tool.Id, out var toolGuid))
            {
                try
                {
                    var costResult = await PaymentService.CalculateRentalCostAsync(toolGuid, rental.StartDate, rental.EndDate);
                    if (costResult.Success && costResult.Data != null)
                    {
                        rentalCosts[rental.Id] = costResult.Data.TotalPayerAmount;
                    }
                    else
                    {
                        rentalCosts[rental.Id] = null;
                    }
                }
                catch
                {
                    // Silently fail for individual cost calculations
                    rentalCosts[rental.Id] = null;
                }
            }
        }
        
        StateHasChanged();
    }

    private async Task LoadBundleRentals()
    {
        isLoadingBundleRentals = true;
        try
        {
            var result = await BundleService.GetUserBundleRentalsAsync();
            if (result.Success && result.Data != null)
            {
                bundleRentals = result.Data.Items;
            }
            else
            {
                Snackbar.Add($"Error loading bundle rentals: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading bundle rentals: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingBundleRentals = false;
        }
    }

    private List<BundleRentalModel> GetFilteredBundleRentals()
    {
        if (bundleRentals == null) return new List<BundleRentalModel>();
        
        return string.IsNullOrEmpty(selectedBundleStatus) 
            ? bundleRentals.ToList()
            : bundleRentals.Where(br => br.Status == selectedBundleStatus).ToList();
    }

    private Color GetBundleStatusColor(string status)
    {
        return status switch
        {
            "Pending" => Color.Warning,
            "Approved" => Color.Success,
            "Rejected" => Color.Error,
            "Cancelled" => Color.Secondary,
            _ => Color.Default
        };
    }

    private async Task ApproveBundleRental(Guid bundleRentalId)
    {
        try
        {
            var result = await BundleService.ApproveBundleRentalAsync(bundleRentalId);
            
            if (result.Success)
            {
                Snackbar.Add("Bundle rental approved successfully!", Severity.Success);
                await LoadBundleRentals();
            }
            else
            {
                Snackbar.Add($"Error approving bundle rental: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error approving bundle rental: {ex.Message}", Severity.Error);
        }
    }

    private async Task RejectBundleRental(Guid bundleRentalId)
    {
        // Show confirmation dialog with reason input
        var parameters = new DialogParameters
        {
            { "Title", "Reject Bundle Rental Request" },
            { "Message", "Are you sure you want to reject this bundle rental request?" },
            { "ShowReasonInput", true },
            { "ReasonLabel", "Rejection reason (optional)" },
            { "ConfirmText", "Reject Request" },
            { "ConfirmColor", Color.Error }
        };

        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = DialogService.Show<ConfirmationDialog>("Reject Bundle Rental", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is ConfirmationDialogResult dialogResult && dialogResult.Confirmed)
        {
            try
            {
                var apiResult = await BundleService.RejectBundleRentalAsync(bundleRentalId, dialogResult.Reason ?? "Rejected by owner");
                
                if (apiResult.Success)
                {
                    Snackbar.Add("Bundle rental rejected.", Severity.Info);
                    await LoadBundleRentals();
                }
                else
                {
                    Snackbar.Add($"Error rejecting bundle rental: {apiResult.Message}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error rejecting bundle rental: {ex.Message}", Severity.Error);
            }
        }
    }

    // Helper methods for timeline visualization
    private Color GetTimelineColor(Rental rental, string step)
    {
        return step switch
        {
            "approval" => rental.Status switch
            {
                "Approved" => Color.Success,
                "Rejected" => Color.Error,
                "Cancelled" => Color.Secondary,
                _ => Color.Warning // Pending
            },
            "payment" => rental.Status switch
            {
                "Approved" when rental.IsPaid => Color.Success,
                "Approved" => Color.Warning,
                "PickedUp" or "Returned" => Color.Success,
                _ => Color.Default
            },
            "active" => rental.Status switch
            {
                "PickedUp" => Color.Primary,
                "Returned" => Color.Success,
                _ => Color.Default
            },
            _ => Color.Default
        };
    }

    private string GetTimelineIcon(Rental rental, string step)
    {
        return step switch
        {
            "approval" => rental.Status switch
            {
                "Approved" => Icons.Material.Filled.CheckCircle,
                "Rejected" => Icons.Material.Filled.Cancel,
                "Cancelled" => Icons.Material.Filled.Close,
                _ => Icons.Material.Filled.Schedule // Pending
            },
            "payment" => rental.Status switch
            {
                "Approved" when rental.IsPaid => Icons.Material.Filled.Payment,
                "Approved" => Icons.Material.Filled.Payment,
                "PickedUp" or "Returned" => Icons.Material.Filled.Payment,
                _ => Icons.Material.Filled.Payment
            },
            "active" => rental.Status switch
            {
                "PickedUp" => Icons.Material.Filled.Build,
                "Returned" => Icons.Material.Filled.AssignmentTurnedIn,
                _ => Icons.Material.Filled.Build
            },
            _ => Icons.Material.Filled.Circle
        };
    }

    private string GetTimelineText(Rental rental, string step)
    {
        return step switch
        {
            "approval" => rental.Status switch
            {
                "Approved" => "Approved",
                "Rejected" => "Declined",
                "Cancelled" => "Cancelled",
                _ => "Pending" // Pending
            },
            "payment" => rental.Status switch
            {
                "Approved" when rental.IsPaid => "Paid",
                "Approved" => "Pay",
                "PickedUp" or "Returned" => "Paid",
                _ => "Payment"
            },
            "active" => rental.Status switch
            {
                "PickedUp" => "Active",
                "Returned" => "Complete",
                _ => "Rental"
            },
            _ => "Step"
        };
    }

    private Rental? GetRentalById(string rentalId)
    {
        return renterRentals?.FirstOrDefault(r => r.Id == rentalId);
    }

    // New action methods
    private async Task RefreshRentalStatus(string rentalId)
    {
        try
        {
            await LoadRenterRentals();
            Snackbar.Add("Status refreshed", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error refreshing status: {ex.Message}", Severity.Error);
        }
    }

    private async Task ContactOwner(string ownerId, string toolName)
    {
        try
        {
            // Navigate to messaging or show contact dialog
            Navigation.NavigateTo($"/messages?user={ownerId}&subject=Regarding {toolName} rental");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error opening message: {ex.Message}", Severity.Error);
        }
    }

    // Smart status messaging methods
    private SmartStatusInfo GetSmartStatusInfo(Rental rental)
    {
        var daysSinceCreated = (DateTime.Now - rental.CreatedAt).Days;
        var hoursSinceCreated = (DateTime.Now - rental.CreatedAt).TotalHours;
        var paymentUrgencyHours = GetPaymentUrgencyHours(rental);
        
        return rental.Status switch
        {
            "Pending" => new SmartStatusInfo
            {
                Title = "Awaiting Response",
                Message = "The owner will review your request and respond via email.",
                SubMessage = hoursSinceCreated > 24 ? "Consider messaging the owner if urgent" : null,
                Icon = Icons.Material.Filled.Schedule,
                Severity = Severity.Info,
                ShowUrgency = hoursSinceCreated > 48,
                UrgencyText = hoursSinceCreated > 72 ? "3+ days" : "2+ days",
                UrgencyColor = Color.Warning,
                UrgencyIcon = Icons.Material.Filled.AccessTime,
                ShowAdditionalInfo = hoursSinceCreated > 24,
                AdditionalInfo = hoursSinceCreated > 72 
                    ? "This request has been pending for over 3 days. Consider contacting the owner directly."
                    : "Most owners respond within 24-48 hours."
            },
            "Approved" when !rental.IsPaid => new SmartStatusInfo
            {
                Title = "Payment Required",
                Message = "Your request was approved! Complete payment to confirm the rental.",
                SubMessage = "Payment secures your rental and notifies the owner",
                Icon = Icons.Material.Filled.Payment,
                Severity = Severity.Warning,
                ShowUrgency = hoursSinceCreated > paymentUrgencyHours,
                UrgencyText = "Urgent",
                UrgencyColor = Color.Error,
                UrgencyIcon = Icons.Material.Filled.Warning,
                ShowAdditionalInfo = true,
                AdditionalInfo = "Complete payment soon to avoid losing this rental opportunity."
            },
            "Approved" when rental.IsPaid => new SmartStatusInfo
            {
                Title = "Confirmed",
                Message = "Payment complete! The owner will contact you about pickup.",
                SubMessage = "Check your email for pickup instructions",
                Icon = Icons.Material.Filled.CheckCircle,
                Severity = Severity.Success,
                ShowAdditionalInfo = daysSinceCreated > 0,
                AdditionalInfo = "If you haven't heard from the owner within 24 hours, try messaging them directly."
            },
            "PickedUp" => new SmartStatusInfo
            {
                Title = "Active Rental",
                Message = "Tool is currently in your possession.",
                SubMessage = $"Return by {rental.EndDate:MMM dd, yyyy}",
                Icon = Icons.Material.Filled.Build,
                Severity = Severity.Info,
                ShowUrgency = rental.EndDate < DateTime.Now.AddDays(1),
                UrgencyText = rental.EndDate < DateTime.Now ? "Overdue" : "Due Soon",
                UrgencyColor = rental.EndDate < DateTime.Now ? Color.Error : Color.Warning,
                UrgencyIcon = Icons.Material.Filled.Warning
            },
            "Returned" => new SmartStatusInfo
            {
                Title = "Complete",
                Message = "Tool returned successfully.",
                SubMessage = "Thank you for using NeighborTools!",
                Icon = Icons.Material.Filled.AssignmentTurnedIn,
                Severity = Severity.Success
            },
            "Rejected" => new SmartStatusInfo
            {
                Title = "Request Declined",
                Message = "The owner was unable to approve your rental request.",
                SubMessage = "You can try requesting again later or browse other tools",
                Icon = Icons.Material.Filled.Cancel,
                Severity = Severity.Error
            },
            "Cancelled" => new SmartStatusInfo
            {
                Title = "Cancelled",
                Message = "This rental request was cancelled.",
                Icon = Icons.Material.Filled.Close,
                Severity = Severity.Normal
            },
            _ => new SmartStatusInfo
            {
                Title = "Unknown Status",
                Message = "Status information not available.",
                Icon = Icons.Material.Filled.Help,
                Severity = Severity.Normal
            }
        };
    }

    private Color GetEnhancedStatusColor(Rental rental)
    {
        var hoursSinceCreated = (DateTime.Now - rental.CreatedAt).TotalHours;
        var paymentUrgencyHours = GetPaymentUrgencyHours(rental);
        var isOverdue = rental.EndDate < DateTime.Now;
        var isDueSoon = rental.EndDate < DateTime.Now.AddDays(1);
        var isPaymentOverdue = !rental.IsPaid && hoursSinceCreated > paymentUrgencyHours;
        
        return rental.Status switch
        {
            "Pending" when hoursSinceCreated > 72 => Color.Warning,
            "Pending" => Color.Info,
            "Approved" when isPaymentOverdue => Color.Error,
            "Approved" when !rental.IsPaid => Color.Warning,
            "Approved" when rental.IsPaid => Color.Success,
            "PickedUp" when isOverdue => Color.Error,
            "PickedUp" when isDueSoon => Color.Warning,
            "PickedUp" => Color.Primary,
            "Returned" => Color.Success,
            "Rejected" => Color.Error,
            "Cancelled" => Color.Secondary,
            "Overdue" => Color.Error,
            _ => Color.Default
        };
    }

    private string GetStatusChipClass(Rental rental)
    {
        var hoursSinceCreated = (DateTime.Now - rental.CreatedAt).TotalHours;
        var paymentUrgencyHours = GetPaymentUrgencyHours(rental);
        var isOverdue = rental.EndDate < DateTime.Now;
        var isPaymentOverdue = !rental.IsPaid && hoursSinceCreated > paymentUrgencyHours;
        
        return rental.Status switch
        {
            "Approved" when isPaymentOverdue => "mud-chip-outlined",
            "PickedUp" when isOverdue => "mud-chip-filled",
            _ => ""
        };
    }

    private string GetStatusIcon(string status)
    {
        return status switch
        {
            "Pending" => Icons.Material.Filled.Schedule,
            "Approved" => Icons.Material.Filled.CheckCircle,
            "PickedUp" => Icons.Material.Filled.Build,
            "Returned" => Icons.Material.Filled.AssignmentTurnedIn,
            "Rejected" => Icons.Material.Filled.Cancel,
            "Cancelled" => Icons.Material.Filled.Close,
            "Overdue" => Icons.Material.Filled.Warning,
            _ => Icons.Material.Filled.Circle
        };
    }

    private string GetSmartStatusLabel(Rental rental)
    {
        var hoursSinceCreated = (DateTime.Now - rental.CreatedAt).TotalHours;
        var isOverdue = rental.EndDate < DateTime.Now;
        var isDueSoon = rental.EndDate < DateTime.Now.AddDays(1);
        
        return rental.Status switch
        {
            "Pending" when hoursSinceCreated > 72 => "Pending (3+ days)",
            "Pending" when hoursSinceCreated > 48 => "Pending (2+ days)",
            "Approved" when !rental.IsPaid => "Payment Due",
            "Approved" when rental.IsPaid => "Confirmed",
            "PickedUp" when isOverdue => "Overdue",
            "PickedUp" when isDueSoon => "Due Soon",
            _ => rental.Status
        };
    }

    private bool IsUrgentStatus(Rental rental)
    {
        var hoursSinceCreated = (DateTime.Now - rental.CreatedAt).TotalHours;
        var paymentUrgencyHours = GetPaymentUrgencyHours(rental);
        var isDueSoon = rental.EndDate < DateTime.Now.AddDays(1);
        var isPaymentOverdue = !rental.IsPaid && hoursSinceCreated > paymentUrgencyHours;
        
        return rental.Status switch
        {
            "Pending" when hoursSinceCreated > 48 => true,
            "Approved" when isPaymentOverdue => true,
            "PickedUp" when isDueSoon => true,
            _ => false
        };
    }

    private string GetUrgencyLabel(Rental rental)
    {
        var hoursSinceCreated = (DateTime.Now - rental.CreatedAt).TotalHours;
        var isOverdue = rental.EndDate < DateTime.Now;
        
        return rental.Status switch
        {
            "Pending" when hoursSinceCreated > 72 => "3+ days",
            "Pending" => "2+ days",
            "Approved" when !rental.IsPaid => "Payment Due",
            "PickedUp" when isOverdue => "Overdue",
            "PickedUp" => "Due Soon",
            _ => "Urgent"
        };
    }

    private string GetTimeAgoText(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;
        
        if (timeSpan.TotalDays < 1 && timeSpan.TotalHours < 1)
        {
            return $"{(int)timeSpan.TotalMinutes}m ago";
        }
        if (timeSpan.TotalDays < 1)
        {
            return $"{(int)timeSpan.TotalHours}h ago";
        }
        if (timeSpan.TotalDays < 2)
        {
            return "1 day ago";
        }
        if (timeSpan.TotalDays < 7)
        {
            return $"{(int)timeSpan.TotalDays} days ago";
        }
        return dateTime.ToString("MMM dd");
    }

    private string GetApprovalTimeText(Rental rental)
    {
        // This would need to be enhanced to track actual approval time
        // For now, estimate based on when it might have been approved
        return "Recently approved";
    }

    private double GetPaymentUrgencyHours(Rental rental)
    {
        // Payment becomes urgent after 24 hours for most rentals
        // But if the rental start date is soon, it becomes urgent sooner
        var hoursUntilStart = (rental.StartDate - DateTime.Now).TotalHours;
        
        return Math.Min(24, Math.Max(2, hoursUntilStart / 2));
    }

    // Reminder functionality methods
    private bool ShouldShowReminder(Rental rental)
    {
        if (rental.Status != "Pending") return false;
        
        var hoursSinceCreated = (DateTime.Now - rental.CreatedAt).TotalHours;
        return hoursSinceCreated > 24; // Show reminder after 24 hours
    }

    private async Task ShowReminderDialog(Rental rental)
    {
        var hoursSinceCreated = (DateTime.Now - rental.CreatedAt).TotalHours;
        var reminderInfo = GetReminderInfo(rental, hoursSinceCreated);
        
        var parameters = new DialogParameters
        {
            { "Title", "Need Help with Your Request?" },
            { "ReminderInfo", reminderInfo },
            { "OwnerName", rental.OwnerName },
            { "ToolName", rental.ToolName },
            { "OwnerId", rental.OwnerId },
            { "RentalId", rental.Id }
        };
        
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        
        var dialog = DialogService.Show<RentalReminderDialog>("Rental Request Help", parameters, options);
        await dialog.Result;
    }

    private ReminderInfo GetReminderInfo(Rental rental, double hoursSinceCreated)
    {
        if (hoursSinceCreated > 72)
        {
            return new ReminderInfo
            {
                Title = "Your request has been pending for over 3 days",
                Message = "This is longer than typical response times.",
                Suggestions = new List<string>
                {
                    "Send a polite follow-up message to the owner",
                    "Check if the owner is still active on the platform",
                    "Consider looking for alternative tools",
                    "Set a deadline for when to cancel if no response"
                },
                PrimaryAction = "Message Owner",
                SecondaryAction = "Browse Similar Tools",
                Icon = Icons.Material.Filled.Schedule,
                Color = Color.Warning
            };
        }
        
        if (hoursSinceCreated > 48)
        {
            return new ReminderInfo
            {
                Title = "Your request has been pending for 2+ days",
                Message = "Most owners respond within 24-48 hours.",
                Suggestions = new List<string>
                {
                    "The owner might be busy - be patient",
                    "Check your email for any missed responses",
                    "Consider sending a friendly message",
                    "Look at the owner's profile for response patterns"
                },
                PrimaryAction = "Wait Another Day",
                SecondaryAction = "Send Message",
                Icon = Icons.Material.Filled.HourglassEmpty,
                Color = Color.Info
            };
        }
        
        return new ReminderInfo
        {
            Title = "Your request is still pending",
            Message = "Most owners respond within 24-48 hours.",
            Suggestions = new List<string>
            {
                "Be patient - owners often need time to consider requests",
                "Check your email spam folder for responses",
                "Make sure your request details are complete",
                "Consider the timing (weekends may have slower responses)"
            },
            PrimaryAction = "Wait Longer",
            SecondaryAction = "Review Request",
            Icon = Icons.Material.Filled.Schedule,
            Color = Color.Info
        };
    }

    // Enhanced filtering methods
    private int GetPendingCount()
    {
        return renterRentals?.Count(r => r.Status == "Pending") ?? 0;
    }

    private int GetApprovedCount()
    {
        return renterRentals?.Count(r => r.Status == "Approved") ?? 0;
    }

    private int GetActiveCount()
    {
        return renterRentals?.Count(r => r.Status == "PickedUp") ?? 0;
    }

    private int GetUrgentCount()
    {
        return renterRentals?.Count(r => IsUrgentStatus(r)) ?? 0;
    }

    private void SetQuickFilter(string filter)
    {
        selectedRenterQuickFilter = selectedRenterQuickFilter == filter ? string.Empty : filter;
        selectedRenterStatus = string.Empty; // Clear status filter when using quick filter
        StateHasChanged();
    }

    private bool HasActiveFilters()
    {
        return !string.IsNullOrEmpty(selectedRenterStatus) || 
               !string.IsNullOrEmpty(selectedRenterQuickFilter) || 
               selectedRenterSort != "newest";
    }

    private void ClearAllFilters()
    {
        selectedRenterStatus = string.Empty;
        selectedRenterQuickFilter = string.Empty;
        selectedRenterSort = "newest";
        StateHasChanged();
    }


}