@page "/favorites"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using frontend.Services
@using frontend.Models
@using MudBlazor
@inject FavoritesService FavoritesService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize]

<PageTitle>My Favorites - NeighborTools</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudStack Spacing="4">
        <!-- Header -->
        <MudPaper Elevation="2" Class="pa-4">
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.h4" Color="Color.Primary">
                        <MudIcon Icon="@Icons.Material.Filled.Favorite" Class="mr-2" />
                        My Favorites
                    </MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
                        Tools you've saved for later
                    </MudText>
                </MudStack>
                
                @if (favorites.Any())
                {
                    <MudChip T="string" Color="Color.Primary" Variant="Variant.Text">
                        @favorites.Count @(favorites.Count == 1 ? "favorite" : "favorites")
                    </MudChip>
                }
            </MudStack>
        </MudPaper>

        <!-- Loading state -->
        @if (isLoading)
        {
            <MudPaper Elevation="1" Class="pa-8">
                <MudStack AlignItems="AlignItems.Center" Spacing="3">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    <MudText Typo="Typo.subtitle1">Loading your favorites...</MudText>
                </MudStack>
            </MudPaper>
        }

        <!-- Empty state -->
        @if (!isLoading && !favorites.Any())
        {
            <MudPaper Elevation="1" Class="pa-8">
                <MudStack AlignItems="AlignItems.Center" Spacing="4">
                    <MudIcon Icon="@Icons.Material.Outlined.FavoriteBorder" Style="font-size: 4rem;" Color="Color.Secondary" />
                    <MudStack AlignItems="AlignItems.Center" Spacing="2">
                        <MudText Typo="Typo.h5" Color="Color.Secondary">No favorites yet</MudText>
                        <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                            Start exploring tools and save your favorites for quick access later.
                        </MudText>
                    </MudStack>
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Search"
                              OnClick="@(() => Navigation.NavigateTo("/tools"))">
                        Browse Tools
                    </MudButton>
                </MudStack>
            </MudPaper>
        }

        <!-- Favorites grid -->
        @if (!isLoading && favorites.Any())
        {
            <MudGrid Spacing="3">
                @foreach (var favorite in favorites)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard Elevation="2" Class="h-100">
                            <!-- Tool Image -->
                            <MudCardMedia Image="@GetToolImage(favorite)" Height="200" />
                            
                            <!-- Card Content -->
                            <MudCardContent Class="pb-2">
                                <MudStack Spacing="2">
                                    <!-- Tool Name and Category -->
                                    <MudStack Spacing="1">
                                        <MudText Typo="Typo.h6" Color="Color.Primary" Class="text-truncate">
                                            @favorite.ToolName
                                        </MudText>
                                        <MudChip T="string" Size="Size.Small" 
                                                Color="Color.Secondary" 
                                                Variant="Variant.Text"
                                                Class="pa-1">
                                            @favorite.ToolCategory
                                        </MudChip>
                                    </MudStack>

                                    <!-- Description -->
                                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="tool-description">
                                        @GetTruncatedDescription(favorite.ToolDescription)
                                    </MudText>

                                    <!-- Pricing and Availability -->
                                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                                            <strong>$@favorite.DailyRate.ToString("0.00")/day</strong>
                                        </MudText>
                                        <MudChip T="string" Size="Size.Small" 
                                                Color="@(favorite.IsToolAvailable ? Color.Success : Color.Warning)"
                                                Variant="Variant.Text">
                                            @(favorite.IsToolAvailable ? "Available" : "Busy")
                                        </MudChip>
                                    </MudStack>

                                    <!-- Location and Owner -->
                                    <MudStack Spacing="1">
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                            @favorite.ToolLocation
                                        </MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" />
                                            @favorite.OwnerName
                                        </MudText>
                                    </MudStack>

                                    <!-- Added Date -->
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" />
                                        Added @favorite.CreatedAt.ToString("MMM dd, yyyy")
                                    </MudText>
                                </MudStack>
                            </MudCardContent>

                            <!-- Card Actions -->
                            <MudCardActions Class="pt-0">
                                <MudStack Row Justify="Justify.SpaceBetween" Class="w-100">
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Primary"
                                              StartIcon="@Icons.Material.Filled.Visibility"
                                              OnClick="@(() => ViewTool(favorite.ToolId))">
                                        View Details
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Error"
                                              StartIcon="@Icons.Material.Filled.FavoriteBorder"
                                              OnClick="@(() => RemoveFromFavorites(favorite.Id))"
                                              Disabled="@isRemovingFavorite">
                                        Remove
                                    </MudButton>
                                </MudStack>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
    </MudStack>
</MudContainer>

<style>
    .tool-description {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        line-height: 1.4;
        max-height: 2.8em;
    }
</style>

@code {
    private List<FavoriteDto> favorites = new();
    private bool isLoading = true;
    private bool isRemovingFavorite = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadFavorites();
    }

    private async Task LoadFavorites()
    {
        isLoading = true;
        try
        {
            var response = await FavoritesService.GetUserFavoritesAsync();
            if (response.Success && response.Data != null)
            {
                favorites = response.Data;
            }
            else
            {
                Snackbar.Add(response.Message ?? "Failed to load favorites", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while loading favorites", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RemoveFromFavorites(string favoriteId)
    {
        if (isRemovingFavorite) return;

        isRemovingFavorite = true;
        try
        {
            if (Guid.TryParse(favoriteId, out var guid))
            {
                var response = await FavoritesService.RemoveFromFavoritesByIdAsync(guid);
                if (response.Success)
                {
                    favorites.RemoveAll(f => f.Id == favoriteId);
                    Snackbar.Add("Removed from favorites", Severity.Success);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add(response.Message ?? "Failed to remove from favorites", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Invalid favorite ID", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while removing from favorites", Severity.Error);
        }
        finally
        {
            isRemovingFavorite = false;
        }
    }

    private void ViewTool(string toolId)
    {
        Navigation.NavigateTo($"/tools/{toolId}");
    }

    private string GetToolImage(FavoriteDto favorite)
    {
        return favorite.ToolImageUrls?.FirstOrDefault() ?? "/images/placeholder-tool.jpg";
    }

    private string GetTruncatedDescription(string description)
    {
        if (string.IsNullOrEmpty(description) || description.Length <= 100)
            return description;

        return description.Substring(0, 97) + "...";
    }
}