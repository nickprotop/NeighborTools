@page "/favorites"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using frontend.Services
@using frontend.Models
@using MudBlazor
@using ToolsSharing.Frontend.Services
@using System.Reflection
@inject FavoritesService FavoritesService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IUrlService UrlService
@attribute [Authorize]

<PageTitle>My Favorites - NeighborTools</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudStack Spacing="4">
        <!-- Header -->
        <MudPaper Elevation="2" Class="pa-4">
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.h4" Color="Color.Primary">
                        <MudIcon Icon="@Icons.Material.Filled.Favorite" Class="mr-2" />
                        My Favorites
                    </MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
                        Tools and bundles you've saved for later
                    </MudText>
                </MudStack>
                
                @if (favorites.Any())
                {
                    <MudChip T="string" Color="Color.Primary" Variant="Variant.Text">
                        @favorites.Count @(favorites.Count == 1 ? "favorite" : "favorites")
                    </MudChip>
                }
            </MudStack>
        </MudPaper>

        <!-- Loading state -->
        @if (isLoading)
        {
            <MudPaper Elevation="1" Class="pa-8">
                <MudStack AlignItems="AlignItems.Center" Spacing="3">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    <MudText Typo="Typo.subtitle1">Loading your favorites...</MudText>
                </MudStack>
            </MudPaper>
        }

        <!-- Empty state -->
        @if (!isLoading && !favorites.Any())
        {
            <MudPaper Elevation="1" Class="pa-8">
                <MudStack AlignItems="AlignItems.Center" Spacing="4">
                    <MudIcon Icon="@Icons.Material.Outlined.FavoriteBorder" Style="font-size: 4rem;" Color="Color.Secondary" />
                    <MudStack AlignItems="AlignItems.Center" Spacing="2">
                        <MudText Typo="Typo.h5" Color="Color.Secondary">No favorites yet</MudText>
                        <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                            Start exploring tools and bundles to save your favorites for quick access later.
                        </MudText>
                    </MudStack>
                    <MudStack Row Spacing="2">
                        <MudButton Variant="Variant.Filled" 
                                  Color="Color.Primary" 
                                  StartIcon="@Icons.Material.Filled.Search"
                                  OnClick="@(() => Navigation.NavigateTo("/tools"))">
                            Browse Tools
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" 
                                  Color="Color.Primary" 
                                  StartIcon="@Icons.Material.Filled.Inventory"
                                  OnClick="@(() => Navigation.NavigateTo("/bundles"))">
                            Browse Bundles
                        </MudButton>
                    </MudStack>
                </MudStack>
            </MudPaper>
        }

        <!-- Favorites grid -->
        @if (!isLoading && favorites.Any())
        {
            <MudGrid Spacing="3">
                @foreach (var favorite in favorites)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard Elevation="2" Class="h-100">
                            <!-- Item Image -->
                            @{
                                var imageUrl = GetItemImageUrl(favorite);
                                var hasValidImage = !string.IsNullOrEmpty(imageUrl);
                            }
                            <div style="position: relative; height: 200px;">
                                @if (hasValidImage)
                                {
                                    <img src="@imageUrl" 
                                         style="width: 100%; height: 200px; object-fit: cover; @(GetImageLoadError(favorite.Id) ? "display: none;" : "")" 
                                         class="favorite-image"
                                         @onerror="@(() => HandleImageError(favorite.Id))" 
                                         @onload="@(() => HandleImageLoad(favorite.Id))" />
                                }
                                
                                @if (!hasValidImage || GetImageLoadError(favorite.Id))
                                {
                                    <ThemeAwarePlaceholder Height="200px" 
                                                          Icon="@(favorite.FavoriteType == "Tool" ? Icons.Material.Filled.Build : Icons.Material.Filled.Inventory)" 
                                                          IconSize="Size.Large"
                                                          IconFontSize="3rem"
                                                          AdditionalClass="favorite-image" />
                                }
                            </div>
                            
                            <!-- Card Content -->
                            <MudCardContent Class="pb-2">
                                <MudStack Spacing="2">
                                    <!-- Item Type Badge -->
                                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                                        <MudChip T="string" Size="Size.Small" 
                                                Color="@(favorite.FavoriteType == "Tool" ? Color.Primary : Color.Secondary)" 
                                                Variant="Variant.Filled"
                                                Icon="@(favorite.FavoriteType == "Tool" ? Icons.Material.Filled.Build : Icons.Material.Filled.Inventory)"
                                                Class="pa-1">
                                            @favorite.FavoriteType
                                        </MudChip>
                                    </MudStack>

                                    <!-- Item Name and Category -->
                                    <MudStack Spacing="1">
                                        <MudText Typo="Typo.h6" Color="Color.Primary" Class="text-truncate">
                                            @GetItemName(favorite)
                                        </MudText>
                                        <MudChip T="string" Size="Size.Small" 
                                                Color="Color.Secondary" 
                                                Variant="Variant.Text"
                                                Class="pa-1">
                                            @GetItemCategory(favorite)
                                        </MudChip>
                                    </MudStack>

                                    <!-- Description -->
                                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="item-description">
                                        @GetTruncatedDescription(GetItemDescription(favorite))
                                    </MudText>

                                    <!-- Pricing and Availability -->
                                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                                            <strong>@GetItemPricing(favorite)</strong>
                                        </MudText>
                                        <MudChip T="string" Size="Size.Small" 
                                                Color="@(GetItemAvailability(favorite) ? Color.Success : (favorite.FavoriteType == "Tool" ? Color.Warning : Color.Error))"
                                                Variant="Variant.Text">
                                            @(GetItemAvailability(favorite) ? "Available" : (favorite.FavoriteType == "Tool" ? "Busy" : "Currently Unavailable"))
                                        </MudChip>
                                    </MudStack>

                                    <!-- Additional Info -->
                                    @if (favorite.FavoriteType == "Tool")
                                    {
                                        <MudStack Spacing="1">
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                                @favorite.ToolLocation
                                            </MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" />
                                                @favorite.OwnerName
                                            </MudText>
                                        </MudStack>
                                    }
                                    else
                                    {
                                        <MudStack Spacing="1">
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Small" />
                                                @favorite.BundleToolCount tools included
                                            </MudText>
                                            @if (!string.IsNullOrEmpty(GetBundleLocation(favorite)))
                                            {
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                                    @GetBundleLocation(favorite)
                                                </MudText>
                                            }
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" />
                                                @favorite.OwnerName
                                            </MudText>
                                        </MudStack>
                                    }

                                    <!-- Added Date -->
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" />
                                        Added @favorite.CreatedAt.ToString("MMM dd, yyyy")
                                    </MudText>
                                </MudStack>
                            </MudCardContent>

                            <!-- Card Actions -->
                            <MudCardActions Class="pt-0">
                                <MudStack Row Justify="Justify.SpaceBetween" Class="w-100">
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Primary"
                                              StartIcon="@Icons.Material.Filled.Visibility"
                                              OnClick="@(() => ViewItem(favorite))">
                                        View Details
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Error"
                                              StartIcon="@Icons.Material.Filled.FavoriteBorder"
                                              OnClick="@(() => RemoveFromFavorites(favorite.Id))"
                                              Disabled="@isRemovingFavorite">
                                        Remove
                                    </MudButton>
                                </MudStack>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
    </MudStack>
</MudContainer>

<style>
    .item-description {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        line-height: 1.4;
        max-height: 2.8em;
    }
    
    .favorite-image {
        background: linear-gradient(45deg, #f5f5f5 0%, #e0e0e0 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }
</style>

@code {
    private List<FavoriteDto> favorites = new();
    private bool isLoading = true;
    private bool isRemovingFavorite = false;
    private Dictionary<string, bool> imageLoadErrors = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadFavorites();
    }

    private async Task LoadFavorites()
    {
        isLoading = true;
        try
        {
            var response = await FavoritesService.GetUserFavoritesAsync();
            if (response.Success && response.Data != null)
            {
                favorites = response.Data;
            }
            else
            {
                Snackbar.Add(response.Message ?? "Failed to load favorites", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while loading favorites", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RemoveFromFavorites(string favoriteId)
    {
        if (isRemovingFavorite) return;

        isRemovingFavorite = true;
        try
        {
            if (Guid.TryParse(favoriteId, out var guid))
            {
                var response = await FavoritesService.RemoveFromFavoritesByIdAsync(guid);
                if (response.Success)
                {
                    favorites.RemoveAll(f => f.Id == favoriteId);
                    Snackbar.Add("Removed from favorites", Severity.Success);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add(response.Message ?? "Failed to remove from favorites", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Invalid favorite ID", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while removing from favorites", Severity.Error);
        }
        finally
        {
            isRemovingFavorite = false;
        }
    }

    private void ViewItem(FavoriteDto favorite)
    {
        if (favorite.FavoriteType == "Tool" && !string.IsNullOrEmpty(favorite.ToolId))
        {
            Navigation.NavigateTo($"/tools/{favorite.ToolId}");
        }
        else if (favorite.FavoriteType == "Bundle" && !string.IsNullOrEmpty(favorite.BundleId))
        {
            Navigation.NavigateTo($"/bundles/{favorite.BundleId}");
        }
    }

    private string GetItemImageUrl(FavoriteDto favorite)
    {
        if (favorite.FavoriteType == "Tool")
        {
            var imageUrl = favorite.ToolImageUrls?.FirstOrDefault();
            return !string.IsNullOrEmpty(imageUrl) ? UrlService.GetFileUrl(imageUrl) : string.Empty;
        }
        else
        {
            return !string.IsNullOrEmpty(favorite.BundleImageUrl) ? UrlService.GetFileUrl(favorite.BundleImageUrl) : string.Empty;
        }
    }

    private string GetItemName(FavoriteDto favorite)
    {
        return favorite.FavoriteType == "Tool" ? favorite.ToolName : favorite.BundleName;
    }

    private string GetItemCategory(FavoriteDto favorite)
    {
        return favorite.FavoriteType == "Tool" ? favorite.ToolCategory : favorite.BundleCategory;
    }

    private string GetItemDescription(FavoriteDto favorite)
    {
        return favorite.FavoriteType == "Tool" ? favorite.ToolDescription : favorite.BundleDescription;
    }

    private string GetItemPricing(FavoriteDto favorite)
    {
        if (favorite.FavoriteType == "Tool")
        {
            return $"${favorite.DailyRate:0.00}/day";
        }
        else
        {
            return $"${favorite.BundleDiscountedCost:0.00}/day";
        }
    }

    private bool GetItemAvailability(FavoriteDto favorite)
    {
        return favorite.FavoriteType == "Tool" ? favorite.IsToolAvailable : favorite.IsBundleAvailable;
    }

    private string GetTruncatedDescription(string description)
    {
        if (string.IsNullOrEmpty(description) || description.Length <= 100)
            return description;

        return description.Substring(0, 97) + "...";
    }
    
    private bool GetImageLoadError(string favoriteId)
    {
        return imageLoadErrors.GetValueOrDefault(favoriteId, false);
    }

    private string GetBundleLocation(FavoriteDto favorite)
    {
        // Use bundle location if available, otherwise fall back to owner location
        // Using reflection to access BundleLocation since compiler isn't recognizing it
        var bundleLocationProp = typeof(ToolsSharing.Core.DTOs.FavoriteDto).GetProperty("BundleLocation");
        if (bundleLocationProp != null)
        {
            var bundleLocation = bundleLocationProp.GetValue(favorite) as string;
            return !string.IsNullOrEmpty(bundleLocation) ? bundleLocation : string.Empty;
        }
        return string.Empty;
    }
    
    private void HandleImageError(string favoriteId)
    {
        imageLoadErrors[favoriteId] = true;
        StateHasChanged();
    }
    
    private void HandleImageLoad(string favoriteId)
    {
        imageLoadErrors[favoriteId] = false;
        StateHasChanged();
    }
}