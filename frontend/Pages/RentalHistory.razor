@page "/rentals/history"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Rental History - NeighborTools</PageTitle>

<!-- Header Section -->
<div class="d-flex flex-column flex-sm-row justify-space-between align-center mb-6 gap-4">
    <div>
        <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">
            <MudIcon Icon="Icons.Material.Filled.History" Class="mr-2" />
            Rental History
        </MudText>
        <MudText Typo="Typo.body1" Color="Color.Secondary">
            Review your past rentals and experiences
        </MudText>
    </div>
    
    <div class="d-flex gap-2">
        <MudButton Variant="Variant.Outlined" 
                   Color="Color.Primary" 
                   StartIcon="Icons.Material.Filled.CalendarToday"
                   Href="/rentals">
            Current Rentals
        </MudButton>
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="Icons.Material.Filled.Search"
                   Href="/tools">
            Browse Tools
        </MudButton>
    </div>
</div>

<!-- Filter and Search -->
<MudExpansionPanels Elevation="2" Class="mb-4">
    <MudExpansionPanel Text="Filters">
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect @bind-Value="selectedYear" Label="Year" Variant="Variant.Outlined" Clearable="true">
                    <MudSelectItem T="int?" Value="@null">All Years</MudSelectItem>
                    <MudSelectItem T="int?" Value="2024">2024</MudSelectItem>
                    <MudSelectItem T="int?" Value="2023">2023</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect @bind-Value="selectedStatus" Label="Status" Variant="Variant.Outlined" Clearable="true">
                    <MudSelectItem T="string" Value="@string.Empty">All Status</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Completed")">Completed</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Cancelled")">Cancelled</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect @bind-Value="selectedRole" Label="Role" Variant="Variant.Outlined" Clearable="true">
                    <MudSelectItem T="string" Value="@string.Empty">All Roles</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Renter")">As Renter</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Owner")">As Owner</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3" Class="d-flex align-center">
                <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="ClearFilters" StartIcon="Icons.Material.Filled.Clear">
                    Clear Filters
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudExpansionPanel>
</MudExpansionPanels>

<!-- Summary Stats -->
<MudGrid Class="mb-6">
    <MudItem xs="12" sm="6" md="3">
        <MudCard Elevation="4" Style="border-radius: 12px;">
            <MudCardContent Class="text-center">
                <MudIcon Icon="Icons.Material.Filled.CheckCircle" Size="Size.Large" Color="Color.Success" Class="mb-2" />
                <MudText Typo="Typo.h4" Color="Color.Success">15</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">Completed Rentals</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudCard Elevation="4" Style="border-radius: 12px;">
            <MudCardContent Class="text-center">
                <MudIcon Icon="Icons.Material.Filled.AttachMoney" Size="Size.Large" Color="Color.Primary" Class="mb-2" />
                <MudText Typo="Typo.h4" Color="Color.Primary">$1,245</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">Total Spent</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudCard Elevation="4" Style="border-radius: 12px;">
            <MudCardContent Class="text-center">
                <MudIcon Icon="Icons.Material.Filled.MonetizationOn" Size="Size.Large" Color="Color.Info" Class="mb-2" />
                <MudText Typo="Typo.h4" Color="Color.Info">$892</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">Total Earned</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudCard Elevation="4" Style="border-radius: 12px;">
            <MudCardContent Class="text-center">
                <MudIcon Icon="Icons.Material.Filled.Star" Size="Size.Large" Color="Color.Warning" Class="mb-2" />
                <MudText Typo="Typo.h4" Color="Color.Warning">4.8</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">Average Rating</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<!-- Rental History List -->
<MudPaper Elevation="4" Style="border-radius: 12px;">
    <MudTable Items="@GetFilteredHistory()" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Tool</MudTh>
            <MudTh>Dates</MudTh>
            <MudTh>Partner</MudTh>
            <MudTh>Role</MudTh>
            <MudTh>Amount</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Rating</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <div class="d-flex align-center gap-3">
                    <MudAvatar Color="Color.Primary" Size="Size.Medium">
                        <MudIcon Icon="Icons.Material.Filled.Build" />
                    </MudAvatar>
                    <div>
                        <MudText Typo="Typo.body1">@context.ToolName</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary">@context.Category</MudText>
                    </div>
                </div>
            </MudTd>
            <MudTd>
                <div>
                    <MudText Typo="Typo.body2">@context.StartDate.ToString("MMM dd, yyyy")</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Secondary">to @context.EndDate.ToString("MMM dd, yyyy")</MudText>
                </div>
            </MudTd>
            <MudTd>
                <div class="d-flex align-center gap-2">
                    <MudAvatar Color="Color.Secondary" Size="Size.Small">
                        @context.PartnerName.Substring(0, 1)
                    </MudAvatar>
                    <MudText Typo="Typo.body2">@context.PartnerName</MudText>
                </div>
            </MudTd>
            <MudTd>
                <MudChip T="string" Color="@(context.IsOwner ? Color.Info : Color.Success)" Size="Size.Small">
                    @(context.IsOwner ? "Owner" : "Renter")
                </MudChip>
            </MudTd>
            <MudTd>
                <MudText Typo="Typo.body1" Color="Color.Primary">$@context.TotalAmount.ToString("F2")</MudText>
            </MudTd>
            <MudTd>
                <MudChip T="string" Color="@GetStatusColor(context.Status)" Size="Size.Small">
                    @context.Status
                </MudChip>
            </MudTd>
            <MudTd>
                @if (context.Rating.HasValue)
                {
                    <div class="d-flex align-center gap-1">
                        <MudRating ReadOnly="true" SelectedValue="@context.Rating.Value" MaxValue="5" Size="Size.Small" />
                        <MudText Typo="Typo.caption">(@context.Rating.Value)</MudText>
                    </div>
                }
                else
                {
                    <MudText Typo="Typo.caption" Color="Color.Secondary">Not rated</MudText>
                }
            </MudTd>
            <MudTd>
                <MudMenu Icon="Icons.Material.Filled.MoreVert" Size="Size.Small">
                    <MudMenuItem Icon="Icons.Material.Filled.Visibility" OnClick="@(() => ViewDetails(context.Id))">
                        View Details
                    </MudMenuItem>
                    @if (!context.Rating.HasValue && context.Status == "Completed")
                    {
                        <MudMenuItem Icon="Icons.Material.Filled.Star" OnClick="@(() => AddReview(context.Id))">
                            Add Review
                        </MudMenuItem>
                    }
                    <MudMenuItem Icon="Icons.Material.Filled.Receipt" OnClick="@(() => DownloadReceipt(context.Id))">
                        Download Receipt
                    </MudMenuItem>
                </MudMenu>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudPaper>

@code {
    private int? selectedYear = null;
    private string selectedStatus = string.Empty;
    private string selectedRole = string.Empty;

    public class RentalHistoryItem
    {
        public Guid Id { get; set; }
        public string ToolName { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
        public string PartnerName { get; set; } = string.Empty;
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public decimal TotalAmount { get; set; }
        public string Status { get; set; } = string.Empty;
        public bool IsOwner { get; set; }
        public int? Rating { get; set; }
    }

    private List<RentalHistoryItem> GetAllHistory()
    {
        return new List<RentalHistoryItem>
        {
            new RentalHistoryItem
            {
                Id = Guid.NewGuid(),
                ToolName = "Circular Saw",
                Category = "Power Tools",
                PartnerName = "Bob Wilson",
                StartDate = new DateTime(2024, 1, 15),
                EndDate = new DateTime(2024, 1, 17),
                TotalAmount = 75.00m,
                Status = "Completed",
                IsOwner = false,
                Rating = 5
            },
            new RentalHistoryItem
            {
                Id = Guid.NewGuid(),
                ToolName = "Pressure Washer",
                Category = "Cleaning",
                PartnerName = "Alice Johnson",
                StartDate = new DateTime(2024, 2, 10),
                EndDate = new DateTime(2024, 2, 12),
                TotalAmount = 120.00m,
                Status = "Completed",
                IsOwner = true,
                Rating = 4
            },
            new RentalHistoryItem
            {
                Id = Guid.NewGuid(),
                ToolName = "Hedge Trimmer",
                Category = "Garden Tools",
                PartnerName = "Charlie Brown",
                StartDate = new DateTime(2024, 3, 5),
                EndDate = new DateTime(2024, 3, 6),
                TotalAmount = 35.00m,
                Status = "Cancelled",
                IsOwner = false,
                Rating = null
            }
        };
    }

    private IEnumerable<RentalHistoryItem> GetFilteredHistory()
    {
        var history = GetAllHistory();

        if (selectedYear.HasValue)
            history = history.Where(h => h.StartDate.Year == selectedYear.Value).ToList();

        if (!string.IsNullOrEmpty(selectedStatus))
            history = history.Where(h => h.Status == selectedStatus).ToList();

        if (!string.IsNullOrEmpty(selectedRole))
        {
            if (selectedRole == "Owner")
                history = history.Where(h => h.IsOwner).ToList();
            else if (selectedRole == "Renter")
                history = history.Where(h => !h.IsOwner).ToList();
        }

        return history.OrderByDescending(h => h.StartDate);
    }

    private void ClearFilters()
    {
        selectedYear = null;
        selectedStatus = string.Empty;
        selectedRole = string.Empty;
    }

    private Color GetStatusColor(string status)
    {
        return status switch
        {
            "Completed" => Color.Success,
            "Cancelled" => Color.Error,
            _ => Color.Default
        };
    }

    private void ViewDetails(Guid rentalId)
    {
        Snackbar.Add("Rental details feature coming soon!", Severity.Info);
    }

    private void AddReview(Guid rentalId)
    {
        Snackbar.Add("Add review feature coming soon!", Severity.Info);
    }

    private void DownloadReceipt(Guid rentalId)
    {
        Snackbar.Add("Receipt download feature coming soon!", Severity.Info);
    }
}