@page "/my-rentals"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@using frontend.Components
@using frontend.Shared
@using ToolsSharing.Frontend.Models
@using ToolsSharing.Frontend.Services
@inject IRentalService RentalService
@inject BundleService BundleService
@inject IPaymentService PaymentService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IUrlService UrlService
@attribute [Authorize]

<PageTitle>My Rentals - NeighborTools</PageTitle>

<!-- Overdue Rental Alerts -->
<OverdueRentalAlertComponent ShowDetails="true" 
                           ShowActions="true" 
                           ShowOverdueProgress="true"
                           AutoRefresh="true" 
                           Class="mb-4" />

<!-- Header Section -->
<div class="d-flex flex-column flex-sm-row justify-space-between align-center mb-6 gap-4">
    <div>
        <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">
            <MudIcon Icon="@Icons.Material.Filled.Assignment" Class="mr-2" />
            My Rentals
        </MudText>
        <MudText Typo="Typo.body1" Color="Color.Secondary">
            Track your rental requests and manage your tool rentals
        </MudText>
    </div>
</div>

<!-- Tabs for different rental types -->
<MudTabs Elevation="4" Rounded="true" PanelClass="pa-6" @bind-ActivePanelIndex="activeTab">
    <MudTabPanel Text="My Requests" Icon="@Icons.Material.Filled.ShoppingCart">
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.h6">Tools I'm Renting</MudText>
            <div class="d-flex justify-end">
                <MudSelect T="string" @bind-Value="selectedRenterStatus" Label="Status Filter" Variant="Variant.Outlined" Dense="true" Style="width: fit-content;">
                    <MudSelectItem T="string" Value="@string.Empty">All Status</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Pending")">Pending</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Approved")">Approved</MudSelectItem>
                    <MudSelectItem T="string" Value="@("PickedUp")">Picked Up</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Returned")">Returned</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Rejected")">Rejected</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Cancelled")">Cancelled</MudSelectItem>
                </MudSelect>
            </div>
        </div>
        
        @if (isLoadingRenterRentals)
        {
            <div class="text-center pa-8">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                <MudText Typo="Typo.h6" Class="mt-4">Loading rental requests...</MudText>
            </div>
        }
        else if (renterRentals?.Any() == true)
        {
            <MudGrid>
                @foreach (var rental in GetFilteredRenterRentals())
                {
                    <MudItem xs="12" md="6" lg="4">
                        <MudCard Elevation="4" Style="height: 100%; border-radius: 12px;">
                            @if (rental.Tool?.ImageUrls.Any() == true)
                            {
                                <MudCardMedia Image="@UrlService.GetFileUrl(rental.Tool.ImageUrls.First())" Height="200" Style="border-radius: 12px 12px 0 0;" />
                            }
                            else
                            {
                                <div class="d-flex align-center justify-center mud-elevation-1" style="height: 200px; border-radius: 12px 12px 0 0;">
                                    <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Large" Color="Color.Secondary" />
                                </div>
                            }
                            
                            <MudCardContent>
                                <MudLink Href="@($"/tools/{rental.ToolId}")" Typo="Typo.h6" Color="Color.Primary" GutterBottom="true">
                                    @rental.ToolName
                                </MudLink>
                                
                                <div class="d-flex justify-space-between align-center mb-2">
                                    <MudChip T="string" Color="@GetStatusColor(rental.Status)" Size="Size.Small">
                                        @rental.Status
                                    </MudChip>
                                    <MudText Typo="Typo.h6" Color="Color.Primary">
                                        $@(rentalCosts.ContainsKey(rental.Id) && rentalCosts[rental.Id].HasValue ? rentalCosts[rental.Id].Value.ToString("F2") : rental.TotalCost.ToString("F2"))
                                    </MudText>
                                </div>
                                
                                @if (rental.Status == "Approved" && !rental.IsPaid)
                                {
                                    <MudAlert Severity="Severity.Warning" Dense="true" Class="mb-2">
                                        <MudText Typo="Typo.caption">
                                            <MudIcon Icon="@Icons.Material.Filled.Payment" Size="Size.Small" /> Payment Required - Approved and Ready
                                        </MudText>
                                    </MudAlert>
                                }
                                else if (rental.Status == "Pending")
                                {
                                    <MudAlert Severity="Severity.Info" Dense="true" Class="mb-2">
                                        <MudText Typo="Typo.caption">
                                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" /> Awaiting Owner Approval - Show serious interest by paying upfront
                                        </MudText>
                                    </MudAlert>
                                }
                                else if (rental.Status == "Approved" && rental.IsPaid)
                                {
                                    <MudAlert Severity="Severity.Success" Dense="true" Class="mb-2">
                                        <MudText Typo="Typo.caption">
                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" /> Payment Complete - Ready for Pickup
                                        </MudText>
                                    </MudAlert>
                                }
                                
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <strong>Owner:</strong> 
                                    <UserLink UserId="@rental.OwnerId" 
                                              DisplayName="@rental.OwnerName" 
                                              ShowAsLink="true" 
                                              ShowAvatar="false" />
                                </MudText>
                                
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <strong>Period:</strong> @rental.StartDate.ToString("MMM dd") - @rental.EndDate.ToString("MMM dd, yyyy")
                                </MudText>
                                
                                @if (rental.DepositAmount > 0)
                                {
                                    <MudText Typo="Typo.body2" Class="mb-2">
                                        <strong>Deposit:</strong> $@rental.DepositAmount.ToString("F2")
                                    </MudText>
                                }
                                
                                @if (!string.IsNullOrEmpty(rental.Notes))
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-2">
                                        <strong>Notes:</strong> @rental.Notes
                                    </MudText>
                                }
                                
                                @if (rental.Status == "Pending")
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-2">
                                        <strong>Optional:</strong> Pay now to demonstrate serious interest. This shows the owner you're committed and may increase your chances of approval.
                                    </MudText>
                                }
                                
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    Requested: @rental.CreatedAt.ToString("MMM dd, yyyy")
                                </MudText>
                            </MudCardContent>
                            
                            <MudCardActions Class="pa-4">
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ViewRentalDetails(rental.Id)" StartIcon="@Icons.Material.Filled.Visibility">
                                    View Details
                                </MudButton>
                                @if (rental.Status == "Approved" && !rental.IsPaid)
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="() => InitiatePayment(rental.Id)" StartIcon="@Icons.Material.Filled.Payment">
                                        Pay Now
                                    </MudButton>
                                }
                                else if (rental.Status == "Pending")
                                {
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => InitiatePayment(rental.Id)" StartIcon="@Icons.Material.Filled.VerifiedUser" Size="Size.Small">
                                        Pay Now to Show Commitment
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => CancelRental(rental.Id)" StartIcon="@Icons.Material.Filled.Cancel" Size="Size.Small">
                                        Cancel Rental
                                    </MudButton>
                                }
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudPaper Class="pa-8 text-center" Elevation="2" Style="border-radius: 12px;">
                <MudIcon Icon="@Icons.Material.Filled.ShoppingCartCheckout" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">No rental requests found</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                    You haven't made any rental requests yet. Browse tools to get started!
                </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/tools" StartIcon="@Icons.Material.Filled.Search">
                    Browse Tools
                </MudButton>
            </MudPaper>
        }
    </MudTabPanel>

    <MudTabPanel Text="Tool Rentals" Icon="@Icons.Material.Filled.Build">
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.h6">My Tools Being Rented</MudText>
            <div class="d-flex justify-end">
                <MudSelect T="string" @bind-Value="selectedOwnerStatus" Label="Status Filter" Variant="Variant.Outlined" Dense="true" Style="width: fit-content;">
                    <MudSelectItem T="string" Value="@string.Empty">All Status</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Pending")">Pending</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Approved")">Approved</MudSelectItem>
                    <MudSelectItem T="string" Value="@("PickedUp")">Picked Up</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Returned")">Returned</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Rejected")">Rejected</MudSelectItem>
                </MudSelect>
            </div>
        </div>
        
        @if (isLoadingOwnerRentals)
        {
            <div class="text-center pa-8">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                <MudText Typo="Typo.h6" Class="mt-4">Loading tool rentals...</MudText>
            </div>
        }
        else if (ownerRentals?.Any() == true)
        {
            <MudGrid>
                @foreach (var rental in GetFilteredOwnerRentals())
                {
                    <MudItem xs="12" md="6" lg="4">
                        <MudCard Elevation="4" Style="height: 100%; border-radius: 12px;">
                            @if (rental.Tool?.ImageUrls.Any() == true)
                            {
                                <MudCardMedia Image="@UrlService.GetFileUrl(rental.Tool.ImageUrls.First())" Height="200" Style="border-radius: 12px 12px 0 0;" />
                            }
                            else
                            {
                                <div class="d-flex align-center justify-center mud-elevation-1" style="height: 200px; border-radius: 12px 12px 0 0;">
                                    <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Large" Color="Color.Secondary" />
                                </div>
                            }
                            
                            <MudCardContent>
                                <MudLink Href="@($"/tools/{rental.ToolId}")" Typo="Typo.h6" Color="Color.Primary" GutterBottom="true">
                                    @rental.ToolName
                                </MudLink>
                                
                                <div class="d-flex justify-space-between align-center mb-2">
                                    <MudChip T="string" Color="@GetStatusColor(rental.Status)" Size="Size.Small">
                                        @rental.Status
                                    </MudChip>
                                    <MudText Typo="Typo.h6" Color="Color.Primary">
                                        $@(rentalCosts.ContainsKey(rental.Id) && rentalCosts[rental.Id].HasValue ? rentalCosts[rental.Id].Value.ToString("F2") : rental.TotalCost.ToString("F2"))
                                    </MudText>
                                </div>
                                
                                @if (rental.Status == "Approved" && !rental.IsPaid)
                                {
                                    <MudAlert Severity="Severity.Info" Dense="true" Class="mb-2">
                                        <MudText Typo="Typo.caption">
                                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" /> Waiting for renter payment
                                        </MudText>
                                    </MudAlert>
                                }
                                else if (rental.Status == "Approved" && rental.IsPaid)
                                {
                                    <MudAlert Severity="Severity.Success" Dense="true" Class="mb-2">
                                        <MudText Typo="Typo.caption">
                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" /> Payment received
                                        </MudText>
                                    </MudAlert>
                                }
                                
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <strong>Renter:</strong> 
                                    <UserLink UserId="@rental.RenterId" 
                                              DisplayName="@rental.RenterName" 
                                              ShowAsLink="true" 
                                              ShowAvatar="false" />
                                </MudText>
                                
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <strong>Period:</strong> @rental.StartDate.ToString("MMM dd") - @rental.EndDate.ToString("MMM dd, yyyy")
                                </MudText>
                                
                                @if (!string.IsNullOrEmpty(rental.Notes))
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-2">
                                        <strong>Notes:</strong> @rental.Notes
                                    </MudText>
                                }
                                
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    Requested: @rental.CreatedAt.ToString("MMM dd, yyyy")
                                </MudText>
                            </MudCardContent>
                            
                            <MudCardActions Class="pa-4">
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ViewRentalDetails(rental.Id)" StartIcon="@Icons.Material.Filled.Visibility">
                                    View Details
                                </MudButton>
                                @if (rental.Status == "Pending")
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" OnClick="() => ApproveRental(rental.Id)" StartIcon="@Icons.Material.Filled.CheckCircle">
                                        Approve
                                    </MudButton>
                                    <MudButton Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="() => RejectRental(rental.Id)" StartIcon="@Icons.Material.Filled.Cancel">
                                        Reject
                                    </MudButton>
                                }
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudPaper Class="pa-8 text-center" Elevation="2" Style="border-radius: 12px;">
                <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">No rental requests for your tools</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                    Share your tools to start receiving rental requests!
                </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/tools/create" StartIcon="@Icons.Material.Filled.Add">
                    Add Tool
                </MudButton>
            </MudPaper>
        }
    </MudTabPanel>

    <MudTabPanel Text="Bundle Rentals" Icon="@Icons.Material.Filled.Inventory">
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.h6">Bundle Rental Requests</MudText>
            <div class="d-flex justify-end">
                <MudSelect T="string" @bind-Value="selectedBundleStatus" Label="Status Filter" Variant="Variant.Outlined" Dense="true" Style="width: fit-content;">
                    <MudSelectItem T="string" Value="@string.Empty">All Status</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Pending")">Pending</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Approved")">Approved</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Rejected")">Rejected</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Cancelled")">Cancelled</MudSelectItem>
                </MudSelect>
            </div>
        </div>
        
        @if (isLoadingBundleRentals)
        {
            <div class="text-center pa-8">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                <MudText Typo="Typo.h6" Class="mt-4">Loading bundle rentals...</MudText>
            </div>
        }
        else if (GetFilteredBundleRentals()?.Any() == true)
        {
            <MudGrid>
                @foreach (var bundleRental in GetFilteredBundleRentals())
                {
                    <MudItem xs="12" md="6" lg="4">
                        <MudCard Elevation="2" Style="border-radius: 12px;">
                            <MudCardContent>
                                <MudLink Href="@($"/bundles/{bundleRental.BundleId}")" Typo="Typo.h6" Color="Color.Primary" GutterBottom="true">
                                    @bundleRental.BundleName
                                </MudLink>
                                
                                <div class="d-flex justify-space-between align-center mb-2">
                                    <MudChip T="string" Color="@GetBundleStatusColor(bundleRental.Status)" Size="Size.Small">
                                        @bundleRental.Status
                                    </MudChip>
                                    <MudText Typo="Typo.h6" Color="Color.Primary">
                                        $@bundleRental.FinalCost.ToString("F2")
                                    </MudText>
                                </div>
                                
                                @if (bundleRental.Status == "Pending")
                                {
                                    <MudAlert Severity="Severity.Info" Dense="true" Class="mb-2">
                                        <MudText Typo="Typo.caption">
                                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" /> Awaiting bundle owner approval
                                        </MudText>
                                    </MudAlert>
                                }
                                else if (bundleRental.Status == "Approved")
                                {
                                    <MudAlert Severity="Severity.Success" Dense="true" Class="mb-2">
                                        <MudText Typo="Typo.caption">
                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" /> Bundle rental approved - Ready for coordination
                                        </MudText>
                                    </MudAlert>
                                }
                                
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <strong>Renter:</strong> 
                                    <UserLink UserId="@bundleRental.RenterUserId" 
                                              DisplayName="@bundleRental.RenterName" 
                                              ShowAsLink="true" 
                                              ShowAvatar="false" />
                                </MudText>
                                
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <strong>Period:</strong> @bundleRental.RentalDate.ToString("MMM dd") - @bundleRental.ReturnDate.ToString("MMM dd, yyyy")
                                </MudText>
                                
                                @if (!string.IsNullOrEmpty(bundleRental.RenterNotes))
                                {
                                    <MudText Typo="Typo.body2" Class="mb-2">
                                        <strong>Notes:</strong> @bundleRental.RenterNotes
                                    </MudText>
                                }
                                
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    Created: @bundleRental.CreatedAt.ToString("MMM dd, yyyy")
                                </MudText>
                            </MudCardContent>
                            
                            <MudCardActions>
                                @if (bundleRental.Status == "Pending")
                                {
                                    <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="() => ApproveBundleRental(bundleRental.Id)" StartIcon="@Icons.Material.Filled.Check" Size="Size.Small">
                                        Approve
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => RejectBundleRental(bundleRental.Id)" StartIcon="@Icons.Material.Filled.Close" Size="Size.Small">
                                        Reject
                                    </MudButton>
                                }
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudPaper Class="pa-8 text-center" Elevation="2" Style="border-radius: 12px;">
                <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">No bundle rental requests found</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                    Bundle rental requests will appear here when users request to rent your bundles.
                </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/bundles" StartIcon="@Icons.Material.Filled.Search">
                    Browse Bundles
                </MudButton>
            </MudPaper>
        }
    </MudTabPanel>
</MudTabs>

@code {
    private List<Rental>? renterRentals;
    private List<Rental>? ownerRentals;
    private List<BundleRentalModel>? bundleRentals;
    private bool isLoadingRenterRentals = true;
    private bool isLoadingOwnerRentals = true;
    private bool isLoadingBundleRentals = true;
    private string selectedRenterStatus = string.Empty;
    private string selectedOwnerStatus = string.Empty;
    private string selectedBundleStatus = string.Empty;
    private int activeTab = 0;
    private Dictionary<string, decimal?> rentalCosts = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            LoadRenterRentals(),
            LoadOwnerRentals(),
            LoadBundleRentals()
        );
    }

    private async Task LoadRenterRentals()
    {
        isLoadingRenterRentals = true;
        try
        {
            var result = await RentalService.GetMyRentalsAsync();
            if (result.Success)
            {
                renterRentals = result.Data;
                
                // Calculate costs for display
                await LoadRentalCosts(renterRentals);
            }
            else
            {
                Snackbar.Add($"Error loading rentals: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading rentals: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingRenterRentals = false;
        }
    }

    private async Task LoadOwnerRentals()
    {
        isLoadingOwnerRentals = true;
        try
        {
            var result = await RentalService.GetMyToolRentalsAsync();
            if (result.Success)
            {
                ownerRentals = result.Data;
            }
            else
            {
                Snackbar.Add($"Error loading tool rentals: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading tool rentals: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingOwnerRentals = false;
        }
    }

    private List<Rental> GetFilteredRenterRentals()
    {
        if (renterRentals == null) return new List<Rental>();
        
        return string.IsNullOrEmpty(selectedRenterStatus) 
            ? renterRentals.ToList()
            : renterRentals.Where(r => r.Status == selectedRenterStatus).ToList();
    }

    private List<Rental> GetFilteredOwnerRentals()
    {
        if (ownerRentals == null) return new List<Rental>();
        
        return string.IsNullOrEmpty(selectedOwnerStatus) 
            ? ownerRentals.ToList()
            : ownerRentals.Where(r => r.Status == selectedOwnerStatus).ToList();
    }

    private Color GetStatusColor(string status)
    {
        return status switch
        {
            "Pending" => Color.Warning,
            "Approved" => Color.Info,
            "PickedUp" => Color.Primary,
            "Returned" => Color.Success,
            "Rejected" => Color.Error,
            "Cancelled" => Color.Secondary,
            "Overdue" => Color.Error,
            _ => Color.Default
        };
    }

    private void ViewRentalDetails(string rentalId)
    {
        Navigation.NavigateTo($"/rentals/{rentalId}");
    }

    private async Task ApproveRental(string rentalId)
    {
        try
        {
            var request = new RentalApprovalRequest { IsApproved = true };
            var result = await RentalService.ApproveRentalAsync(rentalId, request);
            
            if (result.Success)
            {
                Snackbar.Add("Rental approved successfully!", Severity.Success);
                await LoadOwnerRentals();
            }
            else
            {
                Snackbar.Add($"Error approving rental: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error approving rental: {ex.Message}", Severity.Error);
        }
    }

    private async Task RejectRental(string rentalId)
    {
        try
        {
            var request = new RentalApprovalRequest { IsApproved = false, Reason = "Rejected by owner" };
            var result = await RentalService.RejectRentalAsync(rentalId, request);
            
            if (result.Success)
            {
                Snackbar.Add("Rental rejected.", Severity.Info);
                await LoadOwnerRentals();
            }
            else
            {
                Snackbar.Add($"Error rejecting rental: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error rejecting rental: {ex.Message}", Severity.Error);
        }
    }

    private async Task InitiatePayment(string rentalId)
    {
        try
        {
            if (!Guid.TryParse(rentalId, out var rentalGuid))
            {
                Snackbar.Add("Invalid rental ID", Severity.Error);
                return;
            }

            // Find the rental to get tool details for the dialog
            var rental = renterRentals?.FirstOrDefault(r => r.Id == rentalId);
            if (rental?.Tool == null)
            {
                Snackbar.Add("Rental information not found", Severity.Error);
                return;
            }

            // Calculate rental cost using the backend API for accuracy
            if (!Guid.TryParse(rental.Tool.Id, out var toolGuid))
            {
                Snackbar.Add("Invalid tool ID format", Severity.Error);
                return;
            }

            var costResult = await PaymentService.CalculateRentalCostAsync(toolGuid, rental.StartDate, rental.EndDate);
            if (!costResult.Success || costResult.Data == null)
            {
                Snackbar.Add($"Failed to calculate rental cost: {costResult.Message}", Severity.Error);
                return;
            }
            
            var parameters = new DialogParameters 
            { 
                { "RentalId", rentalGuid },
                { "Tool", rental.Tool },
                { "RentalAmount", costResult.Data.RentalAmount },
                { "SecurityDeposit", costResult.Data.SecurityDeposit },
                { "CommissionAmount", costResult.Data.CommissionAmount },
                { "CommissionRate", costResult.Data.CommissionRate },
                { "TotalAmount", costResult.Data.TotalPayerAmount },
                { "StartDate", rental.StartDate },
                { "EndDate", rental.EndDate }
            };
            
            var options = new DialogOptions 
            { 
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
            
            var dialog = await DialogService.ShowAsync<PaymentConfirmationDialog>("Confirm Payment", parameters, options);
            var result = await dialog.Result;
            
            if (!result.Canceled)
            {
                // Payment was initiated successfully, refresh the rentals
                await LoadRenterRentals();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error opening payment dialog: {ex.Message}", Severity.Error);
        }
    }

    private async Task CancelRental(string rentalId)
    {
        var rental = renterRentals?.FirstOrDefault(r => r.Id == rentalId);
        if (rental == null)
        {
            Snackbar.Add("Rental not found", Severity.Error);
            return;
        }

        // Show confirmation dialog
        var parameters = new DialogParameters
        {
            { "Title", "Cancel Rental Request" },
            { "Message", $"Are you sure you want to cancel your rental request for \"{rental.ToolName}\"?" },
            { "ShowReasonInput", true },
            { "ReasonLabel", "Cancellation reason (optional)" },
            { "ConfirmText", "Cancel Rental" },
            { "ConfirmColor", Color.Error }
        };

        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = DialogService.Show<ConfirmationDialog>("Cancel Rental", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is ConfirmationDialogResult dialogResult && dialogResult.Confirmed)
        {
            try
            {
                var apiResult = await RentalService.CancelRentalAsync(rentalId, dialogResult.Reason);
                
                if (apiResult.Success)
                {
                    Snackbar.Add("Rental cancelled successfully", Severity.Success);
                    await LoadRenterRentals(); // Refresh the list
                }
                else
                {
                    Snackbar.Add($"Error cancelling rental: {apiResult.Message}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error cancelling rental: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task LoadRentalCosts(List<Rental>? rentals)
    {
        if (rentals == null) return;
        
        foreach (var rental in rentals)
        {
            if (rental.Tool != null && Guid.TryParse(rental.Tool.Id, out var toolGuid))
            {
                try
                {
                    var costResult = await PaymentService.CalculateRentalCostAsync(toolGuid, rental.StartDate, rental.EndDate);
                    if (costResult.Success && costResult.Data != null)
                    {
                        rentalCosts[rental.Id] = costResult.Data.TotalPayerAmount;
                    }
                    else
                    {
                        rentalCosts[rental.Id] = null;
                    }
                }
                catch
                {
                    // Silently fail for individual cost calculations
                    rentalCosts[rental.Id] = null;
                }
            }
        }
        
        StateHasChanged();
    }

    private async Task LoadBundleRentals()
    {
        isLoadingBundleRentals = true;
        try
        {
            var result = await BundleService.GetUserBundleRentalsAsync();
            if (result.Success && result.Data != null)
            {
                bundleRentals = result.Data.Items;
            }
            else
            {
                Snackbar.Add($"Error loading bundle rentals: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading bundle rentals: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingBundleRentals = false;
        }
    }

    private List<BundleRentalModel> GetFilteredBundleRentals()
    {
        if (bundleRentals == null) return new List<BundleRentalModel>();
        
        return string.IsNullOrEmpty(selectedBundleStatus) 
            ? bundleRentals.ToList()
            : bundleRentals.Where(br => br.Status == selectedBundleStatus).ToList();
    }

    private Color GetBundleStatusColor(string status)
    {
        return status switch
        {
            "Pending" => Color.Warning,
            "Approved" => Color.Success,
            "Rejected" => Color.Error,
            "Cancelled" => Color.Secondary,
            _ => Color.Default
        };
    }

    private async Task ApproveBundleRental(Guid bundleRentalId)
    {
        try
        {
            var result = await BundleService.ApproveBundleRentalAsync(bundleRentalId);
            
            if (result.Success)
            {
                Snackbar.Add("Bundle rental approved successfully!", Severity.Success);
                await LoadBundleRentals();
            }
            else
            {
                Snackbar.Add($"Error approving bundle rental: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error approving bundle rental: {ex.Message}", Severity.Error);
        }
    }

    private async Task RejectBundleRental(Guid bundleRentalId)
    {
        // Show confirmation dialog with reason input
        var parameters = new DialogParameters
        {
            { "Title", "Reject Bundle Rental Request" },
            { "Message", "Are you sure you want to reject this bundle rental request?" },
            { "ShowReasonInput", true },
            { "ReasonLabel", "Rejection reason (optional)" },
            { "ConfirmText", "Reject Request" },
            { "ConfirmColor", Color.Error }
        };

        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = DialogService.Show<ConfirmationDialog>("Reject Bundle Rental", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is ConfirmationDialogResult dialogResult && dialogResult.Confirmed)
        {
            try
            {
                var apiResult = await BundleService.RejectBundleRentalAsync(bundleRentalId, dialogResult.Reason ?? "Rejected by owner");
                
                if (apiResult.Success)
                {
                    Snackbar.Add("Bundle rental rejected.", Severity.Info);
                    await LoadBundleRentals();
                }
                else
                {
                    Snackbar.Add($"Error rejecting bundle rental: {apiResult.Message}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error rejecting bundle rental: {ex.Message}", Severity.Error);
            }
        }
    }

}