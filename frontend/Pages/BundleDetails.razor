@page "/bundles/{BundleId:guid}"
@using ToolsSharing.Frontend.Models
@using frontend.Models
@using ToolsSharing.Frontend.Services
@using frontend.Services
@using frontend.Components.Bundles
@inject BundleService BundleService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>@(bundle?.Name ?? "Bundle") - NeighborTools</PageTitle>

@if (isLoading)
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="400px" />
    </MudContainer>
}
else if (bundle == null)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
        <MudStack AlignItems="AlignItems.Center" Class="pa-8">
            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Secondary" />
            <MudText Typo="Typo.h5" Class="mt-4">Bundle Not Found</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                The bundle you're looking for doesn't exist or has been removed.
            </MudText>
            <MudButton Variant="Variant.Filled" 
                     Color="Color.Primary" 
                     Href="/bundles" 
                     Class="mt-4">
                Browse All Bundles
            </MudButton>
        </MudStack>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
        <MudGrid>
            <!-- Header Section -->
            <MudItem xs="12">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start" Class="mb-4">
                    <div>
                        <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Class="mb-2">
                            <MudText Typo="Typo.h4" Color="Color.Primary">@bundle.Name</MudText>
                            @if (bundle.IsFeatured)
                            {
                                <MudChip Color="Color.Warning" Size="Size.Medium" Icon="@Icons.Material.Filled.Star" Text="Featured" T="string" />
                            }
                        </MudStack>
                        
                        <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Class="mb-2">
                            <MudChip Color="Color.Primary" Text="@bundle.Category" T="string" />
                            <MudChip Color="Color.Secondary" Text="@bundle.RequiredSkillLevel" T="string" />
                            <MudChip Color="Color.Info" Text="@($"{bundle.EstimatedProjectDuration}h project")" T="string" />
                        </MudStack>

                        <MudStack Row Spacing="4" AlignItems="AlignItems.Center">
                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Color="Color.Secondary" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@bundle.OwnerName</MudText>
                            </MudStack>
                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Color="Color.Secondary" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@bundle.OwnerLocation</MudText>
                            </MudStack>
                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.Visibility" Size="Size.Small" Color="Color.Secondary" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@bundle.ViewCount views</MudText>
                            </MudStack>
                        </MudStack>
                    </div>

                    <MudStack Spacing="2" AlignItems="AlignItems.End">
                        <!-- Pricing -->
                        <div style="text-align: right;">
                            @if (bundle.BundleDiscount > 0)
                            {
                                <MudText Typo="Typo.body2" 
                                       Style="text-decoration: line-through;" 
                                       Color="Color.Secondary">
                                    $@bundle.TotalCost.ToString("F2")/day
                                </MudText>
                                <MudStack Row Spacing="1" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
                                    <MudText Typo="Typo.h5" Color="Color.Primary">
                                        $@bundle.DiscountedCost.ToString("F2")/day
                                    </MudText>
                                    <MudChip Size="Size.Small" 
                                           Color="Color.Success" 
                                           Text="@($"-{bundle.BundleDiscount:F0}%")" 
                                           T="string" />
                                </MudStack>
                            }
                            else
                            {
                                <MudText Typo="Typo.h5" Color="Color.Primary">
                                    $@bundle.DiscountedCost.ToString("F2")/day
                                </MudText>
                            }
                        </div>

                        <!-- Availability Status -->
                        @if (isCheckingAvailability)
                        {
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                <MudChip Color="Color.Info" 
                                       Size="Size.Medium" 
                                       Icon="@Icons.Material.Filled.Refresh" 
                                       Text="Checking Availability..." 
                                       T="string" />
                            </MudStack>
                        }
                        else if (bundle.IsAvailable)
                        {
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                <MudChip Color="Color.Success" 
                                       Size="Size.Medium" 
                                       Icon="@Icons.Material.Filled.CheckCircle" 
                                       Text="Available Now" 
                                       T="string" />
                                @if (quickAvailability != null)
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        (Next 3 days checked)
                                    </MudText>
                                }
                            </MudStack>
                        }
                        else if (bundle.AvailableFromDate.HasValue)
                        {
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                <MudChip Color="Color.Warning" 
                                       Size="Size.Medium" 
                                       Icon="@Icons.Material.Filled.Schedule" 
                                       Text="@($"Available {bundle.AvailableFromDate.Value:MMM dd}")" 
                                       T="string" />
                                @if (quickAvailability?.ToolAvailability.Any(t => !t.IsAvailable) == true)
                                {
                                    <MudTooltip Text="@GetUnavailableToolsTooltip()">
                                        <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Color="Color.Secondary" />
                                    </MudTooltip>
                                }
                            </MudStack>
                        }
                        else
                        {
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                <MudChip Color="Color.Error" 
                                       Size="Size.Medium" 
                                       Icon="@Icons.Material.Filled.Block" 
                                       Text="Currently Unavailable" 
                                       T="string" />
                                @if (quickAvailability?.ToolAvailability.Any(t => !t.IsAvailable) == true)
                                {
                                    <MudTooltip Text="@GetUnavailableToolsTooltip()">
                                        <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Color="Color.Error" />
                                    </MudTooltip>
                                }
                            </MudStack>
                        }

                        <!-- Action Button -->
                        <AuthorizeView>
                            <Authorized>
                                <MudButton Variant="Variant.Filled" 
                                         Color="Color.Primary" 
                                         Size="Size.Large"
                                         StartIcon="@Icons.Material.Filled.ShoppingCart"
                                         Disabled="!bundle.IsAvailable"
                                         OnClick="OpenRentalDialog">
                                    Rent Bundle
                                </MudButton>
                            </Authorized>
                            <NotAuthorized>
                                <MudButton Variant="Variant.Filled" 
                                         Color="Color.Primary" 
                                         Size="Size.Large"
                                         StartIcon="@Icons.Material.Filled.Login"
                                         Href="/login">
                                    Sign In to Rent
                                </MudButton>
                            </NotAuthorized>
                        </AuthorizeView>
                    </MudStack>
                </MudStack>
            </MudItem>

            <!-- Main Content -->
            <MudItem xs="12" md="8">
                <!-- Description -->
                <MudCard Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Description</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.body1" Style="white-space: pre-line;">@bundle.Description</MudText>
                    </MudCardContent>
                </MudCard>

                <!-- Guidelines -->
                @if (!string.IsNullOrWhiteSpace(bundle.Guidelines))
                {
                    <MudCard Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">
                                    <MudIcon Icon="@Icons.Material.Filled.Assignment" Class="mr-2" />
                                    Guidelines & Instructions
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body1" Style="white-space: pre-line;">@bundle.Guidelines</MudText>
                        </MudCardContent>
                    </MudCard>
                }

                <!-- Tools in Bundle -->
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.Build" Class="mr-2" />
                                Tools Included (@bundle.Tools.Count)
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList T="string">
                            @foreach (var tool in bundle.Tools.OrderBy(t => t.OrderInBundle))
                            {
                                <MudListItem T="string">
                                    <MudPaper Class="pa-3 mb-2" Elevation="1">
                                        <MudGrid AlignItems="Center">
                                            <MudItem xs="12" sm="8">
                                                <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                                                    @if (tool.IsOptional)
                                                    {
                                                        <MudChip Size="Size.Small" Color="Color.Info" Text="Optional" T="string" />
                                                    }
                                                    <div>
                                                        <MudText Typo="Typo.subtitle1">@tool.ToolName</MudText>
                                                        <MudText Typo="Typo.body2" Color="Color.Secondary">@tool.ToolDescription</MudText>
                                                        @if (!string.IsNullOrWhiteSpace(tool.UsageNotes))
                                                        {
                                                            <MudText Typo="Typo.caption" Color="Color.Primary" Style="font-style: italic;">
                                                                Notes: @tool.UsageNotes
                                                            </MudText>
                                                        }
                                                    </div>
                                                </MudStack>
                                            </MudItem>
                                            <MudItem xs="6" sm="2">
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                    Qty: @tool.QuantityNeeded
                                                </MudText>
                                            </MudItem>
                                            <MudItem xs="6" sm="2">
                                                <MudText Typo="Typo.body2" Color="Color.Primary">
                                                    $@tool.DailyRate.ToString("F2")/day
                                                </MudText>
                                            </MudItem>
                                        </MudGrid>
                                    </MudPaper>
                                </MudListItem>
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Sidebar -->
            <MudItem xs="12" md="4">
                <!-- Bundle Stats -->
                <MudCard Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Bundle Stats</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudStack Spacing="3">
                            <MudStack Row Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Times Rented:</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Primary">@bundle.RentalCount</MudText>
                            </MudStack>
                            <MudStack Row Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Average Rating:</MudText>
                                <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                    <MudRating ReadOnly="true" MaxValue="5" SelectedValue="(int)Math.Round(bundle.AverageRating)" Color="Color.Warning" />
                                    <MudText Typo="Typo.caption">(@bundle.AverageRating.ToString("F1"))</MudText>
                                </MudStack>
                            </MudStack>
                            <MudStack Row Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body2">Created:</MudText>
                                <MudText Typo="Typo.body2">@bundle.CreatedAt.ToString("MMM dd, yyyy")</MudText>
                            </MudStack>
                            @if (bundle.UpdatedAt > bundle.CreatedAt)
                            {
                                <MudStack Row Justify="Justify.SpaceBetween">
                                    <MudText Typo="Typo.body2">Updated:</MudText>
                                    <MudText Typo="Typo.body2">@bundle.UpdatedAt.ToString("MMM dd, yyyy")</MudText>
                                </MudStack>
                            }
                        </MudStack>
                    </MudCardContent>
                </MudCard>

                <!-- Tags -->
                @if (bundle.Tags.Any())
                {
                    <MudCard Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Tags</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Row Spacing="1" Wrap="Wrap.Wrap">
                                @foreach (var tag in bundle.Tags)
                                {
                                    <MudChip Size="Size.Small" Color="Color.Default" Text="@tag" T="string" />
                                }
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                }

                <!-- Share -->
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Share Bundle</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudStack Row Spacing="2">
                            <MudIconButton Icon="@Icons.Custom.Brands.Facebook" 
                                         Color="Color.Primary" 
                                         Size="Size.Medium"
                                         OnClick="@(() => ShareBundle("facebook"))" />
                            <MudIconButton Icon="@Icons.Custom.Brands.Twitter" 
                                         Color="Color.Info" 
                                         Size="Size.Medium"
                                         OnClick="@(() => ShareBundle("twitter"))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Share" 
                                         Color="Color.Secondary" 
                                         Size="Size.Medium"
                                         OnClick="@(() => CopyLink())" />
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    [Parameter] public Guid BundleId { get; set; }
    
    private BundleModel? bundle;
    private bool isLoading = true;
    private bool isCheckingAvailability = false;
    private BundleAvailabilityResponseModel? quickAvailability;

    protected override async Task OnInitializedAsync()
    {
        await LoadBundle();
        if (bundle != null)
        {
            await CheckQuickAvailability();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (bundle?.Id != BundleId)
        {
            await LoadBundle();
        }
    }

    private async Task LoadBundle()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var result = await BundleService.GetBundleByIdAsync(BundleId);
            
            if (result.Success && result.Data != null)
            {
                bundle = result.Data;
            }
            else
            {
                bundle = null;
                if (!string.IsNullOrEmpty(result.Message))
                {
                    Snackbar.Add(result.Message, Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load bundle: {ex.Message}", Severity.Error);
            bundle = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ShareBundle(string platform)
    {
        var url = Navigation.Uri;
        var text = $"Check out this tool bundle: {bundle?.Name}";

        string shareUrl = platform switch
        {
            "facebook" => $"https://www.facebook.com/sharer/sharer.php?u={Uri.EscapeDataString(url)}",
            "twitter" => $"https://twitter.com/intent/tweet?text={Uri.EscapeDataString(text)}&url={Uri.EscapeDataString(url)}",
            _ => url
        };

        await Task.Run(() => Navigation.NavigateTo(shareUrl, true));
    }

    private async Task CopyLink()
    {
        try
        {
            // Use JavaScript interop for clipboard functionality in a real implementation
            await Task.Delay(100); // Simulate async operation
            Snackbar.Add("Link copied to clipboard!", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Could not copy link", Severity.Warning);
        }
    }

    private async Task CheckQuickAvailability()
    {
        if (bundle == null) return;

        isCheckingAvailability = true;
        StateHasChanged();

        try
        {
            // Check availability for tomorrow to next week
            var startDate = DateTime.Today.AddDays(1);
            var endDate = DateTime.Today.AddDays(3); // 3-day rental

            var availabilityRequest = new BundleAvailabilityModel
            {
                BundleId = bundle.Id,
                StartDate = startDate,
                EndDate = endDate
            };

            var result = await BundleService.CheckBundleAvailabilityAsync(availabilityRequest);
            
            if (result.Success && result.Data != null)
            {
                quickAvailability = result.Data;
                
                // Update the bundle's availability properties based on real data
                bundle.IsAvailable = quickAvailability.IsAvailable;
                if (!quickAvailability.IsAvailable && quickAvailability.EarliestAvailableDate.HasValue)
                {
                    bundle.AvailableFromDate = quickAvailability.EarliestAvailableDate;
                }
            }
        }
        catch (Exception ex)
        {
            // Silently fail for availability check - don't disrupt the page load
            Console.WriteLine($"Failed to check bundle availability: {ex.Message}");
        }
        finally
        {
            isCheckingAvailability = false;
            StateHasChanged();
        }
    }

    private async Task OpenRentalDialog()
    {
        if (bundle == null) return;

        var parameters = new DialogParameters { { "Bundle", bundle } };
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialog = DialogService.Show<BundleRentalRequestDialog>("Request Bundle Rental", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            // Bundle rental request was successful
            // The dialog handles navigation to the bundle rental details
            Snackbar.Add("Bundle rental request submitted successfully!", Severity.Success);
            
            // Refresh availability after successful rental
            await CheckQuickAvailability();
        }
    }

    private string GetUnavailableToolsTooltip()
    {
        if (quickAvailability?.ToolAvailability == null) 
            return "Check specific dates for detailed availability";

        var unavailableTools = quickAvailability.ToolAvailability
            .Where(t => !t.IsAvailable)
            .Select(t => $"{t.ToolName}: {t.UnavailabilityReason}")
            .ToList();

        if (!unavailableTools.Any())
            return "All tools available";

        return $"Unavailable tools:\n{string.Join("\n", unavailableTools)}";
    }
}