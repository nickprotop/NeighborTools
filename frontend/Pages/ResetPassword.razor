@page "/reset-password"
@using frontend.Services
@using frontend.Models
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Reset Password - NeighborTools</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <MudCard Class="pa-8">
                <MudCardContent>
                    <div class="d-flex flex-column align-items-center mb-6">
                        <MudIcon Icon="@Icons.Material.Filled.VpnKey" Size="Size.Large" Color="Color.Primary" Class="mb-4" Style="font-size: 4rem;" />
                        <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">
                            Reset Password
                        </MudText>
                        <MudText Typo="Typo.body1" Color="Color.Secondary" Align="Align.Center">
                            Enter your new password below
                        </MudText>
                    </div>

                    @if (!isInvalidToken && !passwordReset)
                    {
                        <EditForm Model="request" OnValidSubmit="HandleResetPassword">
                            <DataAnnotationsValidator />

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <MudAlert Severity="Severity.Error" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="(() => errorMessage = string.Empty)">
                                    @errorMessage
                                </MudAlert>
                            }

                            <MudTextField @bind-Value="request.NewPassword"
                                          Label="New Password"
                                          Variant="Variant.Outlined"
                                          InputType="@(showPassword ? InputType.Text : InputType.Password)"
                                          FullWidth="true"
                                          Class="mb-4"
                                          Required="true"
                                          RequiredError="Password is required"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@(showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                          OnAdornmentClick="TogglePasswordVisibility" />

                            <MudTextField @bind-Value="request.ConfirmPassword"
                                          Label="Confirm New Password"
                                          Variant="Variant.Outlined"
                                          InputType="@(showConfirmPassword ? InputType.Text : InputType.Password)"
                                          FullWidth="true"
                                          Class="mb-6"
                                          Required="true"
                                          RequiredError="Password confirmation is required"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@(showConfirmPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                          OnAdornmentClick="ToggleConfirmPasswordVisibility" />

                            @if (!string.IsNullOrEmpty(passwordMismatchError))
                            {
                                <MudAlert Severity="Severity.Warning" Class="mb-4">
                                    @passwordMismatchError
                                </MudAlert>
                            }

                            <MudButton ButtonType="ButtonType.Submit"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Size="Size.Large"
                                       FullWidth="true"
                                       Class="mb-4"
                                       Disabled="isLoading || !PasswordsMatch"
                                       StartIcon="@(isLoading ? null : Icons.Material.Filled.Save)">
                                @if (isLoading)
                                {
                                    <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ml-2">Resetting...</MudText>
                                }
                                else
                                {
                                    <MudText>Reset Password</MudText>
                                }
                            </MudButton>
                        </EditForm>
                    }
                    else if (isInvalidToken)
                    {
                        <div class="d-flex flex-column align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Large" Color="Color.Error" Style="font-size: 64px;" />
                            <MudText Typo="Typo.h5" Color="Color.Error" Class="mt-3">Invalid or Expired Link</MudText>
                            <MudText Typo="Typo.body1" Class="mt-3 text-center">
                                The password reset link is invalid or has expired.
                                Please request a new password reset link.
                            </MudText>
                            
                            <div class="mt-4">
                                <MudButton Variant="Variant.Filled" 
                                          Color="Color.Primary"
                                          StartIcon="@Icons.Material.Filled.Lock"
                                          OnClick="NavigateToForgotPassword">
                                    Request New Reset Link
                                </MudButton>
                            </div>
                        </div>
                    }
                    else if (passwordReset)
                    {
                        <div class="d-flex flex-column align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" Color="Color.Success" Style="font-size: 64px;" />
                            <MudText Typo="Typo.h5" Color="Color.Success" Class="mt-3">Password Reset Successfully!</MudText>
                            <MudText Typo="Typo.body1" Class="mt-3 text-center">
                                Your password has been reset successfully.
                                You can now log in with your new password.
                            </MudText>
                            
                            <div class="mt-4">
                                <MudButton Variant="Variant.Filled" 
                                          Color="Color.Primary"
                                          StartIcon="@Icons.Material.Filled.Login"
                                          OnClick="NavigateToLogin">
                                    Go to Login
                                </MudButton>
                            </div>
                        </div>
                    }

                    <MudDivider Class="my-4" />

                    <div class="d-flex justify-center">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Remember your password?
                            <MudLink Href="/login" Color="Color.Primary" Class="ml-1">
                                Back to Login
                            </MudLink>
                        </MudText>
                    </div>
                </MudCardContent>
            </MudCard>
        </div>
    </div>
</div>

@code {
    private ResetPasswordRequest request = new();
    private string errorMessage = string.Empty;
    private string passwordMismatchError = string.Empty;
    private bool isLoading = false;
    private bool passwordReset = false;
    private bool isInvalidToken = false;
    private bool showPassword = false;
    private bool showConfirmPassword = false;

    private bool PasswordsMatch => 
        string.IsNullOrEmpty(request.NewPassword) || 
        string.IsNullOrEmpty(request.ConfirmPassword) || 
        request.NewPassword == request.ConfirmPassword;

    protected override async Task OnInitializedAsync()
    {
        // Extract email and token from URL parameters
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("email", out var emailValues) && 
            queryParams.TryGetValue("token", out var tokenValues))
        {
            var email = emailValues.FirstOrDefault();
            var token = tokenValues.FirstOrDefault();

            if (!string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(token))
            {
                request.Email = email;
                request.Token = token;
            }
            else
            {
                isInvalidToken = true;
            }
        }
        else
        {
            isInvalidToken = true;
        }

        // Watch for password mismatch
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        CheckPasswordMatch();
    }

    private void CheckPasswordMatch()
    {
        if (!string.IsNullOrEmpty(request.NewPassword) && !string.IsNullOrEmpty(request.ConfirmPassword))
        {
            if (request.NewPassword != request.ConfirmPassword)
            {
                passwordMismatchError = "Passwords do not match";
            }
            else
            {
                passwordMismatchError = string.Empty;
            }
        }
        else
        {
            passwordMismatchError = string.Empty;
        }
    }

    private async Task HandleResetPassword()
    {
        CheckPasswordMatch();
        
        if (!PasswordsMatch)
        {
            errorMessage = "Passwords do not match";
            return;
        }

        if (string.IsNullOrEmpty(request.NewPassword) || request.NewPassword.Length < 6)
        {
            errorMessage = "Password must be at least 6 characters long";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.ResetPasswordAsync(request);

            if (result.Success)
            {
                passwordReset = true;
                Snackbar.Add("Password reset successfully!", Severity.Success);
            }
            else
            {
                if (result.Message?.Contains("Invalid") == true || result.Message?.Contains("expired") == true)
                {
                    isInvalidToken = true;
                }
                else
                {
                    errorMessage = result.Message ?? "Failed to reset password. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private void NavigateToForgotPassword()
    {
        Navigation.NavigateTo("/forgot-password");
    }
}