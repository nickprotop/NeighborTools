@page "/my-tools"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@using ToolsSharing.Frontend.Models
@using ToolsSharing.Frontend.Services
@using frontend.Components.Bundles
@using frontend.Components
@using frontend.Components.Common
@inject IToolService ToolService
@inject BundleService BundleService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IUrlService UrlService
@attribute [Authorize]

<PageTitle>My Tools & Bundles - NeighborTools</PageTitle>

<!-- Header Section -->
<div class="d-flex flex-column flex-sm-row justify-space-between align-center mb-6 gap-4">
    <div>
        <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">
            <MudIcon Icon="@Icons.Material.Filled.Inventory" Class="mr-2" />
            My Tools & Bundles
        </MudText>
        <MudText Typo="Typo.body1" Color="Color.Secondary">
            Manage your tool listings, bundles, and track their performance
        </MudText>
    </div>
    
    <div class="d-flex gap-2">
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.Add"
                   Href="/tools/create"
                   Size="Size.Large">
            Add Tool
        </MudButton>
        <MudButton Variant="Variant.Outlined" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.Inventory2"
                   Href="/bundles/create"
                   Size="Size.Large">
            Create Bundle
        </MudButton>
    </div>
</div>

<!-- Tabs for Tools and Bundles -->
<MudTabs Elevation="4" Rounded="true" PanelClass="pa-6" @bind-ActivePanelIndex="activeTab">
    <MudTabPanel Text="My Tools" Icon="@Icons.Material.Filled.Build">
        
        <!-- Tools Stats Cards -->
        <MudGrid Class="mb-6">
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="4" Style="border-radius: 12px;">
                    <MudCardContent Class="text-center">
                        <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Large" Color="Color.Primary" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Primary">@GetTotalToolsCount()</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Total Tools</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="4" Style="border-radius: 12px;">
                    <MudCardContent Class="text-center">
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" Color="Color.Success" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Success">@GetAvailableToolsCount()</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Available</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="4" Style="border-radius: 12px;">
                    <MudCardContent Class="text-center">
                        <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Large" Color="Color.Warning" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Warning">@GetRentedToolsCount()</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Rented Out</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="4" Style="border-radius: 12px;">
                    <MudCardContent Class="text-center">
                        <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Size="Size.Large" Color="Color.Info" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Info">@GetDailyPotential()</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Daily Potential</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Tools Loading State -->
        @if (isLoading)
{
    <MudPaper Class="pa-8 text-center" Elevation="2" Style="border-radius: 12px;">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        <MudText Typo="Typo.h6" Class="mt-4">Loading your tools...</MudText>
    </MudPaper>
}
<!-- Error State -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => errorMessage = string.Empty)">
        @errorMessage
    </MudAlert>
}
<!-- Tools Grid -->
@if (myTools != null && myTools.Any())
{
    <MudGrid>
        @foreach (var tool in myTools)
        {
            @if (tool != null)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="4" Style="height: 100%; border-radius: 12px; transition: transform 0.2s; cursor: pointer;" Class="hover-card" @onclick="() => ViewTool(tool.Id ?? string.Empty)">
                        @{
                            var myToolImageUrl = tool.ImageUrls != null && tool.ImageUrls.Any() ? UrlService.GetFileUrl(tool.ImageUrls.First()) : string.Empty;
                            var hasValidMyToolImage = !string.IsNullOrEmpty(myToolImageUrl);
                            var myToolKey = $"mytool_{tool.Id}";
                        }
                        <div style="position: relative; height: 200px; border-radius: 12px 12px 0 0; overflow: hidden;">
                            @if (hasValidMyToolImage)
                            {
                                <img src="@myToolImageUrl" 
                                     style="width: 100%; height: 200px; object-fit: cover; @(GetMyToolImageLoadError(myToolKey) ? "display: none;" : "")" 
                                     class="mytool-image"
                                     @onerror="@(() => HandleMyToolImageError(myToolKey))" 
                                     @onload="@(() => HandleMyToolImageLoad(myToolKey))" />
                            }
                            
                            @if (!hasValidMyToolImage || GetMyToolImageLoadError(myToolKey))
                            {
                                <ThemeAwarePlaceholder Height="200px" 
                                                      BorderRadius="12px 12px 0 0"
                                                      Icon="@Icons.Material.Filled.Build" 
                                                      IconSize="Size.Large"
                                                      IconFontSize="3rem"
                                                      AdditionalClass="mytool-image" />
                            }
                        </div>
                    
                    <MudCardContent>
                        <MudText Typo="Typo.h6" GutterBottom="true">@GetToolName(tool)</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3" Style="height: 3em; overflow: hidden;">
                            @GetToolDescription(tool)
                        </MudText>
                        
                        <div class="d-flex justify-space-between align-center mb-3">
                            <MudChip T="string" Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Category">
                                @(tool.Category ?? "Unknown")
                            </MudChip>
                            @if (tool.IsAvailable)
                            {
                                <MudChip T="string" Color="Color.Success" 
                                         Size="Size.Small" 
                                         Icon="@Icons.Material.Filled.CheckCircle">
                                    Available
                                </MudChip>
                            }
                            @if (!tool.IsAvailable)
                            {
                                <MudChip T="string" Color="Color.Warning" 
                                         Size="Size.Small" 
                                         Icon="@Icons.Material.Filled.Schedule">
                                    Rented
                                </MudChip>
                            }
                        </div>
                        
                        <!-- Approval Status - Show if not approved -->
                        @if (!tool.IsApproved)
                        {
                            <div class="mb-3">
                                @if (tool.HasPendingApproval)
                                {
                                    <MudChip T="string" Color="Color.Warning" 
                                           Size="Size.Small" 
                                           Icon="@Icons.Material.Filled.HourglassEmpty">
                                        Pending Approval
                                    </MudChip>
                                }
                                else
                                {
                                    <MudTooltip Text="@(!string.IsNullOrEmpty(tool.RejectionReason) ? $"Rejected: {tool.RejectionReason}" : "This tool was rejected and needs to be reviewed")">
                                        <MudChip T="string" Color="Color.Error" 
                                               Size="Size.Small" 
                                               Icon="@Icons.Material.Filled.Block">
                                            Rejected
                                        </MudChip>
                                    </MudTooltip>
                                }
                            </div>
                        }
                        
                        <div class="d-flex justify-space-between align-center mb-2">
                            <MudText Typo="Typo.h6" Color="Color.Primary">
                                $@tool.DailyRate.ToString("F2")
                            </MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                per day
                            </MudText>
                        </div>
                        
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-2">
                            Condition: @(tool.Condition ?? "Unknown")
                        </MudText>
                        
                        @if (tool.Rating.HasValue)
                        {
                            <div class="d-flex align-center gap-2 mb-3">
                                <MudRating ReadOnly="true" SelectedValue="@((int)tool.Rating.Value)" MaxValue="5" Size="Size.Small" />
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    (@tool.ReviewCount)
                                </MudText>
                            </div>
                        }
                    </MudCardContent>
                    
                </MudCard>
            </MudItem>
            }
        }
    </MudGrid>
}
<!-- Empty State -->
@if (myTools == null || !myTools.Any())
{
    <MudPaper Class="pa-8 text-center" Elevation="2" Style="border-radius: 12px;">
        <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Color="Color.Secondary" Class="mb-4" Style="font-size: 4rem;" />
        <MudText Typo="Typo.h5" Color="Color.Secondary" Class="mb-2">No tools yet</MudText>
        <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
            Start earning money by sharing your tools with neighbors!
        </MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/tools/create" StartIcon="@Icons.Material.Filled.Add" Size="Size.Large">
            Add Your First Tool
        </MudButton>
    </MudPaper>
}
    </MudTabPanel>

    <MudTabPanel Text="My Bundles" Icon="@Icons.Material.Filled.Inventory2">
        
        <!-- Bundle Stats Cards -->
        <MudGrid Class="mb-6">
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="4" Style="border-radius: 12px;">
                    <MudCardContent Class="text-center">
                        <MudIcon Icon="@Icons.Material.Filled.Inventory2" Size="Size.Large" Color="Color.Primary" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Primary">@GetTotalBundlesCount()</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Total Bundles</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="4" Style="border-radius: 12px;">
                    <MudCardContent Class="text-center">
                        <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Large" Color="Color.Warning" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Warning">@GetFeaturedBundlesCount()</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Featured</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="4" Style="border-radius: 12px;">
                    <MudCardContent Class="text-center">
                        <MudIcon Icon="@Icons.Material.Filled.Visibility" Size="Size.Large" Color="Color.Info" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Info">@GetTotalBundleViews()</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Total Views</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="4" Style="border-radius: 12px;">
                    <MudCardContent Class="text-center">
                        <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Large" Color="Color.Success" Class="mb-2" />
                        <MudText Typo="Typo.h4" Color="Color.Success">@GetTotalBundleRentals()</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Rentals</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Bundles Loading State -->
        @if (isBundlesLoading)
        {
            <MudPaper Class="pa-8 text-center" Elevation="2" Style="border-radius: 12px;">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                <MudText Typo="Typo.h6" Class="mt-4">Loading your bundles...</MudText>
            </MudPaper>
        }
        <!-- Bundles Error State -->
        @if (!string.IsNullOrEmpty(bundleErrorMessage))
        {
            <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => bundleErrorMessage = string.Empty)">
                @bundleErrorMessage
            </MudAlert>
        }
        <!-- Bundles Grid -->
        @if (myBundles?.Items?.Any() == true)
        {
            <MudGrid>
                @foreach (var bundle in myBundles.Items)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard Elevation="4" Style="height: 100%; border-radius: 12px; transition: transform 0.2s; cursor: pointer;" Class="hover-card" @onclick="() => ViewBundle(bundle.Id)">
                            @{
                                var myBundleImageUrl = !string.IsNullOrEmpty(bundle.ImageUrl) ? UrlService.GetFileUrl(bundle.ImageUrl) : string.Empty;
                                var hasValidMyBundleImage = !string.IsNullOrEmpty(myBundleImageUrl);
                                var myBundleKey = $"mybundle_{bundle.Id}";
                            }
                            <div style="position: relative; height: 200px; border-radius: 12px 12px 0 0; overflow: hidden;">
                                @if (hasValidMyBundleImage)
                                {
                                    <img src="@myBundleImageUrl" 
                                         style="width: 100%; height: 200px; object-fit: cover; @(GetMyBundleImageLoadError(myBundleKey) ? "display: none;" : "")" 
                                         class="mybundle-image"
                                         @onerror="@(() => HandleMyBundleImageError(myBundleKey))" 
                                         @onload="@(() => HandleMyBundleImageLoad(myBundleKey))" />
                                }
                                
                                @if (!hasValidMyBundleImage || GetMyBundleImageLoadError(myBundleKey))
                                {
                                    <ThemeAwarePlaceholder Height="200px" 
                                                          BorderRadius="12px 12px 0 0"
                                                          Icon="@Icons.Material.Filled.Inventory" 
                                                          IconSize="Size.Large"
                                                          IconFontSize="3rem"
                                                          AdditionalClass="mybundle-image" />
                                }
                            </div>
                            
                            <MudCardContent>
                                <MudText Typo="Typo.h6" GutterBottom="true">@bundle.Name</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3" Style="height: 3em; overflow: hidden;">
                                    @(bundle.Description.Length > 80 ? bundle.Description.Substring(0, 80) + "..." : bundle.Description)
                                </MudText>
                                
                                <div class="d-flex justify-space-between align-center mb-3">
                                    <MudChip T="string" Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Category">
                                        @bundle.Category
                                    </MudChip>
                                    @if (bundle.IsFeatured)
                                    {
                                        <MudChip T="string" Color="Color.Warning" Size="Size.Small" Icon="@Icons.Material.Filled.Star">
                                            Featured
                                        </MudChip>
                                    }
                                </div>
                                
                                <!-- Bundle Approval Status - Show if not approved -->
                                @if (!bundle.IsApproved)
                                {
                                    <div class="mb-3">
                                        @if (bundle.PendingApproval)
                                        {
                                            <MudChip T="string" Color="Color.Warning" 
                                                   Size="Size.Small" 
                                                   Icon="@Icons.Material.Filled.HourglassEmpty">
                                                Pending Approval
                                            </MudChip>
                                        }
                                        else if (!string.IsNullOrEmpty(bundle.RejectionReason))
                                        {
                                            <MudTooltip Text="@($"Rejected: {bundle.RejectionReason}")">
                                                <MudChip T="string" Color="Color.Error" 
                                                       Size="Size.Small" 
                                                       Icon="@Icons.Material.Filled.Block">
                                                    Rejected
                                                </MudChip>
                                            </MudTooltip>
                                        }
                                        else
                                        {
                                            <MudChip T="string" Color="Color.Default" 
                                                   Size="Size.Small" 
                                                   Icon="@Icons.Material.Filled.Visibility">
                                                Draft
                                            </MudChip>
                                        }
                                    </div>
                                }
                                
                                <div class="d-flex justify-space-between align-center mb-2">
                                    <MudText Typo="Typo.h6" Color="Color.Primary">
                                        $@bundle.DiscountedCost.ToString("F2")
                                    </MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        per day
                                    </MudText>
                                </div>
                                
                                <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-2">
                                    @bundle.Tools.Count tool@(bundle.Tools.Count != 1 ? "s" : "") included
                                </MudText>
                                
                                <div class="d-flex justify-space-between align-center">
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @bundle.ViewCount views
                                    </MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @bundle.RentalCount rental@(bundle.RentalCount != 1 ? "s" : "")
                                    </MudText>
                                </div>
                            </MudCardContent>
                            
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>

            <!-- Pagination -->
            @if (myBundles.TotalPages > 1)
            {
                <MudStack AlignItems="AlignItems.Center" Class="mt-6">
                    <MudPagination Count="myBundles.TotalPages" 
                                 Selected="currentBundlePage" 
                                 SelectedChanged="OnBundlePageChanged"
                                 Color="Color.Primary" 
                                 Size="Size.Large" />
                </MudStack>
            }
        }
        <!-- Bundles Empty State -->
        @if (myBundles == null || !myBundles.Items.Any())
        {
            <MudPaper Class="pa-8 text-center" Elevation="2" Style="border-radius: 12px;">
                <MudIcon Icon="@Icons.Material.Filled.Inventory2" Size="Size.Large" Color="Color.Secondary" Class="mb-4" Style="font-size: 4rem;" />
                <MudText Typo="Typo.h5" Color="Color.Secondary" Class="mb-2">No bundles yet</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                    Create tool bundles to offer complete project solutions and increase your earnings!
                </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/bundles/create" StartIcon="@Icons.Material.Filled.Add" Size="Size.Large">
                    Create Your First Bundle
                </MudButton>
            </MudPaper>
        }
    </MudTabPanel>
</MudTabs>

<style>
    .hover-card:hover {
        transform: translateY(-4px);
    }
    
    .mytool-image,
    .mybundle-image {
        background: linear-gradient(45deg, #f5f5f5 0%, #e0e0e0 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }
</style>

@code {
    // Tools variables
    private List<Tool>? myTools;
    private string errorMessage = string.Empty;
    private bool isLoading = true;

    // Bundles variables
    private PagedResult<BundleModel>? myBundles;
    private string bundleErrorMessage = string.Empty;
    private bool isBundlesLoading = true;
    private int currentBundlePage = 1;

    // Tab management
    private int activeTab = 0;
    
    // Image error tracking
    private Dictionary<string, bool> myToolImageLoadErrors = new();
    private Dictionary<string, bool> myBundleImageLoadErrors = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            LoadMyTools(),
            LoadMyBundles()
        );
    }

    private async Task LoadMyTools()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await ToolService.GetMyToolsAsync();
            
            if (result.Success)
            {
                myTools = result.Data;
            }
            else
            {
                errorMessage = result.Message ?? "Failed to load your tools.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditTool(string toolId)
    {
        Navigation.NavigateTo($"/tools/edit/{toolId}?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
    }

    private void ViewTool(string toolId)
    {
        Navigation.NavigateTo($"/tools/{toolId}?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
    }

    private void DeleteTool(string toolId, string toolName)
    {
        // TODO: Add confirmation dialog
        // For now, just show info message
        Snackbar.Add("Tool deletion feature coming soon!", Severity.Info);
    }

    // Helper methods for display logic
    private int GetTotalToolsCount()
    {
        return myTools?.Count ?? 0;
    }

    private int GetAvailableToolsCount()
    {
        return myTools?.Count(t => t.IsAvailable) ?? 0;
    }

    private int GetRentedToolsCount()
    {
        return myTools?.Count(t => !t.IsAvailable) ?? 0;
    }

    private string GetDailyPotential()
    {
        if (myTools == null || !myTools.Any())
            return "$0";
        
        return "$" + myTools.Sum(t => t.DailyRate).ToString("F0");
    }

    private string GetTruncatedDescription(string description)
    {
        if (string.IsNullOrEmpty(description))
            return "";
        
        return description.Length > 80 
            ? description.Substring(0, 80) + "..." 
            : description;
    }

    private string GetToolName(Tool tool)
    {
        return tool?.Name ?? "Unknown Tool";
    }

    private string GetToolDescription(Tool tool)
    {
        return GetTruncatedDescription(tool?.Description ?? "");
    }

    // Bundle methods
    private async Task LoadMyBundles()
    {
        isBundlesLoading = true;
        bundleErrorMessage = string.Empty;

        try
        {
            var result = await BundleService.GetMyBundlesAsync(page: currentBundlePage, pageSize: 12);
            
            if (result.Success)
            {
                myBundles = result.Data;
            }
            else
            {
                bundleErrorMessage = result.Message ?? "Failed to load bundles.";
            }
        }
        catch (Exception ex)
        {
            bundleErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isBundlesLoading = false;
        }
    }

    private async Task OnBundlePageChanged(int page)
    {
        currentBundlePage = page;
        await LoadMyBundles();
    }

    private void EditBundle(Guid bundleId)
    {
        Navigation.NavigateTo($"/bundles/{bundleId}/edit");
    }

    private void ViewBundle(Guid bundleId)
    {
        Navigation.NavigateTo($"/bundles/{bundleId}");
    }

    private async Task DeleteBundle(Guid bundleId, string bundleName)
    {
        // Show confirmation dialog - we'll reuse the same pattern as tools
        bool confirmed = await ShowDeleteConfirmation($"Are you sure you want to delete the bundle \"{bundleName}\"?");
        
        if (!confirmed) return;

        try
        {
            var result = await BundleService.DeleteBundleAsync(bundleId);
            
            if (result.Success)
            {
                Snackbar.Add($"Bundle \"{bundleName}\" deleted successfully", Severity.Success);
                await LoadMyBundles(); // Refresh the list
            }
            else
            {
                Snackbar.Add($"Error deleting bundle: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting bundle: {ex.Message}", Severity.Error);
        }
    }

    // Bundle statistics methods
    private int GetTotalBundlesCount()
    {
        return myBundles?.TotalCount ?? 0;
    }

    private int GetFeaturedBundlesCount()
    {
        return myBundles?.Items?.Count(b => b.IsFeatured) ?? 0;
    }

    private int GetTotalBundleViews()
    {
        return myBundles?.Items?.Sum(b => b.ViewCount) ?? 0;
    }

    private int GetTotalBundleRentals()
    {
        return myBundles?.Items?.Sum(b => b.RentalCount) ?? 0;
    }

    private async Task<bool> ShowDeleteConfirmation(string message)
    {
        var parameters = new DialogParameters
        {
            { "Title", "Delete Bundle" },
            { "Message", message },
            { "ConfirmText", "Delete" },
            { "ConfirmColor", Color.Error }
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = DialogService.Show<ConfirmationDialog>("Delete Bundle", parameters, options);
        var result = await dialog.Result;

        return !result.Canceled && result.Data is ConfirmationDialogResult dialogResult && dialogResult.Confirmed;
    }
    
    // Image error handling methods for tools
    private bool GetMyToolImageLoadError(string toolKey)
    {
        return myToolImageLoadErrors.GetValueOrDefault(toolKey, false);
    }
    
    private void HandleMyToolImageError(string toolKey)
    {
        myToolImageLoadErrors[toolKey] = true;
        StateHasChanged();
    }
    
    private void HandleMyToolImageLoad(string toolKey)
    {
        myToolImageLoadErrors[toolKey] = false;
        StateHasChanged();
    }
    
    // Image error handling methods for bundles
    private bool GetMyBundleImageLoadError(string bundleKey)
    {
        return myBundleImageLoadErrors.GetValueOrDefault(bundleKey, false);
    }
    
    private void HandleMyBundleImageError(string bundleKey)
    {
        myBundleImageLoadErrors[bundleKey] = true;
        StateHasChanged();
    }
    
    private void HandleMyBundleImageLoad(string bundleKey)
    {
        myBundleImageLoadErrors[bundleKey] = false;
        StateHasChanged();
    }
}