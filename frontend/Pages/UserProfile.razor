@page "/users/{UserId}"
@using MudBlazor
@using frontend.Models
@using frontend.Services
@using frontend.Components.Messages
@inject IPublicProfileService PublicProfileService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject INavigationHelperService NavigationHelper
@inject MessageService MessageService
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthStateProvider
@inject IUrlService UrlService

<PageTitle>@GetPageTitle() - NeighborTools</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (isLoading)
    {
        <div class="d-flex justify-center align-center" style="min-height: 400px;">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
        </div>
    }
    else if (profile == null)
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">
            <div class="d-flex align-center">
                <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-2" />
                <div>
                    <MudText Typo="Typo.h6">User Not Found</MudText>
                    <MudText Typo="Typo.body2">The requested user profile could not be found or is not available.</MudText>
                </div>
            </div>
        </MudAlert>
        
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   OnClick="GoBack">
            Back
        </MudButton>
    }
    else
    {
        <!-- Profile Header -->
        <MudPaper Class="pa-6 mb-4" Elevation="2" Style="border-radius: 16px;">
            <div class="d-flex flex-column flex-md-row align-center gap-4">
                <!-- Profile Picture -->
                <div class="d-flex justify-center">
                    @if (!string.IsNullOrEmpty(profile.ProfilePictureUrl))
                    {
                        <MudAvatar Size="Size.Large" 
                                   Style="width: 120px; height: 120px; font-size: 2.5rem;">
                            <MudImage Src="@profile.ProfilePictureUrl" 
                                      Alt="@GetDisplayName()" 
                                      ObjectFit="ObjectFit.Cover"
                                      Style="width: 100%; height: 100%;" />
                        </MudAvatar>
                    }
                    else
                    {
                        <MudAvatar Size="Size.Large" 
                                   Color="Color.Primary" 
                                   Style="width: 120px; height: 120px; font-size: 2.5rem;">
                            @GetUserInitials()
                        </MudAvatar>
                    }
                </div>

                <!-- Profile Info -->
                <div class="flex-grow-1 text-center text-md-start">
                    <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-2">
                        @GetDisplayName()
                    </MudText>
                    
                    @if (!string.IsNullOrEmpty(profile.Location))
                    {
                        <div class="d-flex align-center justify-center justify-md-start mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.LocationOn" 
                                     Size="Size.Small" 
                                     Color="Color.Secondary" 
                                     Class="mr-1" />
                            <MudText Typo="Typo.body1" Color="Color.Secondary">
                                @profile.Location
                            </MudText>
                        </div>
                    }

                    <div class="d-flex align-center justify-center justify-md-start mb-3">
                        <MudIcon Icon="@Icons.Material.Filled.CalendarToday" 
                                 Size="Size.Small" 
                                 Color="Color.Secondary" 
                                 Class="mr-1" />
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Member since @profile.JoinedDate.ToString("MMMM yyyy")
                        </MudText>
                    </div>

                    <!-- Contact Information and Actions -->
                    <div class="d-flex flex-column flex-md-row align-center gap-3">
                        <div class="d-flex flex-column flex-md-row gap-2">
                            @if (!string.IsNullOrEmpty(profile.Email))
                            {
                                <MudChip T="string"
                                         Icon="@Icons.Material.Filled.Email" 
                                         Color="Color.Secondary" 
                                         Variant="Variant.Outlined"
                                         Size="Size.Small">
                                    @profile.Email
                                </MudChip>
                            }
                            @if (!string.IsNullOrEmpty(profile.PhoneNumber))
                            {
                                <MudChip T="string"
                                         Icon="@Icons.Material.Filled.Phone" 
                                         Color="Color.Secondary" 
                                         Variant="Variant.Outlined"
                                         Size="Size.Small">
                                    @profile.PhoneNumber
                                </MudChip>
                            }
                        </div>
                        
                        @if (!isOwnProfile)
                        {
                            <MudButton Variant="Variant.Filled" 
                                       Color="Color.Primary" 
                                       Size="Size.Medium"
                                       StartIcon="@Icons.Material.Filled.Message"
                                       OnClick="SendMessage">
                                Send Message
                            </MudButton>
                        }
                    </div>
                </div>
            </div>
        </MudPaper>

        <!-- Statistics Cards -->
        @if (profile.Statistics != null && HasVisibleStatistics())
        {
            <MudGrid Class="mb-4">
                @if (profile.Statistics.ToolsShared.HasValue)
                {
                    <MudItem xs="6" md="3">
                        <MudPaper Class="pa-4 text-center" Elevation="1" Style="border-radius: 12px;">
                            <MudIcon Icon="@Icons.Material.Filled.Build" 
                                     Color="Color.Primary" 
                                     Size="Size.Large" 
                                     Class="mb-2" />
                            <MudText Typo="Typo.h5" Color="Color.Primary">
                                @profile.Statistics.ToolsShared
                            </MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Tools Shared
                            </MudText>
                        </MudPaper>
                    </MudItem>
                }

                @if (profile.Statistics.SuccessfulRentals.HasValue)
                {
                    <MudItem xs="6" md="3">
                        <MudPaper Class="pa-4 text-center" Elevation="1" Style="border-radius: 12px;">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" 
                                     Color="Color.Success" 
                                     Size="Size.Large" 
                                     Class="mb-2" />
                            <MudText Typo="Typo.h5" Color="Color.Success">
                                @profile.Statistics.SuccessfulRentals
                            </MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Completed Rentals
                            </MudText>
                        </MudPaper>
                    </MudItem>
                }

                @if (profile.Statistics.AverageRating.HasValue && profile.Statistics.ReviewCount.HasValue)
                {
                    <MudItem xs="6" md="3">
                        <MudPaper Class="pa-4 text-center" Elevation="1" Style="border-radius: 12px;">
                            <div class="d-flex justify-center align-center mb-2">
                                <MudRating ReadOnly="true" 
                                           SelectedValue="(int)Math.Round(profile.Statistics.AverageRating.Value)"
                                           MaxValue="5"
                                           Size="Size.Small" />
                            </div>
                            <MudText Typo="Typo.h6" Color="Color.Warning">
                                @profile.Statistics.AverageRating.Value.ToString("F1")
                            </MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                (@profile.Statistics.ReviewCount reviews)
                            </MudText>
                        </MudPaper>
                    </MudItem>
                }

                @if (profile.Statistics.ResponseTime.HasValue)
                {
                    <MudItem xs="6" md="3">
                        <MudPaper Class="pa-4 text-center" Elevation="1" Style="border-radius: 12px;">
                            <MudIcon Icon="@Icons.Material.Filled.AccessTime" 
                                     Color="Color.Info" 
                                     Size="Size.Large" 
                                     Class="mb-2" />
                            <MudText Typo="Typo.h6" Color="Color.Info">
                                @GetResponseTimeText()
                            </MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Response Time
                            </MudText>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        }

        <!-- Content Tabs -->
        <MudTabs Elevation="2" Rounded="true" Color="Color.Primary" @bind-ActivePanelIndex="activeTabIndex">
            <MudTabPanel Text="Tools" Icon="@Icons.Material.Filled.Build">
                <div class="pa-4">
                    <div class="d-flex justify-space-between align-center mb-4">
                        <MudText Typo="Typo.h6">Available Tools (@(userTools?.Count ?? 0))</MudText>
                        @if (userTools?.Any() == true && userTools.Count >= toolsPageSize)
                        {
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="LoadMoreTools" StartIcon="@Icons.Material.Filled.ExpandMore">
                                Load More
                            </MudButton>
                        }
                    </div>
                    
                    @if (isLoadingTools)
                    {
                        <div class="d-flex justify-center align-center" style="min-height: 200px;">
                            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                        </div>
                    }
                    else if (userTools?.Any() == true)
                    {
                        <MudGrid>
                            @foreach (var tool in userTools)
                            {
                                <MudItem xs="12" sm="6" md="4">
                                    <MudCard Elevation="4" Style="height: 100%; border-radius: 12px;">
                                        @if (!string.IsNullOrEmpty(tool.ImageUrl))
                                        {
                                            <MudCardMedia Image="@UrlService.GetFileUrl(tool.ImageUrl)" Height="200" Style="border-radius: 12px 12px 0 0;" />
                                        }
                                        else
                                        {
                                            <div class="d-flex align-center justify-center" style="height: 200px; background: var(--mud-palette-surface-variant); border-radius: 12px 12px 0 0;">
                                                <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Large" Color="Color.Secondary" />
                                            </div>
                                        }
                                        
                                        <MudCardContent>
                                            <MudText Typo="Typo.h6" GutterBottom="true">@tool.Name</MudText>
                                            <MudText Typo="Typo.body2" Class="mb-2" Color="Color.Secondary">@tool.Description</MudText>
                                            
                                            <div class="d-flex justify-space-between align-center mb-2">
                                                <MudChip T="string" Color="Color.Primary" Size="Size.Small" Variant="Variant.Outlined">
                                                    @tool.Category
                                                </MudChip>
                                                <MudText Typo="Typo.h6" Color="Color.Primary">
                                                    $@tool.DailyRate.ToString("F2")/day
                                                </MudText>
                                            </div>
                                            
                                            @if (tool.Rating > 0)
                                            {
                                                <div class="d-flex align-center mb-2">
                                                    <MudRating ReadOnly="true" SelectedValue="(int)Math.Round(tool.Rating)" MaxValue="5" Size="Size.Small" />
                                                    <MudText Typo="Typo.caption" Class="ml-2">(@tool.ReviewCount reviews)</MudText>
                                                </div>
                                            }
                                            
                                            <MudChip T="string" Color="@(tool.IsAvailable ? Color.Success : Color.Error)" Size="Size.Small">
                                                @(tool.IsAvailable ? "Available" : "Not Available")
                                            </MudChip>
                                        </MudCardContent>
                                        
                                        <MudCardActions>
                                            <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@($"/tools/{tool.Id}")" StartIcon="@Icons.Material.Filled.Visibility">
                                                View Details
                                            </MudButton>
                                        </MudCardActions>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                    else
                    {
                        <MudPaper Class="pa-8 text-center" Elevation="1" Style="border-radius: 12px;">
                            <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                            <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">No Tools Available</MudText>
                            <MudText Typo="Typo.body1" Color="Color.Secondary">
                                This user hasn't shared any tools yet.
                            </MudText>
                        </MudPaper>
                    }
                </div>
            </MudTabPanel>

            <MudTabPanel Text="Reviews" Icon="@Icons.Material.Filled.Star">
                <div class="pa-4">
                    <div class="d-flex justify-space-between align-center mb-4">
                        <MudText Typo="Typo.h6">Reviews (@(userReviews?.Count ?? 0))</MudText>
                        @if (userReviews?.Any() == true && userReviews.Count >= reviewsPageSize)
                        {
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="LoadMoreReviews" StartIcon="@Icons.Material.Filled.ExpandMore">
                                Load More
                            </MudButton>
                        }
                    </div>
                    
                    @if (isLoadingReviews)
                    {
                        <div class="d-flex justify-center align-center" style="min-height: 200px;">
                            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                        </div>
                    }
                    else if (userReviews?.Any() == true)
                    {
                        <MudStack Spacing="3">
                            @foreach (var review in userReviews)
                            {
                                <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px;">
                                    <div class="d-flex align-start gap-3">
                                        @if (!string.IsNullOrEmpty(review.ReviewerAvatarUrl))
                                        {
                                            <MudAvatar Size="Size.Medium">
                                                <MudImage Src="@review.ReviewerAvatarUrl" Alt="@review.ReviewerName" />
                                            </MudAvatar>
                                        }
                                        else
                                        {
                                            <MudAvatar Color="Color.Primary" Size="Size.Medium">
                                                @GetInitials(review.ReviewerName)
                                            </MudAvatar>
                                        }
                                        
                                        <div class="flex-grow-1">
                                            <div class="d-flex justify-space-between align-center mb-2">
                                                <div>
                                                    <MudText Typo="Typo.subtitle1">@review.ReviewerName</MudText>
                                                    <MudText Typo="Typo.caption" Color="Color.Secondary">@review.CreatedAt.ToString("MMM dd, yyyy")</MudText>
                                                </div>
                                                <MudRating ReadOnly="true" SelectedValue="(int)Math.Round(review.Rating)" MaxValue="5" Size="Size.Small" />
                                            </div>
                                            
                                            <MudText Typo="Typo.body2" Class="mb-2">@review.Comment</MudText>
                                            
                                            <MudChip T="string" Color="Color.Info" Size="Size.Small" Variant="Variant.Outlined">
                                                Tool: @review.ToolName
                                            </MudChip>
                                        </div>
                                    </div>
                                </MudPaper>
                            }
                        </MudStack>
                    }
                    else
                    {
                        <MudPaper Class="pa-8 text-center" Elevation="1" Style="border-radius: 12px;">
                            <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                            <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">No Reviews Yet</MudText>
                            <MudText Typo="Typo.body1" Color="Color.Secondary">
                                This user hasn't received any reviews yet.
                            </MudText>
                        </MudPaper>
                    }
                </div>
            </MudTabPanel>
        </MudTabs>
    }
</MudContainer>

@code {
    [Parameter] public string UserId { get; set; } = "";
    
    private PublicUserProfileDto? profile;
    private bool isLoading = true;
    private bool isOwnProfile = false;
    private string? currentUserId;
    
    // Tools tab
    private List<PublicUserToolDto>? userTools;
    private bool isLoadingTools = false;
    private int toolsPage = 1;
    private int toolsPageSize = 6;
    
    // Reviews tab
    private List<PublicUserReviewDto>? userReviews;
    private bool isLoadingReviews = false;
    private int reviewsPage = 1;
    private int reviewsPageSize = 10;
    
    // Tab management
    private int activeTabIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        // Get current user
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        
        await LoadProfileAsync();
        await LoadToolsAsync();
        await LoadReviewsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            await LoadProfileAsync();
            await LoadToolsAsync();
            await LoadReviewsAsync();
        }
    }

    private async Task LoadProfileAsync()
    {
        if (string.IsNullOrEmpty(UserId))
        {
            isLoading = false;
            return;
        }

        try
        {
            isLoading = true;
            var response = await PublicProfileService.GetPublicProfileAsync(UserId);
            
            if (response?.Success == true)
            {
                profile = response.Data;
                isOwnProfile = UserId == currentUserId;
            }
            else
            {
                profile = null;
                Snackbar.Add(response?.Message ?? "Failed to load user profile", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            profile = null;
            Snackbar.Add($"Error loading profile: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetPageTitle()
    {
        if (profile == null) return "User Profile";
        return $"{GetDisplayName()}'s Profile";
    }

    private string GetDisplayName()
    {
        if (profile == null) return "Unknown User";
        
        if (!string.IsNullOrEmpty(profile.DisplayName))
            return profile.DisplayName;
            
        if (!string.IsNullOrEmpty(profile.FirstName) || !string.IsNullOrEmpty(profile.LastName))
            return $"{profile.FirstName} {profile.LastName}".Trim();
            
        return "NeighborTools User";
    }

    private string GetUserInitials()
    {
        if (profile == null) return "?";
        
        var initials = "";
        if (!string.IsNullOrEmpty(profile.FirstName))
            initials += profile.FirstName[0];
        if (!string.IsNullOrEmpty(profile.LastName))
            initials += profile.LastName[0];
            
        return string.IsNullOrEmpty(initials) ? "?" : initials.ToUpper();
    }

    private bool HasVisibleStatistics()
    {
        return profile?.Statistics != null && (
            profile.Statistics.ToolsShared.HasValue ||
            profile.Statistics.SuccessfulRentals.HasValue ||
            profile.Statistics.AverageRating.HasValue ||
            profile.Statistics.ResponseTime.HasValue
        );
    }

    private string GetResponseTimeText()
    {
        if (!profile?.Statistics?.ResponseTime.HasValue ?? true)
            return "N/A";
            
        var hours = profile.Statistics.ResponseTime.Value;
        if (hours < 1)
            return "< 1 hour";
        else if (hours < 24)
            return $"{hours} hours";
        else
            return $"{hours / 24} days";
    }

    private async Task LoadToolsAsync()
    {
        if (string.IsNullOrEmpty(UserId))
        {
            userTools = new List<PublicUserToolDto>();
            return;
        }

        try
        {
            isLoadingTools = true;
            var response = await PublicProfileService.GetUserToolsAsync(UserId, toolsPage, toolsPageSize);
            
            if (response?.Success == true)
            {
                userTools = response.Data ?? new List<PublicUserToolDto>();
            }
            else
            {
                userTools = new List<PublicUserToolDto>();
                Snackbar.Add(response?.Message ?? "Failed to load user tools", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            userTools = new List<PublicUserToolDto>();
            Snackbar.Add($"Error loading tools: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingTools = false;
        }
    }

    private async Task LoadReviewsAsync()
    {
        if (string.IsNullOrEmpty(UserId))
        {
            userReviews = new List<PublicUserReviewDto>();
            return;
        }

        try
        {
            isLoadingReviews = true;
            var response = await PublicProfileService.GetUserReviewsAsync(UserId, reviewsPage, reviewsPageSize);
            
            if (response?.Success == true)
            {
                userReviews = response.Data ?? new List<PublicUserReviewDto>();
            }
            else
            {
                userReviews = new List<PublicUserReviewDto>();
                Snackbar.Add(response?.Message ?? "Failed to load user reviews", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            userReviews = new List<PublicUserReviewDto>();
            Snackbar.Add($"Error loading reviews: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingReviews = false;
        }
    }

    private async Task LoadMoreTools()
    {
        if (string.IsNullOrEmpty(UserId) || isLoadingTools)
            return;

        try
        {
            isLoadingTools = true;
            toolsPage++;
            var response = await PublicProfileService.GetUserToolsAsync(UserId, toolsPage, toolsPageSize);
            
            if (response?.Success == true && response.Data?.Any() == true)
            {
                userTools = (userTools ?? new List<PublicUserToolDto>()).Concat(response.Data).ToList();
            }
            else
            {
                // No more tools, reset page
                toolsPage--;
            }
        }
        catch (Exception ex)
        {
            toolsPage--;
            Snackbar.Add($"Error loading more tools: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingTools = false;
        }
    }

    private async Task LoadMoreReviews()
    {
        if (string.IsNullOrEmpty(UserId) || isLoadingReviews)
            return;

        try
        {
            isLoadingReviews = true;
            reviewsPage++;
            var response = await PublicProfileService.GetUserReviewsAsync(UserId, reviewsPage, reviewsPageSize);
            
            if (response?.Success == true && response.Data?.Any() == true)
            {
                userReviews = (userReviews ?? new List<PublicUserReviewDto>()).Concat(response.Data).ToList();
            }
            else
            {
                // No more reviews, reset page
                reviewsPage--;
            }
        }
        catch (Exception ex)
        {
            reviewsPage--;
            Snackbar.Add($"Error loading more reviews: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingReviews = false;
        }
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrEmpty(name)) return "?";
        
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 1)
        {
            return parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper();
        }
        
        return $"{parts[0][0]}{parts[^1][0]}".ToUpper();
    }

    private async Task GoBack()
    {
        await NavigationHelper.NavigateBack("/tools");
    }

    private async Task SendMessage()
    {
        if (profile == null) return;

        var parameters = new DialogParameters 
        { 
            { "RecipientId", UserId },
            { "RecipientName", GetDisplayName() }
        };
        
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        
        var dialog = DialogService.Show<NewMessageDialog>("Send Message", parameters, options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            Snackbar.Add("Message sent successfully!", Severity.Success);
        }
    }
}