@page "/bundles/create"
@using ToolsSharing.Frontend.Models
@using frontend.Models
@using ToolsSharing.Frontend.Services
@using frontend.Services
@using System.ComponentModel.DataAnnotations
@inject BundleService BundleService
@inject IToolService ToolService
@inject UserService UserService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IUrlService UrlService
@inject IDialogService DialogService
@inject IBreadcrumbService BreadcrumbService
@attribute [Authorize]

<PageTitle>Create Bundle - NeighborTools</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <!-- Breadcrumb -->
    <BreadcrumbNavigation Items="@breadcrumbItems" />
    <MudForm @ref="form" Model="@createBundle" Validation="@(new DataAnnotationsValidator())">
        <MudGrid>
            <!-- Header with Actions -->
            <MudItem xs="12">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                    <div>
                        <MudText Typo="Typo.h4" Color="Color.Primary">Create New Bundle</MudText>
                        <MudText Typo="Typo.body1" Color="Color.Secondary">
                            Create a curated collection of tools for specific projects
                        </MudText>
                    </div>
                    <MudStack Row Spacing="2">
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Secondary" 
                                   StartIcon="@Icons.Material.Filled.Preview"
                                   OnClick="ShowPreview"
                                   Disabled="@(!createBundle.Tools.Any())">
                            Preview
                        </MudButton>
                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Secondary" 
                                   StartIcon="@Icons.Material.Filled.SaveAs"
                                   OnClick="SaveAsDraft"
                                   Disabled="@isSubmitting">
                            Save as Draft
                        </MudButton>
                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Secondary" 
                                   StartIcon="@Icons.Material.Filled.Cancel"
                                   OnClick="Cancel">
                            Cancel
                        </MudButton>
                    </MudStack>
                </MudStack>
            </MudItem>

            <!-- Progress Indicator -->
            <MudItem xs="12">
                <MudStepper @ref="stepper" 
                           HeaderSize="Size.Medium" 
                           HeaderTextView="HeaderTextView.All"
                           Color="Color.Primary"
                           Class="mb-6">
                    <MudStep Title="Basic Info" Icon="@Icons.Material.Filled.Info" IsResultStep="false" />
                    <MudStep Title="Tools" Icon="@Icons.Material.Filled.Build" IsResultStep="false" />
                    <MudStep Title="Settings" Icon="@Icons.Material.Filled.Settings" IsResultStep="false" />
                    <MudStep Title="Review" Icon="@Icons.Material.Filled.CheckCircle" IsResultStep="true" />
                </MudStepper>
            </MudItem>

            <!-- Left Column - Form -->
            <MudItem xs="12" lg="8">
                <!-- Basic Information Section -->
                <MudCard Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Primary" />
                                <MudText Typo="Typo.h6">Basic Information</MudText>
                            </MudStack>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <!-- Name and Category -->
                            <MudItem xs="12" md="8">
                                <MudTextField @bind-Value="createBundle.Name"
                                            Label="Bundle Name"
                                            Required="true"
                                            MaxLength="200"
                                            Counter="200"
                                            HelperText="Give your bundle a descriptive, catchy name"
                                            Variant="Variant.Outlined"
                                            For="@(() => createBundle.Name)" />
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudSelect @bind-Value="createBundle.Category"
                                         Label="Category"
                                         Required="true"
                                         Variant="Variant.Outlined"
                                         For="@(() => createBundle.Category)">
                                    <MudSelectItem Value="@("")">Select Category</MudSelectItem>
                                    <MudSelectItem Value="@("Woodworking")">ü™µ Woodworking</MudSelectItem>
                                    <MudSelectItem Value="@("Home Improvement")">üè† Home Improvement</MudSelectItem>
                                    <MudSelectItem Value="@("Gardening")">üå± Gardening</MudSelectItem>
                                    <MudSelectItem Value="@("Automotive")">üöó Automotive</MudSelectItem>
                                    <MudSelectItem Value="@("Plumbing")">üîß Plumbing</MudSelectItem>
                                    <MudSelectItem Value="@("Electrical")">‚ö° Electrical</MudSelectItem>
                                    <MudSelectItem Value="@("Painting")">üé® Painting</MudSelectItem>
                                    <MudSelectItem Value="@("Cleaning")">üßπ Cleaning</MudSelectItem>
                                    <MudSelectItem Value="@("Construction")">üèóÔ∏è Construction</MudSelectItem>
                                    <MudSelectItem Value="@("Other")">üì¶ Other</MudSelectItem>
                                </MudSelect>
                            </MudItem>

                            <!-- Location -->
                            <MudItem xs="12">
                                <MudTextField @bind-Value="createBundle.Location"
                                            Label="Bundle Location (Optional)"
                                            MaxLength="500"
                                            Counter="500"
                                            HelperText="Where is this bundle available? Leave empty to use your profile location. For security, keep it general (e.g., 'Downtown Toronto', 'Berlin Mitte')."
                                            Variant="Variant.Outlined"
                                            Adornment="Adornment.Start"
                                            AdornmentIcon="@Icons.Material.Filled.LocationOn"
                                            For="@(() => createBundle.Location)" />
                                
                                @if (ShowLocationWarning)
                                {
                                    <MudAlert Severity="Severity.Warning" Icon="@Icons.Material.Filled.LocationOff" Class="mt-2">
                                        <strong>Location Warning:</strong> No location specified and your profile has no public location set. 
                                        This may prevent your bundle from appearing in location-based searches and could reduce rental opportunities.
                                        <MudLink Href="/profile" Class="ml-2">Update your profile location</MudLink>
                                    </MudAlert>
                                }
                            </MudItem>

                            <!-- Description -->
                            <MudItem xs="12">
                                <MudTextField @bind-Value="createBundle.Description"
                                            Label="Description"
                                            Required="true"
                                            Lines="4"
                                            MaxLength="2000"
                                            Counter="2000"
                                            HelperText="Describe what this bundle is for and what projects it's perfect for"
                                            Variant="Variant.Outlined"
                                            For="@(() => createBundle.Description)" />
                            </MudItem>

                            <!-- Guidelines -->
                            <MudItem xs="12">
                                <MudTextField @bind-Value="createBundle.Guidelines"
                                            Label="Usage Guidelines & Instructions"
                                            Lines="4"
                                            MaxLength="5000"
                                            Counter="5000"
                                            HelperText="Provide step-by-step instructions on how to use this bundle effectively"
                                            Variant="Variant.Outlined"
                                            For="@(() => createBundle.Guidelines)" />
                            </MudItem>

                            <!-- Project Details -->
                            <MudItem xs="12" md="6">
                                <MudSelect @bind-Value="createBundle.RequiredSkillLevel"
                                         Label="Required Skill Level"
                                         Variant="Variant.Outlined"
                                         HelperText="What skill level is needed to use this bundle?">
                                    <MudSelectItem Value="@("Beginner")">üü¢ Beginner - No experience needed</MudSelectItem>
                                    <MudSelectItem Value="@("Intermediate")">üü° Intermediate - Some experience helpful</MudSelectItem>
                                    <MudSelectItem Value="@("Advanced")">üü† Advanced - Significant experience required</MudSelectItem>
                                    <MudSelectItem Value="@("Expert")">üî¥ Expert - Professional level skills</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudNumericField @bind-Value="createBundle.EstimatedProjectDuration"
                                               Label="Estimated Project Duration"
                                               Suffix="hours"
                                               Min="1"
                                               Max="1000"
                                               Variant="Variant.Outlined"
                                               HelperText="How long should a typical project take?"
                                               For="@(() => createBundle.EstimatedProjectDuration)" />
                            </MudItem>

                            <!-- Bundle Image Upload -->
                            <MudItem xs="12">
                                <MudText Typo="Typo.subtitle2" Class="mb-2">Bundle Image</MudText>
                                <MudStack>
                                    @if (!string.IsNullOrEmpty(previewImageUrl))
                                    {
                                        <div class="d-flex align-center">
                                            <MudImage Src="@previewImageUrl" 
                                                     Alt="Bundle preview" 
                                                     Width="200" 
                                                     Height="150" 
                                                     ObjectFit="ObjectFit.Cover" 
                                                     Class="rounded mr-4" />
                                            <div>
                                                <MudText Typo="Typo.body2" Color="Color.Warning">Image ready for preview</MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">Will be uploaded when bundle is created</MudText>
                                                <MudButton Size="Size.Small" 
                                                          Color="Color.Error" 
                                                          StartIcon="@Icons.Material.Filled.Delete"
                                                          OnClick="RemoveImage"
                                                          Class="mt-1">
                                                    Remove Image
                                                </MudButton>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <MudFileUpload T="IBrowserFile" Accept=".jpg,.jpeg,.png,.gif,.webp" MaximumFileCount="1" OnFilesChanged="@(async (args) => await OnImageSelected(args.GetMultipleFiles()))">
                                            <ActivatorContent>
                                                <MudButton Variant="Variant.Outlined" 
                                                          Color="Color.Primary"
                                                          StartIcon="@Icons.Material.Filled.CloudUpload"
                                                          FullWidth="true">
                                                    Upload Bundle Image
                                                </MudButton>
                                            </ActivatorContent>
                                        </MudFileUpload>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            Upload an image that represents this bundle (Max 5MB, JPG/PNG)
                                        </MudText>
                                    }
                                </MudStack>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>

                <!-- Tools Selection Section -->
                <MudCard Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Justify="Justify.SpaceBetween">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.Build" Color="Color.Primary" />
                                    <MudText Typo="Typo.h6">Tools in Bundle</MudText>
                                    <MudChip Size="Size.Small" Color="Color.Primary" Text="@($"{createBundle.Tools.Count} tools")" T="string" />
                                </MudStack>
                                <MudButton Color="Color.Primary" 
                                          StartIcon="@Icons.Material.Filled.Add"
                                          OnClick="@ShowToolSelector"
                                          Size="Size.Small">
                                    Add Tools
                                </MudButton>
                            </MudStack>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (createBundle.Tools.Any())
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                                Drag and drop to reorder tools. Configure quantities and optional settings for each tool.
                            </MudText>

                            <MudStack Spacing="3">
                                @foreach (var bundleTool in createBundle.Tools.OrderBy(t => t.OrderInBundle))
                                {
                                    var tool = availableTools.FirstOrDefault(t => Guid.TryParse(t.Id, out var toolGuid) && toolGuid == bundleTool.ToolId);
                                    if (tool != null)
                                    {
                                        <MudPaper Class="pa-4" Elevation="1" Style="border-left: 4px solid var(--mud-palette-primary);">
                                            <MudGrid AlignItems="Center">
                                                <!-- Drag Handle & Order -->
                                                <MudItem xs="1">
                                                    <MudStack AlignItems="AlignItems.Center">
                                                        <MudIcon Icon="@Icons.Material.Filled.DragIndicator" Color="Color.Secondary" />
                                                        <MudChip Size="Size.Small" Text="@bundleTool.OrderInBundle.ToString()" T="string" />
                                                    </MudStack>
                                                </MudItem>

                                                <!-- Tool Info -->
                                                <MudItem xs="12" sm="5">
                                                    <MudStack>
                                                        <MudButton Variant="Variant.Text" 
                                                                 Color="Color.Primary" 
                                                                 StartIcon="@Icons.Material.Filled.Launch"
                                                                 Size="Size.Small"
                                                                 Class="pa-0 ma-0 text-start"
                                                                 Style="text-transform: none; justify-content: flex-start;"
                                                                 OnClick="@(() => NavigateToTool(tool.Id))">
                                                            <MudText Typo="Typo.subtitle1" Style="text-decoration: underline;">@tool.Name</MudText>
                                                        </MudButton>
                                                        <MudText Typo="Typo.body2" Color="Color.Secondary">@tool.Description</MudText>
                                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                            $@tool.DailyRate.ToString("F2")/day
                                                        </MudText>
                                                    </MudStack>
                                                </MudItem>

                                                <!-- Configuration -->
                                                <MudItem xs="12" sm="5">
                                                    <MudGrid>
                                                        <MudItem xs="6">
                                                            <MudNumericField @bind-Value="bundleTool.QuantityNeeded"
                                                                           Label="Quantity"
                                                                           Min="1"
                                                                           Max="10"
                                                                           Variant="Variant.Outlined"
                                                                           Margin="Margin.Dense" />
                                                        </MudItem>
                                                        <MudItem xs="6">
                                                            <MudSwitch @bind-Value="bundleTool.IsOptional"
                                                                     Label="Optional"
                                                                     Color="Color.Primary"
                                                                     Class="mt-2" />
                                                        </MudItem>
                                                        <MudItem xs="12">
                                                            <MudTextField @bind-Value="bundleTool.UsageNotes"
                                                                        Label="Usage Notes"
                                                                        Placeholder="Special instructions for this tool..."
                                                                        Variant="Variant.Outlined"
                                                                        Margin="Margin.Dense"
                                                                        MaxLength="500" />
                                                        </MudItem>
                                                    </MudGrid>
                                                </MudItem>

                                                <!-- Actions -->
                                                <MudItem xs="1">
                                                    <MudStack>
                                                        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp"
                                                                      Color="Color.Primary"
                                                                      Size="Size.Small"
                                                                      OnClick="@(() => MoveToolUp(bundleTool))"
                                                                      Disabled="@(bundleTool.OrderInBundle == 1)" />
                                                        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown"
                                                                      Color="Color.Primary"
                                                                      Size="Size.Small"
                                                                      OnClick="@(() => MoveToolDown(bundleTool))"
                                                                      Disabled="@(bundleTool.OrderInBundle == createBundle.Tools.Count)" />
                                                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                                      Color="Color.Error"
                                                                      Size="Size.Small"
                                                                      OnClick="@(() => RemoveTool(bundleTool))" />
                                                    </MudStack>
                                                </MudItem>
                                            </MudGrid>
                                        </MudPaper>
                                    }
                                }
                            </MudStack>

                            <!-- Cost Summary -->
                            <MudDivider Class="my-4" />
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudStack>
                                        <MudText Typo="Typo.subtitle2">Bundle Cost Summary (per day)</MudText>
                                        <MudStack Row Justify="Justify.SpaceBetween">
                                            <MudText>Tools Total:</MudText>
                                            <MudText>$@(CalculateToolsTotal().ToString("F2"))</MudText>
                                        </MudStack>
                                        <MudStack Row Justify="Justify.SpaceBetween">
                                            <MudText>Bundle Discount (@(createBundle.BundleDiscount)%):</MudText>
                                            <MudText Color="Color.Success">-$@(CalculateDiscountAmount().ToString("F2"))</MudText>
                                        </MudStack>
                                        <MudDivider />
                                        <MudStack Row Justify="Justify.SpaceBetween">
                                            <MudText Typo="Typo.subtitle1"><strong>Bundle Price:</strong></MudText>
                                            <MudText Typo="Typo.subtitle1" Color="Color.Primary"><strong>$@(CalculateFinalPrice().ToString("F2"))/day</strong></MudText>
                                        </MudStack>
                                    </MudStack>
                                </MudItem>
                            </MudGrid>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Info">
                                <MudText>No tools added yet. Click "Add Tools" to start building your bundle.</MudText>
                            </MudAlert>
                        }
                    </MudCardContent>
                </MudCard>

                <!-- Advanced Settings Section -->
                <MudCard Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" />
                                <MudText Typo="Typo.h6">Bundle Settings</MudText>
                            </MudStack>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <!-- Bundle Discount -->
                            <MudItem xs="12" md="6">
                                <MudNumericField @bind-Value="createBundle.BundleDiscount"
                                               Label="Bundle Discount"
                                               Suffix="%"
                                               Min="0"
                                               Max="50"
                                               Step="5"
                                               Variant="Variant.Outlined"
                                               HelperText="Discount for renting as a bundle vs individual tools"
                                               For="@(() => createBundle.BundleDiscount)" />
                            </MudItem>

                            <!-- Publishing -->
                            <MudItem xs="12" md="6">
                                <MudStack Class="mt-2">
                                    <MudSwitch @bind-Value="createBundle.IsPublished"
                                             Label="Publish Bundle"
                                             Color="Color.Primary" />
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @if (createBundle.IsPublished)
                                        {
                                            <span>‚úÖ Bundle will be visible to all users</span>
                                        }
                                        else
                                        {
                                            <span>üìù Bundle will be saved as draft (only you can see it)</span>
                                        }
                                    </MudText>
                                </MudStack>
                            </MudItem>

                            <!-- Tags -->
                            <MudItem xs="12">
                                <MudTextField @bind-Value="createBundle.Tags"
                                            Label="Tags"
                                            HelperText="Add comma-separated tags to help users find your bundle (e.g., deck building, bathroom renovation, garden setup)"
                                            Variant="Variant.Outlined"
                                            Placeholder="deck building, outdoor, weekend project" />
                                
                                @if (!string.IsNullOrEmpty(createBundle.Tags))
                                {
                                    <MudStack Row Spacing="1" Class="mt-2" Wrap="Wrap.Wrap">
                                        @foreach (var tag in GetTagsList())
                                        {
                                            <MudChip Size="Size.Small" 
                                                    Color="Color.Primary" 
                                                    Text="@tag.Trim()" 
                                                    OnClose="@(() => RemoveTag(tag.Trim()))"
                                                    T="string" />
                                        }
                                    </MudStack>
                                }

                                <!-- Suggested Tags -->
                                @if (suggestedTags.Any())
                                {
                                    <MudText Typo="Typo.caption" Class="mt-2 mb-1">Suggested tags:</MudText>
                                    <MudStack Row Spacing="1" Wrap="Wrap.Wrap">
                                        @foreach (var suggestion in suggestedTags)
                                        {
                                            <MudChip Size="Size.Small" 
                                                    Color="Color.Default" 
                                                    Text="@suggestion"
                                                    OnClick="@(() => AddSuggestedTag(suggestion))"
                                                    T="string" />
                                        }
                                    </MudStack>
                                }
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Right Column - Live Preview & Actions -->
            <MudItem xs="12" lg="4">
                <!-- Live Preview Card -->
                <MudCard Class="sticky" Style="top: 20px;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@Icons.Material.Filled.Preview" Color="Color.Primary" />
                                <MudText Typo="Typo.h6">Live Preview</MudText>
                            </MudStack>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (!string.IsNullOrEmpty(createBundle.Name))
                        {
                            <!-- Preview Bundle Card -->
                            <MudCard Elevation="2" Class="mb-4">
                                @if (!string.IsNullOrEmpty(previewImageUrl))
                                {
                                    <MudImage Src="@previewImageUrl" 
                                             Alt="@createBundle.Name" 
                                             Height="200" 
                                             ObjectFit="ObjectFit.Cover" />
                                }
                                <MudCardContent>
                                    <MudStack>
                                        <MudText Typo="Typo.h6">@createBundle.Name</MudText>
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                            <MudChip Size="Size.Small" Color="Color.Primary" Text="@createBundle.Category" T="string" />
                                            <MudChip Size="Size.Small" Color="Color.Secondary" Text="@createBundle.RequiredSkillLevel" T="string" />
                                        </MudStack>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                                            @(createBundle.Description.Length > 100 ? createBundle.Description.Substring(0, 100) + "..." : createBundle.Description)
                                        </MudText>
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                            <MudText Typo="Typo.caption">@createBundle.Tools.Count tools</MudText>
                                            <MudText Typo="Typo.caption">@createBundle.EstimatedProjectDuration hrs</MudText>
                                        </MudStack>
                                        @if (createBundle.Tools.Any())
                                        {
                                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                                @if (createBundle.BundleDiscount > 0)
                                                {
                                                    <MudStack>
                                                        <MudText Typo="Typo.body2" Style="text-decoration: line-through;" Color="Color.Secondary">
                                                            $@CalculateToolsTotal().ToString("F2")/day
                                                        </MudText>
                                                        <MudText Typo="Typo.h6" Color="Color.Primary">
                                                            $@CalculateFinalPrice().ToString("F2")/day
                                                        </MudText>
                                                    </MudStack>
                                                    <MudChip Size="Size.Small" Color="Color.Success" Text="@($"Save {createBundle.BundleDiscount}%")" T="string" />
                                                }
                                                else
                                                {
                                                    <MudText Typo="Typo.h6" Color="Color.Primary">
                                                        $@CalculateFinalPrice().ToString("F2")/day
                                                    </MudText>
                                                }
                                            </MudStack>
                                        }
                                    </MudStack>
                                </MudCardContent>
                            </MudCard>

                            <!-- Status & Validation -->
                            <MudStack Spacing="2">
                                <MudText Typo="Typo.subtitle2">Bundle Status</MudText>
                                
                                <!-- Validation Checklist -->
                                <MudStack Spacing="1">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@(string.IsNullOrEmpty(createBundle.Name) ? Icons.Material.Filled.RadioButtonUnchecked : Icons.Material.Filled.CheckCircle)" 
                                                Color="@(string.IsNullOrEmpty(createBundle.Name) ? Color.Default : Color.Success)" 
                                                Size="Size.Small" />
                                        <MudText Typo="Typo.body2">Bundle name</MudText>
                                    </MudStack>
                                    
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@(string.IsNullOrEmpty(createBundle.Description) ? Icons.Material.Filled.RadioButtonUnchecked : Icons.Material.Filled.CheckCircle)" 
                                                Color="@(string.IsNullOrEmpty(createBundle.Description) ? Color.Default : Color.Success)" 
                                                Size="Size.Small" />
                                        <MudText Typo="Typo.body2">Description</MudText>
                                    </MudStack>
                                    
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@(string.IsNullOrEmpty(createBundle.Category) ? Icons.Material.Filled.RadioButtonUnchecked : Icons.Material.Filled.CheckCircle)" 
                                                Color="@(string.IsNullOrEmpty(createBundle.Category) ? Color.Default : Color.Success)" 
                                                Size="Size.Small" />
                                        <MudText Typo="Typo.body2">Category</MudText>
                                    </MudStack>
                                    
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@(!createBundle.Tools.Any() ? Icons.Material.Filled.RadioButtonUnchecked : Icons.Material.Filled.CheckCircle)" 
                                                Color="@(!createBundle.Tools.Any() ? Color.Default : Color.Success)" 
                                                Size="Size.Small" />
                                        <MudText Typo="Typo.body2">At least one tool</MudText>
                                    </MudStack>
                                </MudStack>

                                @if (IsFormValid())
                                {
                                    <MudAlert Severity="Severity.Success">
                                        ‚úÖ Bundle is ready to create!
                                    </MudAlert>
                                }
                                else
                                {
                                    <MudAlert Severity="Severity.Warning">
                                        üìù Complete required fields to create bundle
                                    </MudAlert>
                                }
                            </MudStack>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center" Class="py-8">
                                Start filling out the form to see a live preview of your bundle
                            </MudText>
                        }
                    </MudCardContent>
                    
                    <!-- Action Buttons -->
                    <MudCardActions>
                        <MudStack FullWidth="true" Spacing="2">
                            <MudButton Variant="Variant.Filled" 
                                      Color="Color.Primary" 
                                      FullWidth="true"
                                      StartIcon="@Icons.Material.Filled.Publish"
                                      OnClick="SubmitBundle"
                                      Disabled="@(!IsFormValid() || isSubmitting)"
                                      Loading="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    if (isUploadingImage)
                                    {
                                        <span>Uploading Image...</span>
                                    }
                                    else
                                    {
                                        <span>Creating Bundle...</span>
                                    }
                                }
                                else
                                {
                                    var imageText = pendingImageFile != null ? " & Upload Image" : "";
                                    if (createBundle.IsPublished)
                                    {
                                        <span>Create & Publish Bundle@imageText</span>
                                    }
                                    else
                                    {
                                        <span>Create Draft Bundle@imageText</span>
                                    }
                                }
                            </MudButton>
                        </MudStack>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudForm>
</MudContainer>

<!-- Tool Selector Dialog is now handled via DialogService -->

<!-- Bundle Preview Dialog -->
<MudDialog @bind-IsVisible="showPreviewDialog" Options="previewDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Preview" Class="mr-2" />
            Bundle Preview
        </MudText>
    </TitleContent>
    <DialogContent>
        <div style="max-height: 80vh; overflow-y: auto;">
            <!-- Preview content would be rendered here -->
            <MudText Typo="Typo.h5">@createBundle.Name</MudText>
            <MudText Typo="Typo.body1" Class="mt-2">@createBundle.Description</MudText>
            <!-- Add more preview content as needed -->
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => showPreviewDialog = false)">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private MudForm form = null!;
    private MudStepper stepper = null!;
    
    private CreateBundleModel createBundle = new();
    private bool isSubmitting = false;
    private bool isLoading = false;
    private bool isUploadingImage = false;
    private string? userLocationDisplay = null;
    
    // For delayed upload pattern  
    private IBrowserFile? pendingImageFile = null;
    private string? previewImageUrl = null;
    private List<frontend.Models.BreadcrumbItem> breadcrumbItems = new();
    private byte[]? pendingImageData = null;
    private string? pendingImageContentType = null;
    private string? pendingImageFileName = null;
    
    // Show warning when both bundle location and user public location are empty
    private bool ShowLocationWarning => string.IsNullOrEmpty(createBundle.Location) && string.IsNullOrEmpty(userLocationDisplay);
    
    // Tool selection
    private List<Tool> availableTools = new();
    
    // Preview
    private bool showPreviewDialog = false;
    
    // Suggested tags based on category
    private List<string> suggestedTags = new();
    private readonly Dictionary<string, List<string>> categoryTags = new()
    {
        { "Woodworking", new() { "furniture", "cabinet", "deck", "trim", "flooring", "joints", "finishing" } },
        { "Home Improvement", new() { "renovation", "remodel", "repair", "upgrade", "maintenance", "DIY" } },
        { "Gardening", new() { "landscaping", "planting", "pruning", "irrigation", "lawn care", "outdoor" } },
        { "Automotive", new() { "car repair", "maintenance", "tire", "oil change", "brake", "engine" } },
        { "Plumbing", new() { "pipes", "faucet", "toilet", "sink", "drain", "leak repair", "bathroom" } },
        { "Electrical", new() { "wiring", "outlets", "lighting", "circuit", "switch", "safety", "installation" } },
        { "Painting", new() { "interior", "exterior", "primer", "brush", "roller", "trim", "finish" } },
        { "Cleaning", new() { "deep clean", "carpet", "window", "pressure wash", "scrub", "sanitize" } },
        { "Construction", new() { "building", "framing", "concrete", "drywall", "roofing", "foundation" } }
    };
    
    
    private DialogOptions previewDialogOptions = new() 
    { 
        CloseOnEscapeKey = true, 
        MaxWidth = MaxWidth.Medium,
        FullWidth = true
    };


    protected override async Task OnInitializedAsync()
    {
        SetupBreadcrumbs();
        await Task.WhenAll(LoadAvailableTools(), LoadUserLocation());
        UpdateSuggestedTags();
    }

    private async Task LoadAvailableTools()
    {
        try
        {
            var result = await ToolService.GetMyToolsAsync();
            if (result.Success && result.Data != null)
            {
                availableTools = result.Data;
                Console.WriteLine($"‚úÖ Loaded {availableTools.Count} tools successfully for bundle creation");
                
                if (availableTools.Count == 0)
                {
                    Snackbar.Add("You don't have any tools yet. Create some tools first to add them to bundles.", Severity.Info);
                }
            }
            else
            {
                Console.WriteLine($"‚ùå Failed to load tools: {result.Message}");
                var errorMessage = !string.IsNullOrEmpty(result.Message) 
                    ? $"Failed to load your tools: {result.Message}" 
                    : "Failed to load your tools. Please ensure you are logged in and try again.";
                Snackbar.Add(errorMessage, Severity.Error);
                availableTools = new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Exception loading tools: {ex.Message}");
            Snackbar.Add($"Error loading tools: {ex.Message}", Severity.Error);
            availableTools = new();
        }
    }

    private async Task LoadUserLocation()
    {
        try
        {
            var response = await UserService.GetProfileAsync();
            if (response?.Success == true && response.Data != null)
            {
                // Store user's location display for warning logic
                userLocationDisplay = response.Data.LocationDisplay;
            }
        }
        catch (Exception ex)
        {
            // Don't show error for location loading failure, just continue without user location
        }
    }

    private void UpdateSuggestedTags()
    {
        if (!string.IsNullOrEmpty(createBundle.Category) && categoryTags.ContainsKey(createBundle.Category))
        {
            var currentTags = GetTagsList();
            suggestedTags = categoryTags[createBundle.Category]
                .Where(tag => !currentTags.Contains(tag, StringComparer.OrdinalIgnoreCase))
                .Take(5)
                .ToList();
        }
        else
        {
            suggestedTags.Clear();
        }
        StateHasChanged();
    }

    private List<string> GetTagsList()
    {
        return string.IsNullOrEmpty(createBundle.Tags) 
            ? new() 
            : createBundle.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(t => t.Trim())
                .Where(t => !string.IsNullOrEmpty(t))
                .ToList();
    }

    private void RemoveTag(string tag)
    {
        var tags = GetTagsList();
        tags.Remove(tag);
        createBundle.Tags = string.Join(", ", tags);
        UpdateSuggestedTags();
    }

    private void AddSuggestedTag(string tag)
    {
        var tags = GetTagsList();
        if (!tags.Contains(tag, StringComparer.OrdinalIgnoreCase))
        {
            tags.Add(tag);
            createBundle.Tags = string.Join(", ", tags);
            UpdateSuggestedTags();
        }
    }

    private void ToggleToolSelection(Tool tool, bool isSelected)
    {
        Console.WriteLine($"üîß ToggleToolSelection called in CreateBundle: Tool={tool.Name}, Selected={isSelected}");
        
        if (!Guid.TryParse(tool.Id, out var toolGuid))
        {
            Console.WriteLine($"‚ùå Failed to parse tool ID: {tool.Id}");
            return;
        }

        if (isSelected)
        {
            if (!createBundle.Tools.Any(bt => bt.ToolId == toolGuid))
            {
                createBundle.Tools.Add(new CreateBundleToolModel
                {
                    ToolId = toolGuid,
                    OrderInBundle = createBundle.Tools.Count + 1,
                    QuantityNeeded = 1,
                    IsOptional = false,
                    UsageNotes = ""
                });
                Console.WriteLine($"‚úÖ Added tool {tool.Name} to bundle. Total tools: {createBundle.Tools.Count}");
            }
            else
            {
                Console.WriteLine($"‚ö†Ô∏è Tool {tool.Name} already in bundle");
            }
        }
        else
        {
            var existingTool = createBundle.Tools.FirstOrDefault(bt => bt.ToolId == toolGuid);
            if (existingTool != null)
            {
                createBundle.Tools.Remove(existingTool);
                ReorderTools();
                Console.WriteLine($"‚ûñ Removed tool {tool.Name} from bundle. Total tools: {createBundle.Tools.Count}");
            }
            else
            {
                Console.WriteLine($"‚ö†Ô∏è Tool {tool.Name} not found in bundle for removal");
            }
        }
        StateHasChanged();
    }

    private async Task ShowToolSelector()
    {
        Console.WriteLine($"üöÄ Add Tools button clicked in CreateBundle. Available tools: {availableTools.Count}");
        
        var selectedToolIds = createBundle.Tools.Select(t => t.ToolId).ToList();
        var parameters = new DialogParameters { { "SelectedToolIds", selectedToolIds } };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        
        Console.WriteLine($"üé≠ Opening ToolSelectorDialog with {selectedToolIds.Count} pre-selected tools");
        var dialog = DialogService.Show<Components.Bundles.ToolSelectorDialog>("Select Tools", parameters, options);
        var result = await dialog.Result;
        
        if (!result.Canceled && result.Data is List<Guid> newSelectedToolIds)
        {
            Console.WriteLine($"‚úÖ Dialog closed with {newSelectedToolIds.Count} selected tools");
            UpdateBundleTools(newSelectedToolIds);
        }
        else
        {
            Console.WriteLine($"‚ùå Dialog was canceled or returned invalid data");
        }
    }

    private void UpdateBundleTools(List<Guid> selectedToolIds)
    {
        // Remove tools that are no longer selected
        var toolsToRemove = createBundle.Tools.Where(bt => !selectedToolIds.Contains(bt.ToolId)).ToList();
        foreach (var tool in toolsToRemove)
        {
            createBundle.Tools.Remove(tool);
            Console.WriteLine($"‚ûñ Removed tool from bundle: {tool.ToolId}");
        }

        // Add newly selected tools
        foreach (var toolId in selectedToolIds)
        {
            if (!createBundle.Tools.Any(bt => bt.ToolId == toolId))
            {
                createBundle.Tools.Add(new CreateBundleToolModel
                {
                    ToolId = toolId,
                    OrderInBundle = createBundle.Tools.Count + 1,
                    QuantityNeeded = 1,
                    IsOptional = false,
                    UsageNotes = ""
                });
                Console.WriteLine($"‚úÖ Added tool to bundle: {toolId}");
            }
        }

        ReorderTools();
        StateHasChanged();
        Console.WriteLine($"üîÑ Bundle updated. Total tools: {createBundle.Tools.Count}");
    }

    private void RemoveTool(CreateBundleToolModel bundleTool)
    {
        createBundle.Tools.Remove(bundleTool);
        ReorderTools();
        StateHasChanged();
    }

    private void MoveToolUp(CreateBundleToolModel bundleTool)
    {
        if (bundleTool.OrderInBundle > 1)
        {
            var otherTool = createBundle.Tools.FirstOrDefault(t => t.OrderInBundle == bundleTool.OrderInBundle - 1);
            if (otherTool != null)
            {
                (bundleTool.OrderInBundle, otherTool.OrderInBundle) = (otherTool.OrderInBundle, bundleTool.OrderInBundle);
                StateHasChanged();
            }
        }
    }

    private void MoveToolDown(CreateBundleToolModel bundleTool)
    {
        if (bundleTool.OrderInBundle < createBundle.Tools.Count)
        {
            var otherTool = createBundle.Tools.FirstOrDefault(t => t.OrderInBundle == bundleTool.OrderInBundle + 1);
            if (otherTool != null)
            {
                (bundleTool.OrderInBundle, otherTool.OrderInBundle) = (otherTool.OrderInBundle, bundleTool.OrderInBundle);
                StateHasChanged();
            }
        }
    }

    private void ReorderTools()
    {
        for (int i = 0; i < createBundle.Tools.Count; i++)
        {
            createBundle.Tools[i].OrderInBundle = i + 1;
        }
    }

    private decimal CalculateToolsTotal()
    {
        return createBundle.Tools.Sum(t => 
        {
            var tool = availableTools.FirstOrDefault(at => Guid.TryParse(at.Id, out var toolGuid) && toolGuid == t.ToolId);
            return tool != null ? tool.DailyRate * t.QuantityNeeded : 0;
        });
    }

    private decimal CalculateDiscountAmount()
    {
        var total = CalculateToolsTotal();
        return total * (createBundle.BundleDiscount / 100);
    }

    private decimal CalculateFinalPrice()
    {
        return CalculateToolsTotal() - CalculateDiscountAmount();
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrEmpty(createBundle.Name) &&
               !string.IsNullOrEmpty(createBundle.Description) &&
               !string.IsNullOrEmpty(createBundle.Category) &&
               createBundle.Tools.Any() &&
               createBundle.EstimatedProjectDuration > 0;
    }

    private async Task OnImageSelected(IReadOnlyList<IBrowserFile> files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            if (file.Size > 5 * 1024 * 1024) // 5MB limit
            {
                Snackbar.Add("File size must be less than 5MB", Severity.Error);
                return;
            }

            isUploadingImage = true;
            StateHasChanged();

            try
            {
                // Create Base64 preview and store file for delayed upload
                var buffer = new byte[file.Size];
                await file.OpenReadStream(5 * 1024 * 1024).ReadAsync(buffer);
                var dataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
                
                previewImageUrl = dataUrl;
                pendingImageFile = file;
                
                Snackbar.Add("Image ready for preview. It will be uploaded when you create the bundle.", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to upload image: {ex.Message}", Severity.Error);
            }
            finally
            {
                isUploadingImage = false;
                StateHasChanged();
            }
        }
    }

    private void RemoveImage()
    {
        createBundle.ImageUrl = null;
        previewImageUrl = null;
        pendingImageFile = null;
        StateHasChanged();
    }

    private void ShowPreview()
    {
        showPreviewDialog = true;
    }

    private async Task SaveAsDraft()
    {
        var wasPublished = createBundle.IsPublished;
        createBundle.IsPublished = false;
        await SubmitBundle();
        createBundle.IsPublished = wasPublished;
    }

    private async Task SubmitBundle()
    {
        if (!IsFormValid())
        {
            Snackbar.Add("Please complete all required fields", Severity.Warning);
            return;
        }

        isSubmitting = true;
        StateHasChanged();

        try
        {
            await form.Validate();
            if (!form.IsValid)
            {
                Snackbar.Add("Please fix validation errors", Severity.Warning);
                return;
            }

            // Upload image if there's a pending file
            if (pendingImageFile != null)
            {
                isUploadingImage = true;
                StateHasChanged();
                
                var uploadResult = await BundleService.UploadBundleImageAsync(pendingImageFile);
                
                if (!uploadResult.Success)
                {
                    var uploadError = uploadResult.Message ?? "Failed to upload image";
                    if (uploadResult.Errors?.Any() == true)
                    {
                        uploadError += ": " + string.Join(", ", uploadResult.Errors);
                    }
                    Snackbar.Add(uploadError, Severity.Error);
                    return;
                }
                
                // Use uploaded URL
                createBundle.ImageUrl = uploadResult.Data;
                isUploadingImage = false;
                StateHasChanged();
            }

            var result = await BundleService.CreateBundleAsync(createBundle);
            
            if (result.Success && result.Data != null)
            {
                var action = createBundle.IsPublished ? "created and published" : "saved as draft";
                Snackbar.Add($"Bundle '{createBundle.Name}' {action} successfully!", Severity.Success);
                Navigation.NavigateTo($"/bundles/{result.Data.Id}");
            }
            else
            {
                Snackbar.Add(result.Message ?? "Failed to create bundle", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating bundle: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
            isUploadingImage = false;
            StateHasChanged();
        }
    }

    private bool hasChanges => !string.IsNullOrEmpty(createBundle.Name) ||
                               !string.IsNullOrEmpty(createBundle.Description) ||
                               !string.IsNullOrEmpty(createBundle.Category) ||
                               !string.IsNullOrEmpty(createBundle.Tags) ||
                               !string.IsNullOrEmpty(createBundle.Guidelines) ||
                               createBundle.Tools.Any() ||
                               pendingImageData != null;

    private async Task NavigateToTool(string toolId)
    {
        if (hasChanges)
        {
            var parameters = new DialogParameters
            {
                { "Title", "Unsaved Changes" },
                { "Message", "You have unsaved changes to this bundle. Do you want to save your changes before navigating to the tool details?" },
                { "ConfirmText", "Save & Navigate" },
                { "CancelText", "Navigate Without Saving" },
                { "ShowCancelAsSecondary", true },
                { "ConfirmColor", Color.Primary }
            };

            var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

            var dialog = DialogService.Show<frontend.Components.ConfirmationDialog>("Unsaved Changes", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled && result.Data is frontend.Models.ConfirmationDialogResult dialogResult)
            {
                if (dialogResult.Confirmed)
                {
                    // User wants to save changes first
                    await SaveAsDraft(); // Save as draft
                }
                // Navigate regardless of save choice
                Navigation.NavigateTo($"/tools/{toolId}");
            }
            // If canceled, do nothing - stay on current page
        }
        else
        {
            // No changes, navigate directly
            Navigation.NavigateTo($"/tools/{toolId}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/bundles"); // Navigate to bundles page
    }

    private void SetupBreadcrumbs()
    {
        breadcrumbItems = BreadcrumbService.GenerateBundlesBreadcrumb(
            page: BreadcrumbPage.Create);
    }
}