@page "/tools/{id}"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@using frontend.Components
@using frontend.Components.Common
@using frontend.Components.Tools
@using frontend.Components.Messages
@using System.Web
@inject IToolService ToolService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject INavigationHelperService NavigationHelper
@inject MessageService MessageService
@inject AuthenticationStateProvider AuthStateProvider
@inject IUrlService UrlService
@inject IBreadcrumbService BreadcrumbService
@attribute [Authorize]

<PageTitle>@(tool?.Name ?? "Tool Details") - NeighborTools</PageTitle>

@if (isLoading)
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="400px" />
    </MudContainer>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
        <MudStack AlignItems="AlignItems.Center" Class="pa-8">
            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Secondary" />
            <MudText Typo="Typo.h5" Class="mt-4">Tool Not Found</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                @errorMessage
            </MudText>
            <MudButton Variant="Variant.Filled" 
                     Color="Color.Primary" 
                     OnClick="GoBack" 
                     Class="mt-4">
                Browse All Tools
            </MudButton>
        </MudStack>
    </MudContainer>
}
else if (tool != null)
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
        <!-- Breadcrumb -->
        <BreadcrumbNavigation Items="@breadcrumbItems" />
        
        <MudGrid>
            <!-- Header Section -->
            <MudItem xs="12">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start" Class="mb-4">
                    <div>
                        <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Class="mb-2">
                            <MudText Typo="Typo.h4" Color="Color.Primary">@tool.Name</MudText>
                            @if (tool.IsFeatured)
                            {
                                <MudChip Color="Color.Warning" Size="Size.Medium" Icon="@Icons.Material.Filled.Star" Text="Featured" T="string" />
                            }
                            
                            <!-- Tool Approval Status - Show for owner if not approved -->
                            @if (isOwner && !tool.IsApproved)
                            {
                                @if (tool.HasPendingApproval)
                                {
                                    <MudChip Color="Color.Warning" 
                                           Size="Size.Medium" 
                                           Icon="@Icons.Material.Filled.HourglassEmpty" 
                                           Text="Pending Approval" 
                                           T="string" />
                                }
                                else
                                {
                                    <MudTooltip Text="@(!string.IsNullOrEmpty(tool.RejectionReason) ? $"Rejected: {tool.RejectionReason}" : "This tool was rejected and needs to be reviewed")">
                                        <MudChip Color="Color.Error" 
                                               Size="Size.Medium" 
                                               Icon="@Icons.Material.Filled.Block" 
                                               Text="Rejected" 
                                               T="string" />
                                    </MudTooltip>
                                }
                            }
                        </MudStack>
                        
                        <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Class="mb-2">
                            <MudChip Color="Color.Primary" Text="@tool.Category" T="string" />
                            <MudChip Color="Color.Secondary" Text="@tool.Condition" T="string" />
                            @if (!string.IsNullOrEmpty(tool.Brand))
                            {
                                <MudChip Color="Color.Info" Text="@tool.Brand" T="string" />
                            }
                        </MudStack>

                        <MudStack Row Spacing="4" AlignItems="AlignItems.Center">
                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Color="Color.Secondary" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@tool.OwnerName</MudText>
                            </MudStack>
                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Color="Color.Secondary" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@tool.Location</MudText>
                            </MudStack>
                            @if (tool.Rating.HasValue)
                            {
                                <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                    <StarRating Value="@tool.Rating.Value" Size="Size.Small" ShowRating="false" />
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">(@tool.ReviewCount reviews)</MudText>
                                </MudStack>
                            }
                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.Visibility" Size="Size.Small" Color="Color.Secondary" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@tool.ViewCount views</MudText>
                            </MudStack>
                        </MudStack>
                    </div>

                    <MudStack Spacing="2" AlignItems="AlignItems.End">
                        <!-- Pricing -->
                        <div style="text-align: right;">
                            <MudText Typo="Typo.h5" Color="Color.Primary">
                                $@tool.DailyRate.ToString("F2")/day
                            </MudText>
                            @if (tool.WeeklyRate.HasValue || tool.MonthlyRate.HasValue)
                            {
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    @if (tool.WeeklyRate.HasValue)
                                    {
                                        <text>$@tool.WeeklyRate.Value.ToString("F2")/week</text>
                                    }
                                    @if (tool.WeeklyRate.HasValue && tool.MonthlyRate.HasValue)
                                    {
                                        <text> â€¢ </text>
                                    }
                                    @if (tool.MonthlyRate.HasValue)
                                    {
                                        <text>$@tool.MonthlyRate.Value.ToString("F2")/month</text>
                                    }
                                </MudText>
                            }
                        </div>

                        <!-- Availability Status -->
                        @if (tool.IsAvailable)
                        {
                            <MudChip Color="Color.Success" 
                                   Size="Size.Medium" 
                                   Icon="@Icons.Material.Filled.CheckCircle" 
                                   Text="Available Now" 
                                   T="string" />
                        }
                        else
                        {
                            <MudChip Color="Color.Error" 
                                   Size="Size.Medium" 
                                   Icon="@Icons.Material.Filled.Block" 
                                   Text="Currently Unavailable" 
                                   T="string" />
                        }

                        <!-- Action Buttons -->
                        <AuthorizeView>
                            <Authorized>
                                @if (isOwner)
                                {
                                    <MudStack Row Spacing="2">
                                        <MudButton Variant="Variant.Outlined" 
                                                 Color="Color.Secondary" 
                                                 StartIcon="@Icons.Material.Filled.Edit"
                                                 OnClick="EditTool">
                                            Edit
                                        </MudButton>
                                        
                                        <MudButton Variant="Variant.Outlined" 
                                                 Color="Color.Error" 
                                                 StartIcon="@Icons.Material.Filled.Delete"
                                                 OnClick="DeleteTool">
                                            Delete
                                        </MudButton>
                                    </MudStack>
                                }
                                else
                                {
                                    <MudButton Variant="Variant.Filled" 
                                             Color="Color.Primary" 
                                             Size="Size.Large"
                                             StartIcon="@Icons.Material.Filled.ShoppingCart"
                                             Disabled="!tool.IsAvailable"
                                             OnClick="RequestRental">
                                        @(tool.IsAvailable ? "Request Rental" : "Unavailable")
                                    </MudButton>
                                }
                            </Authorized>
                            <NotAuthorized>
                                <MudButton Variant="Variant.Filled" 
                                         Color="Color.Primary" 
                                         Size="Size.Large"
                                         StartIcon="@Icons.Material.Filled.Login"
                                         Href="/login">
                                    Sign In to Rent
                                </MudButton>
                            </NotAuthorized>
                        </AuthorizeView>
                    </MudStack>
                </MudStack>
            </MudItem>

            <!-- Main Content -->
            <MudItem xs="12" md="8">
                <!-- Tool Images -->
                @if (tool.ImageUrls.Any())
                {
                    <MudCard Class="mb-4">
                        <MudCardContent Class="pa-0">
                            <MudCarousel TData="string" Class="mud-width-full" Style="height: 400px;" ShowArrows="@(tool.ImageUrls.Count > 1)" ShowBullets="@(tool.ImageUrls.Count > 1)">
                                @foreach (var imageUrl in tool.ImageUrls)
                                {
                                    <MudCarouselItem>
                                        <div class="d-flex align-center justify-center mud-width-full" style="height: 400px; background-image: url('@UrlService.GetFileUrl(imageUrl)'); background-size: cover; background-position: center;">
                                        </div>
                                    </MudCarouselItem>
                                }
                            </MudCarousel>
                        </MudCardContent>
                    </MudCard>
                }
                else
                {
                    <MudCard Class="mb-4">
                        <MudCardContent Class="pa-0">
                            <ThemeAwarePlaceholder Height="300px" 
                                                  Icon="@Icons.Material.Filled.Build" 
                                                  IconSize="Size.Large"
                                                  IconFontSize="4rem" />
                        </MudCardContent>
                    </MudCard>
                }

                <!-- Description -->
                <MudCard Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Description</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.body1" Style="white-space: pre-line;">@tool.Description</MudText>
                    </MudCardContent>
                </MudCard>

                <!-- Tool Specifications -->
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.Build" Class="mr-2" />
                                Tool Specifications
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="6" sm="4">
                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Category</MudText>
                                <MudText Typo="Typo.body1">@tool.Category</MudText>
                            </MudItem>
                            <MudItem xs="6" sm="4">
                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Condition</MudText>
                                <MudText Typo="Typo.body1">@tool.Condition</MudText>
                            </MudItem>
                            @if (!string.IsNullOrEmpty(tool.Brand))
                            {
                                <MudItem xs="6" sm="4">
                                    <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Brand</MudText>
                                    <MudText Typo="Typo.body1">@tool.Brand</MudText>
                                </MudItem>
                            }
                            @if (!string.IsNullOrEmpty(tool.Model))
                            {
                                <MudItem xs="6" sm="4">
                                    <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Model</MudText>
                                    <MudText Typo="Typo.body1">@tool.Model</MudText>
                                </MudItem>
                            }
                            <MudItem xs="6" sm="4">
                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Location</MudText>
                                <MudText Typo="Typo.body1">@tool.Location</MudText>
                            </MudItem>
                            @if (tool.DepositRequired > 0)
                            {
                                <MudItem xs="6" sm="4">
                                    <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Security Deposit</MudText>
                                    <MudText Typo="Typo.body1" Color="Color.Warning">$@tool.DepositRequired.ToString("F2")</MudText>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Sidebar -->
            <MudItem xs="12" md="4">

                <!-- Tags -->
                @if (tool.TagList.Any())
                {
                    <MudCard Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Tags</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <TagChips Tags="@tool.TagList" 
                                     Clickable="true" 
                                     OnTagClicked="OnTagClicked"
                                     Size="Size.Small"
                                     Color="Color.Default" />
                        </MudCardContent>
                    </MudCard>
                }

                <!-- Owner Info -->
                <MudCard Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Owner</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudStack Spacing="2">
                            <UserLink UserId="@tool.OwnerId" 
                                      DisplayName="@tool.OwnerName" 
                                      ShowAvatar="true" 
                                      AvatarSize="Size.Medium" />
                            @if (!isOwner)
                            {
                                <MudButton Variant="Variant.Outlined" 
                                           Color="Color.Primary" 
                                           FullWidth="true"
                                           StartIcon="@Icons.Material.Filled.Message"
                                           OnClick="ContactOwner">
                                    Send Message
                                </MudButton>
                            }
                        </MudStack>
                    </MudCardContent>
                </MudCard>

                <!-- Actions -->
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Actions</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            @if (!isOwner)
                            {
                                <FavoriteButton ToolId="@tool.Id" 
                                               OwnerUserId="@tool.OwnerId" 
                                               Size="Size.Medium" />
                            }
                            else
                            {
                                <div></div>
                            }
                            
                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                <MudIconButton Icon="@Icons.Custom.Brands.Facebook" 
                                             Color="Color.Primary" 
                                             Size="Size.Medium"
                                             OnClick="@(() => ShareTool("facebook"))" />
                                <MudIconButton Icon="@Icons.Custom.Brands.Twitter" 
                                             Color="Color.Info" 
                                             Size="Size.Medium"
                                             OnClick="@(() => ShareTool("twitter"))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Share" 
                                             Color="Color.Secondary" 
                                             Size="Size.Medium"
                                             OnClick="@(() => CopyLink())" />
                            </MudStack>
                        </MudStack>
                    </MudCardContent>
                </MudCard>

                <!-- Reviews -->
                @if (tool != null)
                {
                    <div class="mt-4">
                        <ToolReviewsComponent ToolId="@tool.Id" 
                                             ToolName="@tool.Name" 
                                             CanReview="!isOwner" 
                                             IsAuthenticated="!string.IsNullOrEmpty(currentUserId)" />
                    </div>
                }
            </MudItem>
        </MudGrid>
    </MudContainer>
}


@code {
    [Parameter] public string Id { get; set; } = string.Empty;
    
    private Tool? tool;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private List<frontend.Models.BreadcrumbItem> breadcrumbItems = new();
    private bool isOwner = false;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        // Get current user
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        
        await LoadTool();
        SetupBreadcrumbs();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            await LoadTool();
            SetupBreadcrumbs();
        }
    }

    private async Task LoadTool()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await ToolService.GetToolAsync(Id);
            
            if (result.Success && result.Data != null)
            {
                tool = result.Data;
                isOwner = tool.OwnerId == currentUserId;
                
                // Increment view count (properly async to avoid race conditions)
                try
                {
                    await ToolService.IncrementViewCountAsync(tool.Id);
                }
                catch
                {
                    // Ignore view count errors
                }
                
                // Owner check is sufficient - detailed review eligibility is handled by ToolReviewsComponent
            }
            else
            {
                errorMessage = result.Message ?? "Tool not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SetupBreadcrumbs()
    {
        if (tool != null)
        {
            breadcrumbItems = BreadcrumbService.GenerateToolsBreadcrumb(
                toolName: tool.Name,
                category: tool.Category,
                page: BreadcrumbPage.Details);
        }
    }

    private string GetOwnerInitials(string ownerName)
    {
        if (string.IsNullOrWhiteSpace(ownerName))
            return "??";
            
        var parts = ownerName.Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 0)
            return "??";
        if (parts.Length == 1)
            return parts[0].Length > 0 ? parts[0].Substring(0, 1).ToUpper() : "?";
        
        return $"{parts[0].Substring(0, 1)}{parts[^1].Substring(0, 1)}".ToUpper();
    }


    private async Task ShareTool(string platform)
    {
        var url = Navigation.Uri;
        var text = $"Check out this tool: {tool?.Name}";

        string shareUrl = platform switch
        {
            "facebook" => $"https://www.facebook.com/sharer/sharer.php?u={Uri.EscapeDataString(url)}",
            "twitter" => $"https://twitter.com/intent/tweet?text={Uri.EscapeDataString(text)}&url={Uri.EscapeDataString(url)}",
            _ => url
        };

        await Task.Run(() => Navigation.NavigateTo(shareUrl, true));
    }

    private async Task CopyLink()
    {
        try
        {
            // Use JavaScript interop for clipboard functionality in a real implementation
            await Task.Delay(100); // Simulate async operation
            Snackbar.Add("Link copied to clipboard!", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Could not copy link", Severity.Warning);
        }
    }

    private async Task RequestRental()
    {
        if (tool?.IsAvailable == true)
        {
            var parameters = new DialogParameters();
            parameters.Add("Tool", tool);

            var options = new DialogOptions();

            var dialog = DialogService.Show<frontend.Shared.RentalRequestDialog>("Request Rental", parameters, options);
            var result = await dialog.Result;

            if (result is not null && !result.Canceled)
            {
                // Rental request was successful, optionally navigate somewhere
                Snackbar.Add("Your rental request has been submitted and is pending approval.", Severity.Success);
            }
        }
    }

    private async Task GoBack()
    {
        await NavigationHelper.NavigateBack("/tools");
    }

    private async Task ContactOwner()
    {
        if (tool == null) return;

        var parameters = new DialogParameters 
        { 
            { "RecipientId", tool.OwnerId },
            { "RecipientName", tool.OwnerName },
            { "ToolId", tool.Id.ToString() },
            { "ToolName", tool.Name }
        };
        
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        
        var dialog = DialogService.Show<NewMessageDialog>("Send Message to Owner", parameters, options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            Snackbar.Add("Message sent successfully!", Severity.Success);
        }
    }

    private void EditTool()
    {
        if (tool != null)
        {
            Navigation.NavigateTo($"/tools/edit/{tool.Id}?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
        }
    }

    private async Task DeleteTool()
    {
        if (tool == null) return;

        var parameters = new DialogParameters
        {
            { "Title", "Delete Tool" },
            { "Message", $"Are you sure you want to delete '{tool.Name}'? This action cannot be undone." },
            { "ConfirmText", "Delete" },
            { "ConfirmColor", Color.Error }
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = DialogService.Show<frontend.Components.ConfirmationDialog>("Delete Tool", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is frontend.Models.ConfirmationDialogResult dialogResult && dialogResult.Confirmed)
        {
            try
            {
                var deleteResult = await ToolService.DeleteToolAsync(tool.Id);
                
                if (deleteResult.Success)
                {
                    Snackbar.Add($"Tool '{tool.Name}' deleted successfully", Severity.Success);
                    Navigation.NavigateTo("/my-tools");
                }
                else
                {
                    Snackbar.Add(deleteResult.Message ?? "Failed to delete tool", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to delete tool: {ex.Message}", Severity.Error);
            }
        }
    }
    
    private void OnTagClicked(string tag)
    {
        // Navigate to tools page with tag filter
        Navigation.NavigateTo($"/tools?tags={Uri.EscapeDataString(tag)}");
    }
    
}