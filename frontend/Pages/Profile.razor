@page "/profile"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService
@inject IUrlService UrlService
@attribute [Authorize]

<PageTitle>Profile - NeighborTools</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (isPageLoading)
    {
        <div class="d-flex justify-center align-center" style="min-height: 400px;">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
        </div>
    }
    else if (userProfile == null)
    {
        <MudAlert Severity="Severity.Error">
            Failed to load profile data. Please try refreshing the page.
        </MudAlert>
    }
    else
    {
    <!-- Header -->
    <div class="d-flex flex-column align-center mb-6">
        <MudAvatar Size="Size.Large" Color="Color.Primary" Class="mb-4" Style="width: 120px; height: 120px; font-size: 3rem;">
            @if (!string.IsNullOrEmpty(userProfile?.ProfilePictureUrl))
            {
                <MudImage Src="@UrlService.GetFileUrl(userProfile.ProfilePictureUrl)" Alt="Profile Picture" />
            }
            else
            {
                <MudText>@GetInitials()</MudText>
            }
        </MudAvatar>
        
        <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">
            @userProfile?.FirstName @userProfile?.LastName
        </MudText>
        
        <div class="d-flex align-center gap-2 mb-2">
            <MudIcon Icon="@Icons.Material.Filled.LocationOn" Color="Color.Secondary" Size="Size.Small" />
            <MudText Typo="Typo.body1" Color="Color.Secondary">@GetLocation()</MudText>
        </div>
        
        <div class="d-flex align-center gap-4 mb-4">
            <div class="d-flex align-center gap-1">
                <MudRating ReadOnly="true" SelectedValue="@((int)Math.Round(userProfile?.AverageRating ?? 0))" MaxValue="5" Size="Size.Small" />
                <MudText Typo="Typo.body2">(@(userProfile?.ReviewCount ?? 0) reviews)</MudText>
            </div>
            <MudChip T="string" Color="@(userProfile?.IsVerified == true ? Color.Success : Color.Warning)" Size="Size.Small" Icon="@(userProfile?.IsVerified == true ? Icons.Material.Filled.Verified : Icons.Material.Filled.Warning)">
                @(userProfile?.IsVerified == true ? "Verified" : "Unverified")
            </MudChip>
        </div>
        
        <MudText Typo="Typo.body1" Color="Color.Secondary" Align="Align.Center" Class="mb-4" Style="max-width: 600px;">
            Member since @(userProfile?.CreatedAt.ToString("MMMM yyyy") ?? "Unknown")
        </MudText>
    </div>

    <MudTabs Elevation="4" Rounded="true" Color="Color.Primary">
        <!-- Personal Information Tab -->
        <MudTabPanel Text="Personal Info" Icon="@Icons.Material.Filled.Person">
            <div class="pa-6">
                <MudGrid>
                    <MudItem xs="12" md="8">
                        <EditForm Model="updateRequest" OnValidSubmit="SaveProfile">
                            <DataAnnotationsValidator />
                            
                            <MudGrid>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="updateRequest.FirstName"
                                                  Label="First Name"
                                                  Variant="Variant.Outlined"
                                                  FullWidth
                                                  Required="true"
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.Person" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="updateRequest.LastName"
                                                  Label="Last Name"
                                                  Variant="Variant.Outlined"
                                                  FullWidth
                                                  Required="true"
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.Person" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField Value="@(userProfile?.Email ?? "")"
                                                  Label="Email Address"
                                                  Variant="Variant.Outlined"
                                                  InputType="InputType.Email"
                                                  FullWidth
                                                  Disabled="true"
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                                  HelperText="Email cannot be changed. Contact support if needed." />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="updateRequest.PhoneNumber"
                                                  Label="Phone Number"
                                                  Variant="Variant.Outlined"
                                                  InputType="InputType.Telephone"
                                                  FullWidth
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.Phone" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="updateRequest.Address"
                                                  Label="Address"
                                                  Variant="Variant.Outlined"
                                                  FullWidth
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.LocationOn" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="updateRequest.City"
                                                  Label="City"
                                                  Variant="Variant.Outlined"
                                                  FullWidth
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.LocationCity" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="updateRequest.PostalCode"
                                                  Label="Postal Code"
                                                  Variant="Variant.Outlined"
                                                  FullWidth
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.MarkunreadMailbox" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="updateRequest.Country"
                                                  Label="Country"
                                                  Variant="Variant.Outlined"
                                                  FullWidth
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.Public" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField @bind-Value="updateRequest.PublicLocation"
                                                  Label="Public Location"
                                                  Variant="Variant.Outlined"
                                                  FullWidth
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.LocationOn"
                                                  HelperText="This location will be visible to other users and used for tool searches. For security, keep it general (e.g., 'Downtown Toronto', 'Berlin Mitte')." />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudDatePicker @bind-Date="updateRequest.DateOfBirth"
                                                   Label="Date of Birth"
                                                   Variant="Variant.Outlined"
                                                   Class="full-width"
                                                   Adornment="Adornment.Start"
                                                   AdornmentIcon="@Icons.Material.Filled.Cake" />
                                </MudItem>
                            </MudGrid>
                            
                            <div class="d-flex justify-end gap-4 mt-6">
                                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="ResetForm" StartIcon="@Icons.Material.Filled.Refresh">
                                    Reset
                                </MudButton>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="isLoading" StartIcon="@(isLoading ? null : Icons.Material.Filled.Save)">
                                    @if (isLoading)
                                    {
                                        <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ml-2">Saving...</MudText>
                                    }
                                    else
                                    {
                                        <MudText>Save Changes</MudText>
                                    }
                                </MudButton>
                            </div>
                        </EditForm>
                    </MudItem>
                    
                    <MudItem xs="12" md="4">
                        <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px;">
                            <MudText Typo="Typo.h6" Class="mb-3" Color="Color.Primary">
                                <MudIcon Icon="@Icons.Material.Filled.PhotoCamera" Class="mr-2" />
                                Profile Picture
                            </MudText>
                            
                            <div class="text-center mb-4">
                                <MudAvatar Size="Size.Large" Color="Color.Primary" Style="width: 100px; height: 100px; font-size: 2rem;">
                                    @if (!string.IsNullOrEmpty(userProfile?.ProfilePictureUrl))
                                    {
                                        <MudImage Src="@UrlService.GetFileUrl(userProfile.ProfilePictureUrl)" Alt="Profile Picture" />
                                    }
                                    else
                                    {
                                        <MudText>@GetInitials()</MudText>
                                    }
                                </MudAvatar>
                            </div>
                            
                            <MudFileUpload T="IBrowserFile" Accept=".jpg,.jpeg,.png,.gif,.webp" OnFilesChanged="@(async args => await OnProfilePictureSelected(args.File))">
                                <ActivatorContent>
                                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" FullWidth StartIcon="@Icons.Material.Filled.Upload" Disabled="isUploadingProfilePicture">
                                        @if (isUploadingProfilePicture)
                                        {
                                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                            <MudText Class="ml-2">Uploading...</MudText>
                                        }
                                        else
                                        {
                                            <MudText>Upload New Photo</MudText>
                                        }
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>
                            
                            @if (!string.IsNullOrEmpty(userProfile?.ProfilePictureUrl))
                            {
                                <MudButton Variant="Variant.Text" Color="Color.Error" FullWidth StartIcon="@Icons.Material.Filled.Delete" Class="mt-2" OnClick="RemoveProfilePicture" Disabled="isUploadingProfilePicture">
                                    Remove Photo
                                </MudButton>
                            }
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </div>
        </MudTabPanel>

        <!-- Statistics Tab -->
        <MudTabPanel Text="Statistics" Icon="@Icons.Material.Filled.Analytics">
            <div class="pa-6">
                <MudGrid>
                    <MudItem xs="12" sm="6" md="3">
                        <MudCard Elevation="4" Style="border-radius: 12px;">
                            <MudCardContent Class="text-center">
                                <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Large" Color="Color.Primary" Class="mb-2" />
                                <MudText Typo="Typo.h4" Color="Color.Primary">@(userStatistics?.ToolsShared ?? 0)</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Tools Shared</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudCard Elevation="4" Style="border-radius: 12px;">
                            <MudCardContent Class="text-center">
                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Large" Color="Color.Success" Class="mb-2" />
                                <MudText Typo="Typo.h4" Color="Color.Success">@(userStatistics?.SuccessfulRentals ?? 0)</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Successful Rentals</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudCard Elevation="4" Style="border-radius: 12px;">
                            <MudCardContent Class="text-center">
                                <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Size="Size.Large" Color="Color.Info" Class="mb-2" />
                                <MudText Typo="Typo.h4" Color="Color.Info">$@(userStatistics?.TotalEarned.ToString("N0") ?? "0")</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Total Earned</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudCard Elevation="4" Style="border-radius: 12px;">
                            <MudCardContent Class="text-center">
                                <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Large" Color="Color.Warning" Class="mb-2" />
                                <MudText Typo="Typo.h4" Color="Color.Warning">@(userStatistics?.AverageRating.ToString("F1") ?? "0.0")</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Average Rating</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
                
                <MudDivider Class="my-6" />
                
                <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Recent Activity</MudText>
                
                @if (userStatistics?.RecentActivity?.Any() == true)
                {
                    <MudTimeline TimelineOrientation="TimelineOrientation.Vertical">
                        @foreach (var activity in userStatistics.RecentActivity)
                        {
                            <MudTimelineItem Color="@GetActivityColor(activity.ActivityType)" Size="Size.Small">
                                <ItemContent>
                                    <div class="d-flex justify-space-between align-center">
                                        <div>
                                            <MudText Typo="Typo.body1">@activity.Description</MudText>
                                            @if (!string.IsNullOrEmpty(activity.ToolName))
                                            {
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">@activity.ToolName</MudText>
                                            }
                                        </div>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">@GetRelativeTime(activity.Date)</MudText>
                                    </div>
                                </ItemContent>
                            </MudTimelineItem>
                        }
                    </MudTimeline>
                }
                else
                {
                    <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                        No recent activity to display
                    </MudText>
                }
            </div>
        </MudTabPanel>

        <!-- Reviews Tab -->
        <MudTabPanel Text="Reviews" Icon="@Icons.Material.Filled.Star">
            <div class="pa-6">
                <div class="d-flex justify-space-between align-center mb-6">
                    <MudText Typo="Typo.h5" Color="Color.Primary">Reviews & Ratings</MudText>
                    <div class="d-flex align-center gap-2">
                        <MudRating ReadOnly="true" SelectedValue="@((int)Math.Round(userProfile?.AverageRating ?? 0))" MaxValue="5" />
                        <MudText Typo="Typo.h6">@(userProfile?.AverageRating.ToString("F1") ?? "0.0")/5</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">(@(userProfile?.ReviewCount ?? 0) reviews)</MudText>
                    </div>
                </div>
                
                @if (userReviews.Any())
                {
                    @foreach (var review in userReviews)
                    {
                        <MudCard Elevation="2" Class="mb-4" Style="border-radius: 12px;">
                            <MudCardContent>
                                <div class="d-flex justify-space-between align-start mb-3">
                                    <div class="d-flex align-center gap-3">
                                        <MudAvatar Color="Color.Secondary" Size="Size.Medium">
                                            @if (!string.IsNullOrEmpty(review.ReviewerAvatarUrl))
                                            {
                                                <MudImage Src="@review.ReviewerAvatarUrl" Alt="@review.ReviewerName" />
                                            }
                                            else
                                            {
                                                <MudText>@review.ReviewerName.Substring(0, 1)</MudText>
                                            }
                                        </MudAvatar>
                                        <div>
                                            <MudText Typo="Typo.body1">@review.ReviewerName</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">@review.CreatedAt.ToString("MMM dd, yyyy")</MudText>
                                        </div>
                                    </div>
                                    <MudRating ReadOnly="true" SelectedValue="@review.Rating" MaxValue="5" Size="Size.Small" />
                                </div>
                                <MudText Typo="Typo.body1" Class="mb-2"><strong>@review.Title</strong></MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">@review.Comment</MudText>
                            @if (!string.IsNullOrEmpty(review.ToolName))
                            {
                                <MudChip T="string" Color="Color.Info" Size="Size.Small">@review.ToolName</MudChip>
                            }
                        </MudCardContent>
                    </MudCard>
                    }
                }
                else
                {
                    <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                        No reviews yet
                    </MudText>
                }
            </div>
        </MudTabPanel>
    </MudTabs>
    }
</MudContainer>

@code {
    private UserProfileDto? userProfile;
    private UserStatisticsDto? userStatistics;
    private List<UserReviewDto> userReviews = new();
    private UpdateUserProfileRequest updateRequest = new();
    private bool isLoading = false;
    private bool isPageLoading = true;
    private bool isUploadingProfilePicture = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadUserProfile();
            await LoadUserStatistics();
            await LoadUserReviews();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading profile: {ex.Message}", Severity.Error);
        }
        finally
        {
            isPageLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadUserProfile()
    {
        try
        {
            var response = await UserService.GetProfileAsync();
            if (response?.Success == true && response.Data != null)
            {
                userProfile = response.Data;
                // Map to update request for editing
                updateRequest = new UpdateUserProfileRequest
                {
                    FirstName = userProfile.FirstName ?? "",
                    LastName = userProfile.LastName ?? "",
                    PhoneNumber = userProfile.PhoneNumber,
                    Address = userProfile.Address,
                    City = userProfile.City,
                    PostalCode = userProfile.PostalCode,
                    Country = userProfile.Country,
                    PublicLocation = userProfile.PublicLocation,
                    DateOfBirth = userProfile.DateOfBirth,
                    ProfilePictureUrl = userProfile.ProfilePictureUrl
                };
            }
            else
            {
                Snackbar.Add("Failed to load profile data.", Severity.Error);
                // Initialize with empty values to prevent null reference errors
                updateRequest = new UpdateUserProfileRequest
                {
                    FirstName = "",
                    LastName = ""
                };
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading profile: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadUserStatistics()
    {
        try
        {
            var response = await UserService.GetStatisticsAsync();
            if (response?.Success == true && response.Data != null)
            {
                userStatistics = response.Data;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading statistics: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadUserReviews()
    {
        try
        {
            var response = await UserService.GetReviewsAsync(1, 10);
            if (response?.Success == true && response.Data != null)
            {
                userReviews = response.Data.Items;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading reviews: {ex.Message}", Severity.Error);
        }
    }

    private string GetInitials()
    {
        return $"{userProfile?.FirstName?.FirstOrDefault()}{userProfile?.LastName?.FirstOrDefault()}";
    }

    private string GetLocation()
    {
        if (userProfile == null) return "Unknown";
        
        if (!string.IsNullOrEmpty(userProfile.PublicLocation))
        {
            return userProfile.PublicLocation;
        }
        
        var parts = new List<string>();
        if (!string.IsNullOrEmpty(userProfile.City)) parts.Add(userProfile.City);
        if (!string.IsNullOrEmpty(userProfile.Country)) parts.Add(userProfile.Country);
        
        return parts.Count > 0 ? string.Join(", ", parts) : "Location not specified";
    }

    private async Task SaveProfile()
    {
        isLoading = true;
        
        try
        {
            var response = await UserService.UpdateProfileAsync(updateRequest);
            if (response?.Success == true)
            {
                Snackbar.Add("Profile updated successfully!", Severity.Success);
                await LoadUserProfile(); // Refresh data
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to update profile.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating profile: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ResetForm()
    {
        try
        {
            await LoadUserProfile();
            Snackbar.Add("Form reset successfully", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error resetting form: {ex.Message}", Severity.Error);
        }
    }

    private string GetActivityIcon(string activityType)
    {
        return activityType switch
        {
            "rental_created" => Icons.Material.Filled.Handshake,
            "tool_added" => Icons.Material.Filled.Add,
            "review_received" => Icons.Material.Filled.Star,
            _ => Icons.Material.Filled.Info
        };
    }

    private Color GetActivityColor(string activityType)
    {
        return activityType switch
        {
            "rental_created" => Color.Success,
            "tool_added" => Color.Info,
            "review_received" => Color.Warning,
            _ => Color.Primary
        };
    }

    private string GetRelativeTime(DateTime date)
    {
        var timeSpan = DateTime.Now - date;
        
        if (timeSpan.Days > 0)
            return $"{timeSpan.Days} day{(timeSpan.Days == 1 ? "" : "s")} ago";
        if (timeSpan.Hours > 0)
            return $"{timeSpan.Hours} hour{(timeSpan.Hours == 1 ? "" : "s")} ago";
        if (timeSpan.Minutes > 0)
            return $"{timeSpan.Minutes} minute{(timeSpan.Minutes == 1 ? "" : "s")} ago";
        
        return "Just now";
    }

    private async Task OnProfilePictureSelected(IBrowserFile? file)
    {
        if (file == null) return;

        isUploadingProfilePicture = true;
        StateHasChanged();

        try
        {
            // Validate file size (5MB limit)
            if (file.Size > 5 * 1024 * 1024)
            {
                Snackbar.Add("Profile picture is too large. Maximum size is 5MB.", Severity.Warning);
                return;
            }

            // Validate file type
            var extension = Path.GetExtension(file.Name).ToLowerInvariant();
            var allowedTypes = new[] { ".jpg", ".jpeg", ".png", ".gif", ".webp" };
            if (!allowedTypes.Contains(extension))
            {
                Snackbar.Add("Invalid file type. Only JPG, JPEG, PNG, GIF, and WebP files are allowed.", Severity.Warning);
                return;
            }

            // Upload the profile picture
            var response = await UserService.UploadProfilePictureAsync(file);
            if (response?.Success == true)
            {
                Snackbar.Add("Profile picture updated successfully!", Severity.Success);
                // Reload the profile to get the updated picture URL
                await LoadUserProfile();
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to upload profile picture.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error uploading profile picture: {ex.Message}", Severity.Error);
        }
        finally
        {
            isUploadingProfilePicture = false;
            StateHasChanged();
        }
    }

    private async Task RemoveProfilePicture()
    {
        if (string.IsNullOrEmpty(userProfile?.ProfilePictureUrl))
            return;

        isUploadingProfilePicture = true;
        StateHasChanged();

        try
        {
            var response = await UserService.RemoveProfilePictureAsync();
            if (response?.Success == true)
            {
                Snackbar.Add("Profile picture removed successfully!", Severity.Success);
                // Reload the profile to reflect the change
                await LoadUserProfile();
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to remove profile picture.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error removing profile picture: {ex.Message}", Severity.Error);
        }
        finally
        {
            isUploadingProfilePicture = false;
            StateHasChanged();
        }
    }
}