@page "/tools"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@using frontend.Components
@using frontend.Components.Common
@using frontend.Components.Location
@using ToolsSharing.Frontend.Models.Location
@inject IToolService ToolService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IUrlService UrlService
@inject IBreadcrumbService BreadcrumbService
@inject IDeviceDetectionService DeviceDetectionService
@inject IBrowserCacheService BrowserCacheService
@attribute [AllowAnonymous]
@implements IDisposable

<PageTitle>Browse Tools - NeighborTools</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4" Style="overflow-x: auto;">
    <!-- Breadcrumb -->
    <BreadcrumbNavigation Items="@breadcrumbItems" />
    <MudPaper Class="pa-6" Elevation="0">
        <MudGrid>
            <!-- Header Section -->
            <MudItem xs="12">
                <div class="mb-4">
                    <!-- Title Section -->
                    <div class="mb-3">
                        <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.Build" Class="mr-2" />
                            Browse Tools
                        </MudText>
                        <MudText Typo="Typo.body1" Color="Color.Secondary">
                            Find the perfect tools for your project
                        </MudText>
                    </div>
                    
                    <!-- Search and Actions Section - Responsive -->
                    <div class="d-flex flex-column flex-md-row gap-3 align-md-center">
                        <div class="flex-grow-1" style="overflow-x: auto;">
                            <MudTextField @bind-Value="searchQuery"
                                          @onkeypress="HandleKeyPress"
                                          Placeholder="Search tools..."
                                          Variant="Variant.Outlined"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                          OnAdornmentClick="SearchTools"
                                          FullWidth="true"
                                          Style="min-width: 250px;" />
                        </div>
                        
                        <AuthorizeView>
                            <Authorized>
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Primary" 
                                           StartIcon="@Icons.Material.Filled.Add"
                                           Href="/tools/create"
                                           Class="flex-shrink-0">
                                    <span class="d-none d-sm-inline">Add Tool</span>
                                    <span class="d-sm-none">Add</span>
                                </MudButton>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </div>
            </MudItem>

            <!-- Filter and Results Section -->
            <MudItem xs="12">
                <!-- Mobile Filter Button -->
                <div class="d-md-none mb-3">
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Primary" 
                               FullWidth="true"
                               StartIcon="@Icons.Material.Filled.FilterList"
                               OnClick="OpenMobileFilters">
                        Filters @if (GetActiveFilterCount() > 0) { <MudChip T="string" Size="Size.Small" Color="Color.Primary" Text="@GetActiveFilterCount().ToString()" Class="ml-2" /> }
                    </MudButton>
                </div>
                
                <!-- Desktop Layout: Sidebar + Content -->
                <MudStack Row Spacing="4" Class="position-relative">

                    <!-- Desktop Filter Sidebar -->
                    <div class="d-none d-md-block filter-sidebar">
                        <MudPaper Class="pa-4 filter-panel" Elevation="2" Style="width: 280px; position: sticky; top: 20px;">
                            <MudStack Spacing="4">
                                <!-- Quick Filters -->
                                <div>
                                    <MudText Typo="Typo.h6" Class="mb-3">
                                        <MudIcon Icon="@Icons.Material.Filled.Tune" Class="mr-2" />
                                        Quick Filters
                                    </MudText>
                                    <MudStack Row Spacing="2" Wrap="Wrap.Wrap">
                                        <MudChip T="bool?" 
                                                 Value="@(availableOnly == true)"
                                                 OnClick="() => ToggleQuickFilter(true)" 
                                                 Color="@(availableOnly == true ? Color.Success : Color.Default)"
                                                 Variant="@(availableOnly == true ? Variant.Filled : Variant.Outlined)"
                                                 Size="Size.Small"
                                                 Icon="@Icons.Material.Filled.CheckCircle">
                                            Available Now
                                        </MudChip>
                                        <MudChip T="bool?" 
                                                 Value="@(!string.IsNullOrEmpty(locationFilter))"
                                                 Color="@(!string.IsNullOrEmpty(locationFilter) ? Color.Info : Color.Default)"
                                                 Variant="@(!string.IsNullOrEmpty(locationFilter) ? Variant.Filled : Variant.Outlined)"
                                                 Size="Size.Small"
                                                 Icon="@Icons.Material.Filled.LocationOn"
                                                 Disabled="true">
                                            @(!string.IsNullOrEmpty(locationFilter) ? "Near Me" : "Set Location")
                                        </MudChip>
                                    </MudStack>
                                </div>

                                <MudDivider />

                                <!-- Category Section -->
                                <div>
                                    <MudExpansionPanels MultiExpansion="true" Elevation="0">
                                        <MudExpansionPanel IsInitiallyExpanded="true">
                                            <TitleContent>
                                                <div class="d-flex align-center">
                                                    <MudIcon Icon="@Icons.Material.Filled.Category" Class="mr-3" />
                                                    <MudText Typo="Typo.subtitle1">Category</MudText>
                                                </div>
                                            </TitleContent>
                                            <ChildContent>
                                                <MudSelect @bind-Value="selectedCategory" 
                                                         Variant="Variant.Outlined"
                                                         Dense="true"
                                                         FullWidth="true"
                                                         @bind-Value:after="ApplyFilters">
                                                    <MudSelectItem Value="@(string.Empty)">All Categories</MudSelectItem>
                                                    <MudSelectItem Value="@("Power Tools")">Power Tools</MudSelectItem>
                                                    <MudSelectItem Value="@("Hand Tools")">Hand Tools</MudSelectItem>
                                                    <MudSelectItem Value="@("Garden Tools")">Garden Tools</MudSelectItem>
                                                    <MudSelectItem Value="@("Automotive")">Automotive</MudSelectItem>
                                                    <MudSelectItem Value="@("Construction")">Construction</MudSelectItem>
                                                    <MudSelectItem Value="@("Home Improvement")">Home Improvement</MudSelectItem>
                                                    <MudSelectItem Value="@("Cleaning")">Cleaning</MudSelectItem>
                                                    <MudSelectItem Value="@("Other")">Other</MudSelectItem>
                                                </MudSelect>
                                            </ChildContent>
                                        </MudExpansionPanel>
                                    </MudExpansionPanels>
                                </div>

                                <!-- Location Section -->
                                <div>
                                    <MudExpansionPanels MultiExpansion="true" Elevation="0">
                                        <MudExpansionPanel IsInitiallyExpanded="false">
                                            <TitleContent>
                                                <div class="d-flex align-center">
                                                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" Class="mr-3" />
                                                    <MudText Typo="Typo.subtitle1">Location</MudText>
                                                </div>
                                            </TitleContent>
                                            <ChildContent>
                                                <MudStack Spacing="3">
                                                    <LocationAutocomplete @bind-Value="locationFilter"
                                                                         LocationSelectedWithCoordinates="OnLocationSelectedWithCoordinates"
                                                                         Label="Search near..."
                                                                         Placeholder="Enter city or address"
                                                                         Clearable="true"
                                                                         ShowPopular="false"
                                                                         MinCharacters="2"
                                                                         Dense="true"
                                                                         Variant="Variant.Outlined" />
                                                    
                                                    @if (!string.IsNullOrEmpty(locationFilter))
                                                    {
                                                        <div>
                                                            <MudText Typo="Typo.body2" Class="mb-2">Distance: @distanceKm km</MudText>
                                                            <MudSlider @bind-Value="distanceKm" 
                                                                     Min="1" 
                                                                     Max="100" 
                                                                     Step="5" 
                                                                     Color="Color.Primary" 
                                                                     @bind-Value:after="OnDistanceChanged" />
                                                        </div>
                                                        
                                                        <MudCheckBox @bind-Value="includeRemoteTools" 
                                                                    Label="Include tools without location" 
                                                                    Dense="true"
                                                                    @bind-Value:after="OnIncludeRemoteChanged" />
                                                    }
                                                </MudStack>
                                            </ChildContent>
                                        </MudExpansionPanel>
                                    </MudExpansionPanels>
                                </div>

                                <!-- Price Range Section -->
                                <div>
                                    <MudExpansionPanels MultiExpansion="true" Elevation="0">
                                        <MudExpansionPanel IsInitiallyExpanded="false">
                                            <TitleContent>
                                                <div class="d-flex align-center">
                                                    <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Class="mr-3" />
                                                    <MudText Typo="Typo.subtitle1">Price Range</MudText>
                                                </div>
                                            </TitleContent>
                                            <ChildContent>
                                                <MudStack Spacing="3">
                                                    <div class="d-flex justify-space-between align-center">
                                                        <MudText Typo="Typo.body2">Max Daily Rate</MudText>
                                                        <MudText Typo="Typo.h6" Color="Color.Primary">${maxDailyRate:F0}</MudText>
                                                    </div>
                                                    <MudSlider @bind-Value="maxDailyRate" 
                                                             Min="0" 
                                                             Max="200" 
                                                             Step="5" 
                                                             Color="Color.Primary" 
                                                             @bind-Value:after="ApplyFilters" />
                                                    <div class="d-flex justify-space-between">
                                                        <MudText Typo="Typo.caption" Color="Color.Secondary">$0</MudText>
                                                        <MudText Typo="Typo.caption" Color="Color.Secondary">$200+</MudText>
                                                    </div>
                                                </MudStack>
                                            </ChildContent>
                                        </MudExpansionPanel>
                                    </MudExpansionPanels>
                                </div>

                                <!-- Active Filters -->
                                @if (HasActiveFilters())
                                {
                                    <MudDivider />
                                    <div>
                                        <div class="d-flex justify-space-between align-center mb-2">
                                            <MudText Typo="Typo.subtitle1">Active Filters</MudText>
                                            <MudButton Variant="Variant.Text" 
                                                       Color="Color.Error" 
                                                       Size="Size.Small"
                                                       OnClick="ClearAllFilters"
                                                       StartIcon="@Icons.Material.Filled.Clear">
                                                Clear All
                                            </MudButton>
                                        </div>
                                        <MudStack Spacing="1">
                                            @if (!string.IsNullOrEmpty(selectedCategory))
                                            {
                                                <MudChip T="string" 
                                                         Text="@selectedCategory"
                                                         Color="Color.Primary"
                                                         Size="Size.Small"
                                                         OnClose="() => ClearCategoryFilter()"
                                                         CloseIcon="@Icons.Material.Filled.Close" />
                                            }
                                            
                                            @if (availableOnly.HasValue)
                                            {
                                                <MudChip T="string" 
                                                         Text="@(availableOnly.Value ? "Available Only" : "Unavailable")" 
                                                         Color="Color.Success"
                                                         Size="Size.Small"
                                                         OnClose="() => ClearAvailabilityFilter()"
                                                         CloseIcon="@Icons.Material.Filled.Close" />
                                            }
                                            
                                            @if (maxDailyRate < 200)
                                            {
                                                <MudChip T="string" 
                                                         Text="@($"Under ${maxDailyRate:F0}/day")"
                                                         Color="Color.Info"
                                                         Size="Size.Small"
                                                         OnClose="() => ClearPriceFilter()"
                                                         CloseIcon="@Icons.Material.Filled.Close" />
                                            }
                                            
                                            @if (!string.IsNullOrEmpty(locationFilter))
                                            {
                                                <MudChip T="string" 
                                                         Text="@($"{locationFilter} ({distanceKm}km)")"
                                                         Color="Color.Info"
                                                         Size="Size.Small"
                                                         OnClose="ClearLocationFilter"
                                                         CloseIcon="@Icons.Material.Filled.Close" />
                                            }
                                        </MudStack>
                                    </div>
                                }
                            </MudStack>
                        </MudPaper>
                    </div>

                    <!-- Results Content Area -->
                    <div class="flex-1 results-content">
                @if (isLoading)
    {
        <MudPaper Class="pa-8 text-center" Elevation="2" Style="border-radius: 12px;">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            <MudText Typo="Typo.h6" Class="mt-4">Loading tools...</MudText>
        </MudPaper>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => errorMessage = string.Empty)">
            @errorMessage
        </MudAlert>
    }
    else if (filteredTools != null && filteredTools.Any())
    {
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                @if (isMobile && allLoadedTools.Any())
                {
                    @($"Showing {allLoadedTools.Count} of {pagedResult?.TotalCount ?? 0} tools")
                }
                else if (!isMobile && pagedResult != null)
                {
                    var startItem = (currentPage - 1) * pageSize + 1;
                    var endItem = Math.Min(currentPage * pageSize, pagedResult.TotalCount);
                    @($"Showing {startItem}-{endItem} of {pagedResult.TotalCount} tools")
                }
                else
                {
                    @("No tools found")
                }
            </MudText>
            
            <div class="d-flex justify-end">
                <MudSelect T="string" @bind-Value="sortBy" Label="Sort by" Variant="Variant.Outlined" Dense="true" Style="width: fit-content;" AdornmentIcon="@Icons.Material.Filled.Sort" Adornment="Adornment.Start" @bind-Value:after="OnSortChanged">
                    <MudSelectItem T="string" Value="@("name")">Name</MudSelectItem>
                    <MudSelectItem T="string" Value="@("price-low")">Price: Low to High</MudSelectItem>
                    <MudSelectItem T="string" Value="@("price-high")">Price: High to Low</MudSelectItem>
                    <MudSelectItem T="string" Value="@("rating")">Rating</MudSelectItem>
                    <MudSelectItem T="string" Value="@("newest")">Newest First</MudSelectItem>
                </MudSelect>
            </div>
        </div>
        
        <MudGrid>
            @if (pagedResult?.Items != null)
            {
                @foreach (var tool in pagedResult.Items)
                {
                    <MudItem xs="12" sm="6" md="4" lg="4">
                        <MudCard Elevation="4" Style="height: 100%; border-radius: 12px; transition: transform 0.2s; cursor: pointer;" Class="hover-card" @onclick="() => ViewTool(tool.Id)">
                            @{
                                var toolImageUrl = tool.ImageUrls.Any() ? UrlService.GetFileUrl(tool.ImageUrls.First()) : string.Empty;
                                var hasValidToolImage = !string.IsNullOrEmpty(toolImageUrl);
                            }
                            <div style="position: relative; height: 200px; border-radius: 12px 12px 0 0; overflow: hidden;">
                                @if (hasValidToolImage)
                                {
                                    <img src="@toolImageUrl" 
                                         style="width: 100%; height: 200px; object-fit: cover; @(GetToolImageLoadError(tool.Id) ? "display: none;" : "")" 
                                         class="tool-image"
                                         @onerror="@(() => HandleToolImageError(tool.Id))" 
                                         @onload="@(() => HandleToolImageLoad(tool.Id))" />
                                }
                                
                                @if (!hasValidToolImage || GetToolImageLoadError(tool.Id))
                                {
                                    <ThemeAwarePlaceholder Height="200px" 
                                                          BorderRadius="12px 12px 0 0"
                                                          Icon="@Icons.Material.Filled.Build" 
                                                          IconSize="Size.Large"
                                                          IconFontSize="3rem"
                                                          AdditionalClass="tool-image" />
                                }
                            </div>
                            
                            <MudCardContent>
                                <MudText Typo="Typo.h6" GutterBottom="true">@tool.Name</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3" Style="height: 3em; overflow: hidden;">
                                    @(tool.Description.Length > 80 ? tool.Description.Substring(0, 80) + "..." : tool.Description)
                                </MudText>
                                
                                <!-- Category and Condition Tags -->
                                <MudStack Row Spacing="1" AlignItems="AlignItems.Center" Class="mb-3">
                                    <MudChip Size="Size.Small" Color="Color.Primary" Text="@tool.Category" T="string" />
                                    <MudChip Size="Size.Small" Color="Color.Secondary" Text="@tool.Condition" T="string" />
                                </MudStack>
                                
                                <div class="d-flex justify-space-between align-center mb-3">
                                    <MudChip T="string" Color="@(tool.IsAvailable ? Color.Success : Color.Error)" 
                                             Size="Size.Small" 
                                             Icon="@(tool.IsAvailable ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel)">
                                        @(tool.IsAvailable ? "Available" : "Unavailable")
                                    </MudChip>
                                </div>
                                
                                <div class="d-flex justify-space-between align-center mb-2">
                                    <MudText Typo="Typo.h6" Color="Color.Primary">
                                        $@tool.DailyRate.ToString("F2")
                                    </MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        per day
                                    </MudText>
                                </div>
                                
                                
                                @if (tool.Rating.HasValue)
                                {
                                    <div class="d-flex align-center gap-2 mb-3">
                                        <MudRating ReadOnly="true" SelectedValue="@((int)tool.Rating.Value)" MaxValue="5" Size="Size.Small" />
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            (@tool.ReviewCount)
                                        </MudText>
                                    </div>
                                }
                                
                                <div class="mt-2">
                                    <UserLink UserId="@tool.OwnerId" 
                                              DisplayName="@tool.OwnerName" 
                                              ShowAvatar="true" 
                                              AvatarSize="Size.Small"
                                              AdditionalClass="text-secondary" />
                                </div>
                            </MudCardContent>
                            
                            <MudCardActions Class="pa-4" @onclick:stopPropagation="true">
                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="w-100">
                                    <MudButton Variant="Variant.Filled" 
                                               Color="@(tool.IsAvailable ? Color.Primary : Color.Secondary)" 
                                               OnClick="() => ViewTool(tool.Id)"
                                           Disabled="@(!tool.IsAvailable)"
                                           StartIcon="@(tool.IsAvailable ? Icons.Material.Filled.Visibility : Icons.Material.Filled.Block)">
                                    @(tool.IsAvailable ? "View Details" : "Unavailable")
                                </MudButton>
                                
                                    <FavoriteButton ToolId="@tool.Id" 
                                                   OwnerUserId="@tool.OwnerId" 
                                                   Size="Size.Small" />
                                </MudStack>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            }
        </MudGrid>
        
        <!-- Desktop Pagination -->
        @if (!isMobile && pagedResult != null && totalPages > 1)
        {
            <div class="d-flex justify-center mt-6">
                <MudPagination Count="@totalPages" 
                              Selected="@currentPage" 
                              SelectedChanged="OnPageChanged"
                              Color="Color.Primary"
                              Variant="Variant.Filled"
                              ShowFirstButton="true"
                              ShowLastButton="true"
                              ShowPreviousButton="true"
                              ShowNextButton="true"
                              BoundaryCount="1"
                              MiddleCount="3" />
            </div>
        }
        
        <!-- Mobile Load More -->
        @if (isMobile && hasMoreItems && allLoadedTools.Any())
        {
            <div class="d-flex justify-center mt-6">
                <MudButton Variant="Variant.Outlined"
                          Color="Color.Primary"
                          OnClick="LoadMoreItems"
                          Disabled="@isLoadingMore"
                          StartIcon="@(isLoadingMore ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.ExpandMore)"
                          Size="Size.Large"
                          Class="load-more-btn">
                    @if (isLoadingMore)
                    {
                        @("Loading...")
                    }
                    else
                    {
                        @($"Load More ({Math.Min(pageSize, (pagedResult?.TotalCount ?? 0) - allLoadedTools.Count)} more items)")
                    }
                </MudButton>
            </div>
        }
    }
    else
    {
        <MudPaper Class="pa-8 text-center" Elevation="2" Style="border-radius: 12px;">
            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
            <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">No tools found</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                Try adjusting your search or filters, or be the first to share a tool!
            </MudText>
            @if (HasActiveFilters())
            {
                <MudButton Variant="Variant.Text" 
                         Color="Color.Primary" 
                         OnClick="ClearAllFilters" 
                         Class="mb-4"
                         StartIcon="@Icons.Material.Filled.Clear">
                    Clear Filters
                </MudButton>
            }
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/tools/create" StartIcon="@Icons.Material.Filled.Add">
                Add Your Tool
            </MudButton>
                        </MudPaper>
                    }
                    </div>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

<!-- Mobile Filter Dialog -->
<MudDialog @bind-Visible="mobileFiltersOpen" Options="mobileDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.FilterList" Class="mr-3" />
            Filter Tools
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="pa-4">
            <MudStack Spacing="4">
                <!-- Quick Filters -->
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mb-3">Quick Filters</MudText>
                    <MudStack Row Spacing="2" Wrap="Wrap.Wrap">
                        <MudChip T="bool?" 
                                 Value="@(availableOnly == true)"
                                 OnClick="() => ToggleQuickFilter(true)" 
                                 Color="@(availableOnly == true ? Color.Success : Color.Default)"
                                 Variant="@(availableOnly == true ? Variant.Filled : Variant.Outlined)"
                                 Size="Size.Small"
                                 Icon="@Icons.Material.Filled.CheckCircle">
                            Available Now
                        </MudChip>
                    </MudStack>
                </div>

                <MudDivider />

                <!-- Category -->
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mb-3">Category</MudText>
                    <MudSelect @bind-Value="selectedCategory" 
                             Variant="Variant.Outlined"
                             FullWidth="true"
                             @bind-Value:after="ApplyFilters">
                        <MudSelectItem Value="@(string.Empty)">All Categories</MudSelectItem>
                        <MudSelectItem Value="@("Power Tools")">Power Tools</MudSelectItem>
                        <MudSelectItem Value="@("Hand Tools")">Hand Tools</MudSelectItem>
                        <MudSelectItem Value="@("Garden Tools")">Garden Tools</MudSelectItem>
                        <MudSelectItem Value="@("Automotive")">Automotive</MudSelectItem>
                        <MudSelectItem Value="@("Construction")">Construction</MudSelectItem>
                        <MudSelectItem Value="@("Home Improvement")">Home Improvement</MudSelectItem>
                        <MudSelectItem Value="@("Cleaning")">Cleaning</MudSelectItem>
                        <MudSelectItem Value="@("Other")">Other</MudSelectItem>
                    </MudSelect>
                </div>

                <!-- Location -->
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mb-3">Location</MudText>
                    <MudStack Spacing="3">
                        <LocationAutocomplete @bind-Value="locationFilter"
                                             LocationSelectedWithCoordinates="OnLocationSelectedWithCoordinates"
                                             Label="Search near..."
                                             Placeholder="Enter city or address"
                                             Clearable="true"
                                             ShowPopular="false"
                                             MinCharacters="2"
                                             Variant="Variant.Outlined" />
                        
                        @if (!string.IsNullOrEmpty(locationFilter))
                        {
                            <div>
                                <MudText Typo="Typo.body2" Class="mb-2">Distance: @distanceKm km</MudText>
                                <MudSlider @bind-Value="distanceKm" 
                                         Min="1" 
                                         Max="100" 
                                         Step="5" 
                                         Color="Color.Primary" 
                                         @bind-Value:after="OnDistanceChanged" />
                            </div>
                            
                            <MudCheckBox @bind-Value="includeRemoteTools" 
                                        Label="Include tools without location" 
                                        @bind-Value:after="OnIncludeRemoteChanged" />
                        }
                    </MudStack>
                </div>

                <!-- Price Range -->
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mb-3">Price Range</MudText>
                    <MudStack Spacing="3">
                        <div class="d-flex justify-space-between align-center">
                            <MudText Typo="Typo.body2">Max Daily Rate</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Primary">${maxDailyRate:F0}</MudText>
                        </div>
                        <MudSlider @bind-Value="maxDailyRate" 
                                 Min="0" 
                                 Max="200" 
                                 Step="5" 
                                 Color="Color.Primary" 
                                 @bind-Value:after="ApplyFilters" />
                        <div class="d-flex justify-space-between">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">$0</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">$200+</MudText>
                        </div>
                    </MudStack>
                </div>
            </MudStack>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ClearAllFilters" StartIcon="@Icons.Material.Filled.Clear">Clear All</MudButton>
        <MudButton Color="Color.Primary" OnClick="CloseMobileFilters">Apply Filters</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .hover-card:hover {
        transform: translateY(-4px);
    }
    
    .load-more-btn {
        min-width: 200px;
        border-radius: 25px;
        padding: 12px 24px;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .load-more-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    
    .tool-image {
        background: linear-gradient(45deg, #f5f5f5 0%, #e0e0e0 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }

    .filter-sidebar {
        flex: 0 0 280px;
    }

    .results-content {
        flex: 1;
        min-width: 0;
    }

    .filter-panel {
        max-height: calc(100vh - 120px);
        overflow-y: auto;
    }

    @@media (max-width: 768px) {
        .load-more-btn {
            width: 100%;
            max-width: 300px;
        }
        
        .filter-sidebar {
            display: none !important;
        }
    }
</style>

@code {
    // Pagination variables
    private PagedResult<Tool>? pagedResult;
    private int currentPage = 1;
    private int pageSize = 24;
    private int totalPages = 0;
    
    // Mobile infinite scroll variables
    private List<Tool> allLoadedTools = new();
    private bool isMobile = false;
    private bool isLoadingMore = false;
    private bool hasMoreItems = true;
    private IJSObjectReference? screenSizeCleanup;
    private Dictionary<string, bool> toolImageLoadErrors = new();
    
    // Legacy tools variable for backwards compatibility
    private List<Tool>? tools => isMobile ? allLoadedTools : pagedResult?.Items;
    private List<Tool>? filteredTools => isMobile ? allLoadedTools : pagedResult?.Items;
    
    private string searchQuery = string.Empty;
    private string errorMessage = string.Empty;
    private bool isLoading = true;
    private List<frontend.Models.BreadcrumbItem> breadcrumbItems = new();
    
    // Tools filter properties
    private string selectedCategory = string.Empty;
    private bool? availableOnly = null;
    private double maxDailyRate = 200;
    private string sortBy = "name";
    private string selectedTags = string.Empty;
    
    // Location filter properties (Phase 8 Enhancement)
    private string locationFilter = string.Empty;
    private decimal? locationLat = null;
    private decimal? locationLng = null;
    private int distanceKm = 25;
    private bool includeRemoteTools = true;
    
    // Mobile filter dialog
    private bool mobileFiltersOpen = false;
    private DialogOptions mobileDialogOptions = new()
    {
        FullWidth = true,
        MaxWidth = MaxWidth.Small,
        CloseOnEscapeKey = true,
        CloseButton = true
    };

    protected override async Task OnInitializedAsync()
    {
        // Detect mobile devices with proper JavaScript interop
        isMobile = await DetectMobileDevice();
        
        // Start monitoring screen size changes for responsive mobile detection
        await StartScreenSizeMonitoring();
        
        SetupBreadcrumbs();
        await ParseQueryParameters();
        await LoadTools();
        
        // Listen for navigation changes to handle same-route navigation
        Navigation.LocationChanged += OnLocationChanged;
    }
    
    private async Task StartScreenSizeMonitoring()
    {
        try
        {
            screenSizeCleanup = await DeviceDetectionService.StartScreenSizeMonitoringAsync(OnScreenSizeChanged);
        }
        catch (Exception)
        {
            // Ignore if screen size monitoring fails
        }
    }
    
    private async Task OnScreenSizeChanged(DeviceInfo deviceInfo)
    {
        var wasMobile = isMobile;
        isMobile = deviceInfo.IsMobile;
        
        // If device type changed, reload data appropriately
        if (wasMobile != isMobile)
        {
            if (isMobile)
            {
                // Switching to mobile - prepare accumulated data
                allLoadedTools = pagedResult?.Items?.ToList() ?? new List<Tool>();
                hasMoreItems = currentPage < totalPages;
            }
            else
            {
                // Switching to desktop - clear accumulated data
                allLoadedTools.Clear();
                hasMoreItems = true;
            }
            
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task<bool> DetectMobileDevice()
    {
        try
        {
            var deviceInfo = await DeviceDetectionService.GetDeviceInfoAsync();
            return deviceInfo.IsMobile;
        }
        catch (Exception)
        {
            // Fallback to desktop if detection fails
            return false;
        }
    }

    private async Task ParseQueryParameters()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        
        // Handle search parameter
        var search = query["search"];
        if (!string.IsNullOrEmpty(search))
        {
            searchQuery = search;
        }
        else
        {
            searchQuery = string.Empty;
        }
        
        // Handle category parameter  
        var category = query["category"];
        if (!string.IsNullOrEmpty(category))
        {
            selectedCategory = category;
        }
        else
        {
            selectedCategory = string.Empty;
        }
        
        // Handle page parameter
        var pageParam = query["page"];
        if (int.TryParse(pageParam, out int page) && page > 0)
        {
            currentPage = page;
        }
        else
        {
            currentPage = 1;
        }
        
        // Handle sort parameter
        var sort = query["sort"];
        if (!string.IsNullOrEmpty(sort))
        {
            sortBy = sort;
        }
        
        // Handle tags parameter
        var tags = query["tags"];
        if (!string.IsNullOrEmpty(tags))
        {
            selectedTags = tags;
        }
        else
        {
            selectedTags = string.Empty;
        }
        
        // Handle location parameters (Phase 8 Enhancement)
        var location = query["location"];
        if (!string.IsNullOrEmpty(location))
        {
            locationFilter = location;
        }
        else
        {
            locationFilter = string.Empty;
        }
        
        var radius = query["radius"];
        if (int.TryParse(radius, out int radiusValue) && radiusValue > 0)
        {
            distanceKm = Math.Min(radiusValue, 100); // Cap at 100km
        }
        else
        {
            distanceKm = 25; // Default
        }
        
        var excludeRemote = query["excludeRemote"];
        includeRemoteTools = !bool.TryParse(excludeRemote, out bool exclude) || !exclude;
        
        // Update breadcrumbs when parameters change
        SetupBreadcrumbs();
    }

    private async Task LoadTools(bool append = false)
    {
        if (append)
        {
            isLoadingMore = true;
        }
        else
        {
            isLoading = true;
            errorMessage = string.Empty;
        }

        try
        {
            // Generate cache key for this request
            var cacheParams = new Dictionary<string, string?>
            {
                ["category"] = selectedCategory,
                ["search"] = searchQuery,
                ["sort"] = sortBy,
                ["maxRate"] = maxDailyRate == 200 ? null : maxDailyRate.ToString(),
                ["available"] = availableOnly?.ToString(),
                ["tags"] = string.IsNullOrEmpty(selectedTags) ? null : selectedTags,
                ["location"] = string.IsNullOrEmpty(locationFilter) ? null : locationFilter,
                ["lat"] = locationLat?.ToString(),
                ["lng"] = locationLng?.ToString(),
                ["distance"] = string.IsNullOrEmpty(locationFilter) ? null : distanceKm.ToString(),
                ["includeRemote"] = string.IsNullOrEmpty(locationFilter) ? null : includeRemoteTools.ToString()
            };
            var cacheKey = BrowserCacheService.GeneratePageCacheKey("tools", currentPage, pageSize, cacheParams);
            
            // Try to get cached data first (only for non-append operations)
            PagedResult<Tool>? cachedResult = null;
            if (!append)
            {
                cachedResult = await BrowserCacheService.GetCachedPageAsync<Tool>(cacheKey);
            }
            
            frontend.Models.ApiResponse<PagedResult<Tool>> result;
            if (cachedResult != null)
            {
                // Use cached data
                result = new frontend.Models.ApiResponse<PagedResult<Tool>>
                {
                    Success = true,
                    Data = cachedResult,
                    Message = "Loaded from cache"
                };
            }
            else
            {
                // Fetch from API
                result = await ToolService.GetToolsPagedAsync(
                    page: currentPage,
                    pageSize: pageSize,
                    category: string.IsNullOrEmpty(selectedCategory) ? null : selectedCategory,
                    searchTerm: string.IsNullOrWhiteSpace(searchQuery) ? null : searchQuery,
                    sortBy: sortBy,
                    maxDailyRate: maxDailyRate == 200 ? null : (decimal)maxDailyRate,
                    availableOnly: availableOnly,
                    tags: string.IsNullOrEmpty(selectedTags) ? null : selectedTags,
                    locationQuery: string.IsNullOrEmpty(locationFilter) ? null : locationFilter,
                    lat: locationLat,
                    lng: locationLng,
                    radiusKm: string.IsNullOrEmpty(locationFilter) ? null : distanceKm,
                    includeRemoteTools: string.IsNullOrEmpty(locationFilter) ? null : includeRemoteTools
                );
                
                // Cache the result if successful
                if (result.Success && result.Data != null && !append)
                {
                    await BrowserCacheService.SetCachedPageAsync(cacheKey, result.Data);
                }
            }
            
            if (result.Success && result.Data != null)
            {
                pagedResult = result.Data;
                totalPages = pagedResult.TotalPages;
                
                if (isMobile)
                {
                    if (append)
                    {
                        // Append new items for infinite scroll
                        allLoadedTools.AddRange(result.Data.Items);
                    }
                    else
                    {
                        // Reset for new search/filter
                        allLoadedTools = new List<Tool>(result.Data.Items);
                    }
                    hasMoreItems = currentPage < totalPages;
                }
            }
            else
            {
                errorMessage = result.Message ?? "Failed to load tools.";
                pagedResult = null;
                if (isMobile && !append)
                {
                    allLoadedTools.Clear();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            pagedResult = null;
            if (isMobile && !append)
            {
                allLoadedTools.Clear();
            }
        }
        finally
        {
            if (append)
            {
                isLoadingMore = false;
            }
            else
            {
                isLoading = false;
            }
        }
    }

    private async Task SearchTools()
    {
        await LoadTools();
    }

    private async Task ApplyFilters()
    {
        // Reset to first page when filters change
        currentPage = 1;
        
        // Clear mobile accumulated data
        if (isMobile)
        {
            allLoadedTools.Clear();
            hasMoreItems = true;
        }
        
        // Update URL with current parameters
        UpdateUrl();
        
        // Reload data with new filters
        await LoadTools();
        
        // Update breadcrumbs when filters change
        SetupBreadcrumbs();
    }

    private async Task OnPageChanged(int page)
    {
        if (page == currentPage) return;
        
        currentPage = page;
        UpdateUrl();
        await LoadTools();
    }
    
    private async Task OnSortChanged()
    {
        // Reset to first page when sort changes
        currentPage = 1;
        
        // Clear mobile accumulated data
        if (isMobile)
        {
            allLoadedTools.Clear();
            hasMoreItems = true;
        }
        
        UpdateUrl();
        await LoadTools();
    }
    
    private async Task LoadMoreItems()
    {
        if (!hasMoreItems || isLoadingMore) return;
        
        currentPage++;
        await LoadTools(append: true);
    }
    
    private void UpdateUrl()
    {
        var queryParams = new List<string>();
        
        if (!string.IsNullOrEmpty(searchQuery))
            queryParams.Add($"search={Uri.EscapeDataString(searchQuery)}");
            
        if (!string.IsNullOrEmpty(selectedCategory))
            queryParams.Add($"category={Uri.EscapeDataString(selectedCategory)}");
            
        if (currentPage > 1)
            queryParams.Add($"page={currentPage}");
            
        if (sortBy != "name")
            queryParams.Add($"sort={Uri.EscapeDataString(sortBy)}");
            
        if (!string.IsNullOrEmpty(selectedTags))
            queryParams.Add($"tags={Uri.EscapeDataString(selectedTags)}");
            
        // Add location parameters (Phase 8 Enhancement)
        if (!string.IsNullOrEmpty(locationFilter))
        {
            queryParams.Add($"location={Uri.EscapeDataString(locationFilter)}");
            queryParams.Add($"radius={distanceKm}");
            
            if (!includeRemoteTools)
            {
                queryParams.Add("excludeRemote=true");
            }
        }
        
        var queryString = queryParams.Any() ? "?" + string.Join("&", queryParams) : "";
        var newUrl = $"/tools{queryString}";
        
        Navigation.NavigateTo(newUrl, false);
    }

    private void ClearFilters()
    {
        selectedCategory = string.Empty;
        availableOnly = null;
        maxDailyRate = 200;
        selectedTags = string.Empty;
        ApplyFilters();
        
        // Update URL to remove all parameters
        var uri = new Uri(Navigation.Uri);
        var baseUrl = $"{uri.Scheme}://{uri.Authority}{uri.AbsolutePath}";
        Navigation.NavigateTo(baseUrl);
    }
    
    private bool HasActiveFilters()
    {
        return !string.IsNullOrEmpty(selectedCategory) ||
               availableOnly.HasValue ||
               maxDailyRate < 200 ||
               !string.IsNullOrEmpty(selectedTags) ||
               !string.IsNullOrEmpty(locationFilter);
    }
    
    private List<string> GetActiveTagList()
    {
        if (string.IsNullOrEmpty(selectedTags))
            return new List<string>();
            
        return selectedTags.Split(',', StringSplitOptions.RemoveEmptyEntries)
                          .Select(tag => tag.Trim())
                          .Where(tag => !string.IsNullOrEmpty(tag))
                          .ToList();
    }
    
    private async Task ClearCategoryFilter()
    {
        selectedCategory = string.Empty;
        await ApplyFilters();
    }
    
    private async Task ClearAvailabilityFilter()
    {
        availableOnly = null;
        await ApplyFilters();
    }
    
    private async Task ClearPriceFilter()
    {
        maxDailyRate = 200;
        await ApplyFilters();
    }
    
    private async Task RemoveTag(string tag)
    {
        var tags = GetActiveTagList();
        tags.Remove(tag);
        selectedTags = string.Join(",", tags);
        await ApplyFilters();
    }
    
    private async Task ClearAllFilters()
    {
        selectedCategory = string.Empty;
        availableOnly = null;
        maxDailyRate = 200;
        selectedTags = string.Empty;
        locationFilter = string.Empty;
        distanceKm = 25;
        includeRemoteTools = true;
        await ApplyFilters();
    }
    
    // Location filter event handlers (Phase 8 Enhancement)
    private async Task OnLocationSelectedWithCoordinates(LocationAutocompleteResult result)
    {
        locationFilter = result.DisplayName ?? string.Empty;
        locationLat = result.Latitude;
        locationLng = result.Longitude;
        
        Console.WriteLine($"Tools page: Location selected - {result.DisplayName}, Has coordinates: {result.HasCoordinates}");
        if (result.HasCoordinates)
        {
            Console.WriteLine($"Tools page: Using coordinates for search - Lat: {result.Latitude}, Lng: {result.Longitude}");
        }
        
        await ApplyFilters();
    }
    
    private async Task OnDistanceChanged()
    {
        await ApplyFilters();
    }
    
    private async Task OnIncludeRemoteChanged()
    {
        await ApplyFilters();
    }
    
    private async Task ClearLocationFilter()
    {
        locationFilter = string.Empty;
        distanceKm = 25;
        includeRemoteTools = true;
        await ApplyFilters();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchTools();
        }
    }

    private void ViewTool(string toolId)
    {
        Navigation.NavigateTo($"/tools/{toolId}");
    }

    private void SetupBreadcrumbs()
    {
        breadcrumbItems = BreadcrumbService.GenerateToolsBreadcrumb(
            category: selectedCategory,
            page: BreadcrumbPage.Browser);
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        // Handle navigation changes to the same route with different query parameters
        await ParseQueryParameters();
        await LoadTools();
        await InvokeAsync(StateHasChanged);
    }
    
    private bool GetToolImageLoadError(string toolId)
    {
        return toolImageLoadErrors.GetValueOrDefault(toolId, false);
    }
    
    private void HandleToolImageError(string toolId)
    {
        toolImageLoadErrors[toolId] = true;
        StateHasChanged();
    }
    
    private void HandleToolImageLoad(string toolId)
    {
        toolImageLoadErrors[toolId] = false;
        StateHasChanged();
    }
    
    // New filter methods
    private void OpenMobileFilters()
    {
        mobileFiltersOpen = true;
    }
    
    private void CloseMobileFilters()
    {
        mobileFiltersOpen = false;
    }
    
    private async Task ToggleQuickFilter(bool availability)
    {
        if (availableOnly == availability)
        {
            availableOnly = null; // Clear filter if already set
        }
        else
        {
            availableOnly = availability;
        }
        await ApplyFilters();
    }
    
    private int GetActiveFilterCount()
    {
        int count = 0;
        if (!string.IsNullOrEmpty(selectedCategory)) count++;
        if (availableOnly.HasValue) count++;
        if (maxDailyRate < 200) count++;
        if (!string.IsNullOrEmpty(selectedTags)) count++;
        if (!string.IsNullOrEmpty(locationFilter)) count++;
        return count;
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
        
        // Clean up screen size monitoring
        if (screenSizeCleanup != null)
        {
            _ = Task.Run(async () =>
            {
                try
                {
                    await DeviceDetectionService.StopScreenSizeMonitoringAsync(screenSizeCleanup);
                }
                catch
                {
                    // Ignore cleanup errors
                }
            });
        }
    }
}