@page "/tools"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@using frontend.Components
@using frontend.Components.Common
@inject IToolService ToolService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IUrlService UrlService
@inject IBreadcrumbService BreadcrumbService
@attribute [AllowAnonymous]
@implements IDisposable

<PageTitle>Browse Tools - NeighborTools</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <!-- Breadcrumb -->
    <BreadcrumbNavigation Items="@breadcrumbItems" />
    <MudPaper Class="pa-6" Elevation="0">
        <MudGrid>
            <!-- Header Section -->
            <MudItem xs="12">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                    <div>
                        <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.Build" Class="mr-2" />
                            Browse Tools
                        </MudText>
                        <MudText Typo="Typo.body1" Color="Color.Secondary">
                            Find the perfect tools for your project
                        </MudText>
                    </div>
                    
                    <div class="d-flex align-center gap-2">
                        <MudTextField @bind-Value="searchQuery"
                                      @onkeypress="HandleKeyPress"
                                      Placeholder="Search tools..."
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      OnAdornmentClick="SearchTools"
                                      Style="min-width: 300px;" />
                        
                        <AuthorizeView>
                            <Authorized>
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Primary" 
                                           StartIcon="@Icons.Material.Filled.Add"
                                           Href="/tools/create">
                                    Add Tool
                                </MudButton>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </MudStack>
            </MudItem>

            <!-- Filters Section -->
            <MudItem xs="12">
                <MudPaper Class="pa-4" Elevation="1">
        <MudStack Row Spacing="3" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
            <!-- Category Filter -->
            <MudSelect @bind-Value="selectedCategory" 
                     Label="Category" 
                     Variant="Variant.Outlined"
                     AnchorOrigin="Origin.BottomCenter"
                     @bind-Value:after="ApplyFilters">
                <MudSelectItem Value="@(string.Empty)">All Categories</MudSelectItem>
                <MudSelectItem Value="@("Power Tools")">Power Tools</MudSelectItem>
                <MudSelectItem Value="@("Hand Tools")">Hand Tools</MudSelectItem>
                <MudSelectItem Value="@("Garden Tools")">Garden Tools</MudSelectItem>
                <MudSelectItem Value="@("Automotive")">Automotive</MudSelectItem>
                <MudSelectItem Value="@("Construction")">Construction</MudSelectItem>
                <MudSelectItem Value="@("Home Improvement")">Home Improvement</MudSelectItem>
                <MudSelectItem Value="@("Cleaning")">Cleaning</MudSelectItem>
                <MudSelectItem Value="@("Other")">Other</MudSelectItem>
            </MudSelect>

            <!-- Availability Filter -->
            <MudSelect @bind-Value="availableOnly" 
                     Label="Availability" 
                     Variant="Variant.Outlined"
                     AnchorOrigin="Origin.BottomCenter"
                     @bind-Value:after="ApplyFilters">
                <MudSelectItem T="bool?" Value="@((bool?)null)">All Tools</MudSelectItem>
                <MudSelectItem T="bool?" Value="@((bool?)true)">Available Only</MudSelectItem>
                <MudSelectItem T="bool?" Value="@((bool?)false)">Unavailable</MudSelectItem>
            </MudSelect>

            <!-- Price Range -->
            <div style="min-width: 200px;">
                <MudText Typo="Typo.body2" Class="mb-2">Max Daily Rate: $@maxDailyRate</MudText>
                <MudSlider @bind-Value="maxDailyRate" 
                         Min="0" 
                         Max="200" 
                         Step="5" 
                         Color="Color.Primary" 
                         @bind-Value:after="ApplyFilters" />
            </div>
                </MudStack>
                </MudPaper>
            </MudItem>

            <!-- Results Section -->
            <MudItem xs="12">
                @if (isLoading)
    {
        <MudPaper Class="pa-8 text-center" Elevation="2" Style="border-radius: 12px;">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            <MudText Typo="Typo.h6" Class="mt-4">Loading tools...</MudText>
        </MudPaper>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => errorMessage = string.Empty)">
            @errorMessage
        </MudAlert>
    }
    else if (filteredTools != null && filteredTools.Any())
    {
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                Showing @(filteredTools?.Count ?? 0) tools
            </MudText>
            
            <div class="d-flex justify-end">
                <MudSelect T="string" @bind-Value="sortBy" Label="Sort by" Variant="Variant.Outlined" Dense="true" Style="width: fit-content;" AdornmentIcon="@Icons.Material.Filled.Sort" Adornment="Adornment.Start" @bind-Value:after="StateHasChanged">
                    <MudSelectItem T="string" Value="@("name")">Name</MudSelectItem>
                    <MudSelectItem T="string" Value="@("price-low")">Price: Low to High</MudSelectItem>
                    <MudSelectItem T="string" Value="@("price-high")">Price: High to Low</MudSelectItem>
                    <MudSelectItem T="string" Value="@("rating")">Rating</MudSelectItem>
                    <MudSelectItem T="string" Value="@("newest")">Newest First</MudSelectItem>
                </MudSelect>
            </div>
        </div>
        
        <MudGrid>
            @foreach (var tool in GetSortedTools())
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="4" Style="height: 100%; border-radius: 12px; transition: transform 0.2s; cursor: pointer;" Class="hover-card" @onclick="() => ViewTool(tool.Id)">
                        @if (tool.ImageUrls.Any())
                        {
                            <MudCardMedia Image="@UrlService.GetFileUrl(tool.ImageUrls.First())" Height="200" Style="border-radius: 12px 12px 0 0;" />
                        }
                        else
                        {
                            <ThemeAwarePlaceholder Height="200px" 
                                                  BorderRadius="12px 12px 0 0"
                                                  Icon="@Icons.Material.Filled.Build" 
                                                  IconSize="Size.Large"
                                                  IconFontSize="3rem" />
                        }
                        
                        <MudCardContent>
                            <MudText Typo="Typo.h6" GutterBottom="true">@tool.Name</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3" Style="height: 3em; overflow: hidden;">
                                @(tool.Description.Length > 80 ? tool.Description.Substring(0, 80) + "..." : tool.Description)
                            </MudText>
                            
                            <div class="d-flex justify-space-between align-center mb-3">
                                <MudChip T="string" Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Category">
                                    @tool.Category
                                </MudChip>
                                <MudChip T="string" Color="@(tool.IsAvailable ? Color.Success : Color.Error)" 
                                         Size="Size.Small" 
                                         Icon="@(tool.IsAvailable ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel)">
                                    @(tool.IsAvailable ? "Available" : "Unavailable")
                                </MudChip>
                            </div>
                            
                            <div class="d-flex justify-space-between align-center mb-2">
                                <MudText Typo="Typo.h6" Color="Color.Primary">
                                    $@tool.DailyRate.ToString("F2")
                                </MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    per day
                                </MudText>
                            </div>
                            
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-2">
                                Condition: @tool.Condition
                            </MudText>
                            
                            @if (tool.Rating.HasValue)
                            {
                                <div class="d-flex align-center gap-2 mb-3">
                                    <MudRating ReadOnly="true" SelectedValue="@((int)tool.Rating.Value)" MaxValue="5" Size="Size.Small" />
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        (@tool.ReviewCount)
                                    </MudText>
                                </div>
                            }
                            
                            <div class="mt-2">
                                <UserLink UserId="@tool.OwnerId" 
                                          DisplayName="@tool.OwnerName" 
                                          ShowAvatar="true" 
                                          AvatarSize="Size.Small"
                                          AdditionalClass="text-secondary" />
                            </div>
                        </MudCardContent>
                        
                        <MudCardActions Class="pa-4" @onclick:stopPropagation="true">
                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="w-100">
                                <MudButton Variant="Variant.Filled" 
                                           Color="@(tool.IsAvailable ? Color.Primary : Color.Secondary)" 
                                           OnClick="() => ViewTool(tool.Id)"
                                       Disabled="@(!tool.IsAvailable)"
                                       StartIcon="@(tool.IsAvailable ? Icons.Material.Filled.Visibility : Icons.Material.Filled.Block)">
                                @(tool.IsAvailable ? "View Details" : "Unavailable")
                            </MudButton>
                            
                                <FavoriteButton ToolId="@tool.Id" 
                                               OwnerUserId="@tool.OwnerId" 
                                               Size="Size.Small" />
                            </MudStack>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudPaper Class="pa-8 text-center" Elevation="2" Style="border-radius: 12px;">
            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
            <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">No tools found</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                Try adjusting your search or filters, or be the first to share a tool!
            </MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/tools/create" StartIcon="@Icons.Material.Filled.Add">
                Add Your Tool
            </MudButton>
                </MudPaper>
            }
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

<style>
    .hover-card:hover {
        transform: translateY(-4px);
    }
</style>

@code {
    // Tools variables
    private List<Tool>? tools;
    private List<Tool>? filteredTools;
    private string searchQuery = string.Empty;
    private string errorMessage = string.Empty;
    private bool isLoading = true;
    private List<frontend.Models.BreadcrumbItem> breadcrumbItems = new();
    
    // Tools filter properties
    private string selectedCategory = string.Empty;
    private bool? availableOnly = null;
    private double maxDailyRate = 200;
    private string sortBy = "name";

    protected override async Task OnInitializedAsync()
    {
        SetupBreadcrumbs();
        await ParseQueryParameters();
        await LoadTools();
        
        // Listen for navigation changes to handle same-route navigation
        Navigation.LocationChanged += OnLocationChanged;
    }

    private async Task ParseQueryParameters()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        
        // Handle search parameter
        var search = query["search"];
        if (!string.IsNullOrEmpty(search))
        {
            searchQuery = search;
        }
        else
        {
            searchQuery = string.Empty;
        }
        
        // Handle category parameter  
        var category = query["category"];
        if (!string.IsNullOrEmpty(category))
        {
            selectedCategory = category;
        }
        else
        {
            selectedCategory = string.Empty;
        }
        
        // Update breadcrumbs when parameters change
        SetupBreadcrumbs();
    }

    private async Task LoadTools()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            ApiResponse<List<Tool>> result;
            
            if (!string.IsNullOrWhiteSpace(searchQuery))
            {
                result = await ToolService.SearchToolsAsync(searchQuery);
            }
            else
            {
                result = await ToolService.GetToolsAsync();
            }
            
            if (result.Success)
            {
                tools = result.Data;
                ApplyFilters();
            }
            else
            {
                errorMessage = result.Message ?? "Failed to load tools.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchTools()
    {
        await LoadTools();
    }

    private void ApplyFilters()
    {
        if (tools == null)
        {
            filteredTools = null;
            return;
        }

        filteredTools = tools.Where(t =>
            (string.IsNullOrEmpty(selectedCategory) || t.Category == selectedCategory) &&
            (availableOnly == null || t.IsAvailable == availableOnly) &&
            t.DailyRate <= (decimal)maxDailyRate
        ).ToList();
        
        // Update breadcrumbs when filters change
        SetupBreadcrumbs();
    }

    private List<Tool> GetSortedTools()
    {
        if (filteredTools == null) return new List<Tool>();

        return sortBy switch
        {
            "price-low" => filteredTools.OrderBy(t => t.DailyRate).ToList(),
            "price-high" => filteredTools.OrderByDescending(t => t.DailyRate).ToList(),
            "rating" => filteredTools.OrderByDescending(t => t.Rating ?? 0).ToList(),
            "newest" => filteredTools.OrderByDescending(t => t.CreatedAt).ToList(),
            _ => filteredTools.OrderBy(t => t.Name).ToList()
        };
    }

    private void ClearFilters()
    {
        selectedCategory = string.Empty;
        availableOnly = null;
        maxDailyRate = 200;
        ApplyFilters();
        
        // Update URL to remove category parameter
        var uri = new Uri(Navigation.Uri);
        var baseUrl = $"{uri.Scheme}://{uri.Authority}{uri.AbsolutePath}";
        Navigation.NavigateTo(baseUrl);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchTools();
        }
    }

    private void ViewTool(string toolId)
    {
        Navigation.NavigateTo($"/tools/{toolId}");
    }

    private void SetupBreadcrumbs()
    {
        breadcrumbItems = BreadcrumbService.GenerateToolsBreadcrumb(
            category: selectedCategory,
            page: BreadcrumbPage.Browser);
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        // Handle navigation changes to the same route with different query parameters
        await ParseQueryParameters();
        await LoadTools();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}