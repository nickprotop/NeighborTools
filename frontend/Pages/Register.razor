@page "/register"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@using MudBlazor
@using frontend.Models
@using frontend.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<PageTitle>Register - NeighborTools</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
    <MudPaper Elevation="8" Class="pa-8" Style="border-radius: 16px;">
        <div class="d-flex flex-column align-center mb-6">
            <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Size="Size.Large" Color="Color.Primary" Class="mb-4" Style="font-size: 4rem;" />
            <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">
                Join NeighborTools
            </MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary" Align="Align.Center">
                Create your account and start sharing tools with your community
            </MudText>
        </div>

        <EditForm Model="registerRequest" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="(() => errorMessage = string.Empty)">
                    @errorMessage
                </MudAlert>
            }

            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="registerRequest.FirstName"
                                  Label="First Name"
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  Required="true"
                                  RequiredError="First name is required"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Person" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="registerRequest.LastName"
                                  Label="Last Name"
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  Required="true"
                                  RequiredError="Last name is required"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Person" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="registerRequest.Email"
                                  Label="Email Address"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Email"
                                  FullWidth="true"
                                  Required="true"
                                  RequiredError="Email is required"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="registerRequest.PhoneNumber"
                                  Label="Phone Number"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Telephone"
                                  FullWidth="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Phone" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="registerRequest.Address"
                                  Label="Address"
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Home" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="registerRequest.Password"
                                  Label="Password"
                                  Variant="Variant.Outlined"
                                  InputType="@passwordInputType"
                                  FullWidth="true"
                                  Required="true"
                                  RequiredError="Password is required"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@passwordAdornmentIcon"
                                  OnAdornmentClick="TogglePasswordVisibility" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="registerRequest.ConfirmPassword"
                                  Label="Confirm Password"
                                  Variant="Variant.Outlined"
                                  InputType="@confirmPasswordInputType"
                                  FullWidth="true"
                                  Required="true"
                                  RequiredError="Please confirm your password"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@confirmPasswordAdornmentIcon"
                                  OnAdornmentClick="ToggleConfirmPasswordVisibility" />
                </MudItem>
            </MudGrid>

            <!-- Terms and Privacy Acceptance -->
            <div class="mt-6 mb-4">
                <MudPaper Class="pa-4" Elevation="1">
                    <MudStack Spacing="3">
                        <MudCheckBox T="bool" @bind-Value="registerRequest.AcceptTerms" 
                                    Required="true"
                                    Color="Color.Primary">
                            <MudText Typo="Typo.body2">
                                I agree to the <MudLink Href="/terms-of-service" Target="_blank" Color="Color.Primary">Terms of Service</MudLink>
                            </MudText>
                        </MudCheckBox>
                        
                        <MudCheckBox T="bool" @bind-Value="registerRequest.AcceptPrivacyPolicy" 
                                    Required="true"
                                    Color="Color.Primary">
                            <MudText Typo="Typo.body2">
                                I have read and understand the <MudLink Href="/privacy-policy" Target="_blank" Color="Color.Primary">Privacy Policy</MudLink>
                            </MudText>
                        </MudCheckBox>
                        
                        <MudCheckBox T="bool" @bind-Value="registerRequest.AcceptDataProcessing" 
                                    Required="true"
                                    Color="Color.Primary">
                            <MudText Typo="Typo.body2">
                                I consent to the processing of my personal data as described in the Privacy Policy
                            </MudText>
                        </MudCheckBox>
                        
                        <MudCheckBox T="bool" @bind-Value="registerRequest.AcceptMarketing" 
                                    Color="Color.Primary">
                            <MudText Typo="Typo.body2">
                                I would like to receive marketing communications and updates about NeighborTools (optional)
                            </MudText>
                        </MudCheckBox>
                    </MudStack>
                </MudPaper>
                
                @if (!string.IsNullOrEmpty(termsValidationError))
                {
                    <MudAlert Severity="Severity.Error" Class="mt-2">
                        @termsValidationError
                    </MudAlert>
                }
            </div>

            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true"
                       Class="mt-6 mb-4"
                       Disabled="isLoading"
                       StartIcon="@(isLoading ? null : Icons.Material.Filled.PersonAdd)">
                @if (isLoading)
                {
                    <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ml-2">Creating Account...</MudText>
                }
                else
                {
                    <MudText>Create Account</MudText>
                }
            </MudButton>
        </EditForm>

        @if (showVerificationMessage)
        {
            <MudAlert Severity="Severity.Success" Class="mt-6">
                <div class="text-center">
                    <MudText Typo="Typo.h5" GutterBottom="true" Class="mt-2">
                        Check Your Email!
                    </MudText>
                    <MudText Typo="Typo.body1" Class="mb-3">
                        We've sent a verification email to <strong>@registeredEmail</strong>.
                        Please click the verification link in your email to activate your account.
                    </MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                        Can't find the email? Check your spam folder or click below to resend.
                    </MudText>
                    
                    <MudButton Variant="Variant.Outlined" 
                              Color="Color.Primary"
                              StartIcon="@Icons.Material.Filled.Email"
                              OnClick="ResendVerification"
                              Disabled="isResending">
                        @if (isResending)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            <span class="ml-2">Sending...</span>
                        }
                        else
                        {
                            <span>Resend Verification Email</span>
                        }
                    </MudButton>
                </div>
            </MudAlert>
        }

        <MudDivider Class="my-4" />

        <div class="d-flex justify-center">
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Already have an account?
                <MudLink Href="/login" Color="Color.Primary" Class="ml-1">
                    Sign in here
                </MudLink>
            </MudText>
        </div>
    </MudPaper>
</MudContainer>

@code {
    private RegisterRequest registerRequest = new();
    private string errorMessage = string.Empty;
    private string termsValidationError = string.Empty;
    private bool isLoading = false;
    private bool showVerificationMessage = false;
    private string registeredEmail = string.Empty;
    private bool isResending = false;

    // Password visibility toggles
    private bool passwordVisible = false;
    private bool confirmPasswordVisible = false;
    private InputType passwordInputType => passwordVisible ? InputType.Text : InputType.Password;
    private InputType confirmPasswordInputType => confirmPasswordVisible ? InputType.Text : InputType.Password;
    private string passwordAdornmentIcon => passwordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    private string confirmPasswordAdornmentIcon => confirmPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/");
        }
    }

    private void TogglePasswordVisibility()
    {
        passwordVisible = !passwordVisible;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        confirmPasswordVisible = !confirmPasswordVisible;
    }

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = string.Empty;
        termsValidationError = string.Empty;

        try
        {
            // Validate passwords match
            if (registerRequest.Password != registerRequest.ConfirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            // Validate required terms acceptance
            if (!registerRequest.AcceptTerms)
            {
                termsValidationError = "You must accept the Terms of Service to create an account.";
                return;
            }

            if (!registerRequest.AcceptPrivacyPolicy)
            {
                termsValidationError = "You must accept the Privacy Policy to create an account.";
                return;
            }

            if (!registerRequest.AcceptDataProcessing)
            {
                termsValidationError = "You must consent to data processing to create an account.";
                return;
            }

            var result = await AuthService.RegisterAsync(registerRequest);
            
            if (result.Success)
            {
                if (result.Data?.EmailVerificationRequired == true)
                {
                    // Show email verification success message and stay on registration page
                    showVerificationMessage = true;
                    registeredEmail = registerRequest.Email;
                    Snackbar.Add("Account created! Please check your email to verify your account before logging in.", Severity.Info);
                }
                else
                {
                    // Normal registration flow for users who don't need verification
                    Snackbar.Add("Account created successfully! Welcome to NeighborTools.", Severity.Success);
                    Navigation.NavigateTo("/");
                }
            }
            else
            {
                errorMessage = result.Message ?? "Registration failed. Please check your information and try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ResendVerification()
    {
        isResending = true;
        StateHasChanged();

        try
        {
            var request = new ResendVerificationRequest
            {
                Email = registeredEmail
            };

            var result = await AuthService.ResendVerificationAsync(request);

            if (result.Success)
            {
                Snackbar.Add("Verification email resent! Please check your inbox.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to resend verification email. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            isResending = false;
            StateHasChanged();
        }
    }
}