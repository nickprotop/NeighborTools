@page "/admin/disputes"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@using ToolsSharing.Frontend.Services
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Dispute Management - NeighborTools Admin</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-6">
    <div class="d-flex align-center mb-4">
        <MudIcon Icon="@Icons.Material.Filled.ReportProblem" Color="Color.Warning" Size="Size.Large" Class="mr-3" />
        <MudText Typo="Typo.h3">Dispute Management Center</MudText>
    </div>
    
    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (loadError != null)
    {
        <MudAlert Severity="Severity.Error">@loadError</MudAlert>
    }
    else
    {
        <!-- Quick Stats -->
        <MudGrid Class="mb-6">
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.NewReleases" Color="Color.Warning" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Open Disputes</MudText>
                                <MudText Typo="Typo.h4">@openDisputes</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Warning">Awaiting review</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Assignment" Color="Color.Info" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Under Review</MudText>
                                <MudText Typo="Typo.h4">@underReviewDisputes</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Info">Being investigated</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Escalated</MudText>
                                <MudText Typo="Typo.h4">@escalatedDisputes</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Error">PayPal involvement</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Resolved This Month</MudText>
                                <MudText Typo="Typo.h4">@resolvedThisMonth</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Success">Successfully closed</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>


        <!-- Quick Actions -->
        <MudPaper Class="pa-4 mb-4">
            <MudText Typo="Typo.h6" Class="mb-3">Quick Actions</MudText>
            <div class="d-flex flex-wrap gap-2">
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Warning" 
                           StartIcon="@Icons.Material.Filled.NewReleases"
                           OnClick="@(() => LoadDisputesByStatus(DisputeStatus.Open))">
                    Review Open Disputes (@openDisputes)
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Error" 
                           StartIcon="@Icons.Material.Filled.Error"
                           OnClick="@(() => LoadDisputesByStatus(DisputeStatus.EscalatedToPayPal))">
                    Handle Escalated (@escalatedDisputes)
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Info" 
                           StartIcon="@Icons.Material.Filled.Assignment"
                           OnClick="@(() => LoadDisputesByStatus(DisputeStatus.InProgress))">
                    In Progress (@underReviewDisputes)
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Handshake"
                           OnClick="@(() => activeTab = 1)">
                    Mutual Closures (@(mutualClosuresCount ?? 0))
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Success" 
                           StartIcon="@Icons.Material.Filled.FileDownload"
                           OnClick="ExportDisputes">
                    Export Report
                </MudButton>
            </div>
        </MudPaper>

        <!-- Main Content Tabs -->
        <MudTabs @bind-ActivePanelIndex="activeTab" Elevation="2" Rounded="true" Color="Color.Primary">
            <!-- Disputes Tab -->
            <MudTabPanel Text="Disputes" Icon="@Icons.Material.Filled.ReportProblem">
                <div class="pa-4">
                    <!-- Dispute Filters -->
                    <MudPaper Class="pa-4 mb-4">
                        <MudText Typo="Typo.h6" Class="mb-3">Filter Disputes</MudText>
                        <MudGrid>
                            <MudItem xs="12" sm="6" md="3">
                                <MudSelect T="DisputeStatus?" @bind-Value="selectedStatus" Label="Status" Clearable="true">
                                    <MudSelectItem T="DisputeStatus?" Value="@DisputeStatus.Open">Open</MudSelectItem>
                                    <MudSelectItem T="DisputeStatus?" Value="@DisputeStatus.InProgress">In Progress</MudSelectItem>
                                    <MudSelectItem T="DisputeStatus?" Value="@DisputeStatus.EscalatedToPayPal">Escalated to PayPal</MudSelectItem>
                                    <MudSelectItem T="DisputeStatus?" Value="@DisputeStatus.Resolved">Resolved</MudSelectItem>
                                    <MudSelectItem T="DisputeStatus?" Value="@DisputeStatus.Closed">Closed</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3">
                                <MudSelect T="DisputeType?" @bind-Value="selectedType" Label="Type" Clearable="true">
                                    <MudSelectItem T="DisputeType?" Value="@DisputeType.PaymentDispute">Payment Dispute</MudSelectItem>
                                    <MudSelectItem T="DisputeType?" Value="@DisputeType.ServiceDispute">Service Dispute</MudSelectItem>
                                    <MudSelectItem T="DisputeType?" Value="@DisputeType.Damage">Damage</MudSelectItem>
                                    <MudSelectItem T="DisputeType?" Value="@DisputeType.NoShow">No Show</MudSelectItem>
                                    <MudSelectItem T="DisputeType?" Value="@DisputeType.Chargeback">Chargeback</MudSelectItem>
                                    <MudSelectItem T="DisputeType?" Value="@DisputeType.Refund">Refund</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3">
                                <MudDateRangePicker @bind-DateRange="dateRange" Label="Date Range" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3" Class="d-flex align-end">
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Primary" 
                                           StartIcon="@Icons.Material.Filled.Search"
                                           OnClick="LoadDisputes"
                                           FullWidth="true">
                                    Apply Filters
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>

                    <div class="d-flex justify-space-between align-center mb-4">
                        <MudText Typo="Typo.h6">Disputes (@totalCount)</MudText>
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Secondary" 
                                   StartIcon="@Icons.Material.Filled.Refresh"
                                   OnClick="LoadDisputes">
                            Refresh
                        </MudButton>
                    </div>
            
                    @if (disputes?.Any() == true)
                    {
                        <MudTable T="Dispute" Items="@disputes" Hover="true" Dense="true" FixedHeader="true" Height="600px">
                    <HeaderContent>
                        <MudTh>Dispute ID</MudTh>
                        <MudTh>Rental/Tool</MudTh>
                        <MudTh>Parties</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Created</MudTh>
                        <MudTh>Amount</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Dispute ID">
                            <div>
                                <MudText Typo="Typo.body2">@context.Id.Substring(0, 8)...</MudText>
                                @if (!string.IsNullOrEmpty(context.ExternalDisputeId))
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">PayPal: @context.ExternalDisputeId.Substring(0, 8)...</MudText>
                                }
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Rental/Tool">
                            <div>
                                <MudText Typo="Typo.body2">@(context.Rental?.Tool?.Name ?? "Unknown Tool")</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">Rental: @context.RentalId.Substring(0, 8)...</MudText>
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Parties">
                            <div>
                                <MudText Typo="Typo.body2">@context.InitiatedByName</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">vs @(context.Rental?.OwnerName ?? "Owner")</MudText>
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Type">
                            <MudChip T="string" Color="@GetTypeColor(context.Type)" Size="Size.Small">
                                @context.Type.ToString()
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Status">
                            <MudChip T="string" Color="@GetStatusColor(context.Status)" Size="Size.Small">
                                @context.Status.ToString()
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Created">
                            <div>
                                <MudText Typo="Typo.body2">@context.CreatedAt.ToString("MMM dd, yyyy")</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@context.CreatedAt.ToString("HH:mm")</MudText>
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Amount">
                            @if (context.DisputedAmount.HasValue)
                            {
                                <MudText Typo="Typo.body2" Style="font-weight: 500;">$@context.DisputedAmount.Value.ToString("N2")</MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.caption" Color="Color.Secondary">N/A</MudText>
                            }
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <div class="d-flex gap-1">
                                <MudButton Size="Size.Small" 
                                           Variant="Variant.Text" 
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Visibility"
                                           OnClick="@(() => ViewDisputeDetails(context.Id))">
                                    View
                                </MudButton>
                                @if (context.Status == DisputeStatus.Open)
                                {
                                    <MudButton Size="Size.Small" 
                                               Variant="Variant.Text" 
                                               Color="Color.Info"
                                               StartIcon="@Icons.Material.Filled.PlayArrow"
                                               OnClick="@(() => StartReview(context.Id))">
                                        Start Review
                                    </MudButton>
                                }
                                @if (context.Status == DisputeStatus.InProgress)
                                {
                                    <MudButton Size="Size.Small" 
                                               Variant="Variant.Text" 
                                               Color="Color.Warning"
                                               StartIcon="@Icons.Material.Filled.TrendingUp"
                                               OnClick="@(() => EscalateDispute(context.Id))">
                                        Escalate
                                    </MudButton>
                                    <MudButton Size="Size.Small" 
                                               Variant="Variant.Text" 
                                               Color="Color.Success"
                                               StartIcon="@Icons.Material.Filled.CheckCircle"
                                               OnClick="@(() => ResolveDispute(context.Id))">
                                        Resolve
                                    </MudButton>
                                }
                                @if (context.Status == DisputeStatus.EscalatedToPayPal)
                                {
                                    <MudButton Size="Size.Small" 
                                               Variant="Variant.Text" 
                                               Color="Color.Secondary"
                                               StartIcon="@Icons.Material.Filled.Sync"
                                               OnClick="@(() => SyncWithPayPal(context.Id))">
                                        Sync PayPal
                                    </MudButton>
                                }
                                <MudButton Size="Size.Small" 
                                           Variant="Variant.Text" 
                                           Color="Color.Info"
                                           StartIcon="@Icons.Material.Filled.Message"
                                           OnClick="@(() => AddAdminNote(context.Id))">
                                    Note
                                </MudButton>
                            </div>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                
                <!-- Pagination -->
                @if (totalPages > 1)
                {
                    <div class="d-flex justify-center mt-4">
                        <MudPagination Count="@totalPages" 
                                       Selected="@currentPage" 
                                       SelectedChanged="@((page) => OnPageChanged(page))" />
                        </div>
                    }
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info">
                            <MudText>No disputes found with the current filters.</MudText>
                        </MudAlert>
                    }
                </div>
            </MudTabPanel>

            <!-- Mutual Closures Tab -->
            <MudTabPanel Text="Mutual Closures" Icon="@Icons.Material.Filled.Handshake">
                <div class="pa-4">
                    <div class="d-flex justify-space-between align-center mb-4">
                        <MudText Typo="Typo.h6">Mutual Closure Requests (@(filteredMutualClosures?.Count ?? 0))</MudText>
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Secondary" 
                                   StartIcon="@Icons.Material.Filled.Refresh"
                                   OnClick="LoadMutualClosures">
                            Refresh
                        </MudButton>
                    </div>

                    <!-- Mutual Closures Quick Stats -->
                    <MudGrid Class="mb-4">
                        <MudItem xs="12" sm="6" md="3">
                            <MudCard Elevation="1">
                                <MudCardContent>
                                    <div class="d-flex align-center">
                                        <MudIcon Icon="@Icons.Material.Filled.Schedule" Color="Color.Warning" Size="Size.Large" Class="mr-3"/>
                                        <div>
                                            <MudText Typo="Typo.h6">@(mutualClosureStats?.PendingCount ?? 0)</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">Pending</MudText>
                                        </div>
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudCard Elevation="1">
                                <MudCardContent>
                                    <div class="d-flex align-center">
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" Class="mr-3"/>
                                        <div>
                                            <MudText Typo="Typo.h6">@(mutualClosureStats?.AcceptedCount ?? 0)</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">Accepted</MudText>
                                        </div>
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudCard Elevation="1">
                                <MudCardContent>
                                    <div class="d-flex align-center">
                                        <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Large" Class="mr-3"/>
                                        <div>
                                            <MudText Typo="Typo.h6">@(mutualClosureStats?.RejectedCount ?? 0)</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">Rejected</MudText>
                                        </div>
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudCard Elevation="1">
                                <MudCardContent>
                                    <div class="d-flex align-center">
                                        <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Color="Color.Info" Size="Size.Large" Class="mr-3"/>
                                        <div>
                                            <MudText Typo="Typo.h6">@((mutualClosureStats?.TotalRefundAmount ?? 0).ToString("C"))</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">Total Refunds</MudText>
                                        </div>
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>

                    <!-- Mutual Closures Filters -->
                    <MudGrid Class="mb-4">
                        <MudItem xs="12" sm="4">
                            <MudTextField @bind-Value="mutualClosuresSearchTerm"
                                        Label="Search"
                                        Placeholder="Search by dispute title, users..."
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Filled.Search"
                                        Immediate="true"
                                        DebounceInterval="300"
                                        OnDebounceIntervalElapsed="ApplyMutualClosuresFilters" />
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudSelect T="MutualClosureStatus?" @bind-Value="mutualClosuresStatusFilter" Label="Status Filter" Variant="Variant.Outlined">
                                <MudSelectItem T="MutualClosureStatus?" Value="@((MutualClosureStatus?)null)">All Statuses</MudSelectItem>
                                <MudSelectItem T="MutualClosureStatus?" Value="@MutualClosureStatus.Pending">Pending</MudSelectItem>
                                <MudSelectItem T="MutualClosureStatus?" Value="@MutualClosureStatus.Accepted">Accepted</MudSelectItem>
                                <MudSelectItem T="MutualClosureStatus?" Value="@MutualClosureStatus.Rejected">Rejected</MudSelectItem>
                                <MudSelectItem T="MutualClosureStatus?" Value="@MutualClosureStatus.UnderAdminReview">Under Review</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudSelect T="string?" @bind-Value="mutualClosuresPriorityFilter" Label="Priority Filter" Variant="Variant.Outlined">
                                <MudSelectItem T="string?" Value="@((string?)null)">All Priorities</MudSelectItem>
                                <MudSelectItem T="string?" Value="@("high-value")">High Value (>$100)</MudSelectItem>
                                <MudSelectItem T="string?" Value="@("expiring-soon")">Expiring Soon</MudSelectItem>
                                <MudSelectItem T="string?" Value="@("admin-review")">Needs Review</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="2">
                            <MudButton Color="Color.Secondary" 
                                     StartIcon="@Icons.Material.Filled.Clear"
                                     OnClick="ClearMutualClosuresFilters"
                                     FullWidth="true">
                                Clear
                            </MudButton>
                        </MudItem>
                    </MudGrid>

                    <!-- Mutual Closures Table -->
                    @if (isLoadingMutualClosures)
                    {
                        <div class="d-flex justify-center pa-4">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        </div>
                    }
                    else if (filteredMutualClosures?.Any() == true)
                    {
                        <MudDataGrid T="MutualClosureSummaryDto"
                                   Items="@filteredMutualClosures"
                                   Loading="@isLoadingMutualClosures"
                                   Filterable="false"
                                   SortMode="SortMode.Multiple"
                                   Groupable="false"
                                   Elevation="1"
                                   RowsPerPage="25">
                            <Columns>
                                <PropertyColumn Property="x => x.DisputeTitle" Title="Dispute" Sortable="true">
                                    <CellTemplate>
                                        <div>
                                            <MudText Typo="Typo.body2" Class="font-weight-medium">@context.Item.DisputeTitle</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                ID: @context.Item.Id.ToString().Substring(0, 8)
                                            </MudText>
                                        </div>
                                    </CellTemplate>
                                </PropertyColumn>

                                <PropertyColumn Property="x => x.Status" Title="Status" Sortable="true">
                                    <CellTemplate>
                                        <MudChip T="string" Color="@GetMutualClosureStatusColor(context.Item.Status)" 
                                               Size="Size.Small"
                                               Icon="@GetMutualClosureStatusIcon(context.Item.Status)">
                                            @GetMutualClosureStatusText(context.Item.Status)
                                        </MudChip>
                                    </CellTemplate>
                                </PropertyColumn>

                                <PropertyColumn Property="x => x.InitiatedByUserName" Title="Initiated By" Sortable="true">
                                    <CellTemplate>
                                        <MudText Typo="Typo.body2">@context.Item.InitiatedByUserName</MudText>
                                    </CellTemplate>
                                </PropertyColumn>

                                <PropertyColumn Property="x => x.ResponseRequiredFromUserName" Title="Response From" Sortable="true">
                                    <CellTemplate>
                                        <MudText Typo="Typo.body2">@context.Item.ResponseRequiredFromUserName</MudText>
                                    </CellTemplate>
                                </PropertyColumn>

                                <PropertyColumn Property="x => x.AgreedRefundAmount" Title="Refund Amount" Sortable="true">
                                    <CellTemplate>
                                        @if (context.Item.AgreedRefundAmount.HasValue && context.Item.AgreedRefundAmount.Value > 0)
                                        {
                                            <MudChip T="string" Color="@(context.Item.AgreedRefundAmount.Value > 100 ? Color.Warning : Color.Success)" 
                                                   Size="Size.Small"
                                                   Icon="@Icons.Material.Filled.AttachMoney">
                                                @context.Item.AgreedRefundAmount.Value.ToString("C")
                                            </MudChip>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">No refund</MudText>
                                        }
                                    </CellTemplate>
                                </PropertyColumn>

                                <PropertyColumn Property="x => x.CreatedAt" Title="Created" Sortable="true">
                                    <CellTemplate>
                                        <div>
                                            <MudText Typo="Typo.body2">@context.Item.CreatedAt.ToString("MMM dd, yyyy")</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                @context.Item.CreatedAt.ToString("h:mm tt")
                                            </MudText>
                                        </div>
                                    </CellTemplate>
                                </PropertyColumn>

                                <TemplateColumn Title="Actions" Sortable="false">
                                    <CellTemplate>
                                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                                            <MudMenuItem Icon="@Icons.Material.Filled.Visibility" 
                                                       OnClick="() => ViewMutualClosureDetails(context.Item.Id)">
                                                View Details
                                            </MudMenuItem>
                                            <MudMenuItem Icon="@Icons.Material.Filled.OpenInNew" 
                                                       OnClick="() => ViewRelatedDispute(context.Item.DisputeId)">
                                                View Dispute
                                            </MudMenuItem>
                                            @if (context.Item.Status == MutualClosureStatus.Pending)
                                            {
                                                <MudDivider />
                                                <MudMenuItem Icon="@Icons.Material.Filled.AdminPanelSettings" 
                                                           OnClick="() => ForceAdminReview(context.Item.Id)">
                                                    Force Admin Review
                                                </MudMenuItem>
                                                <MudMenuItem Icon="@Icons.Material.Filled.Block" 
                                                           OnClick="() => CancelMutualClosure(context.Item.Id)">
                                                    Cancel Request
                                                </MudMenuItem>
                                            }
                                            @if (context.Item.Status == MutualClosureStatus.UnderAdminReview)
                                            {
                                                <MudDivider />
                                                <MudMenuItem Icon="@Icons.Material.Filled.CheckCircle" 
                                                           OnClick="() => ApproveMutualClosure(context.Item.Id)">
                                                    Approve Resolution
                                                </MudMenuItem>
                                                <MudMenuItem Icon="@Icons.Material.Filled.Cancel" 
                                                           OnClick="() => RejectMutualClosure(context.Item.Id)">
                                                    Reject Resolution
                                                </MudMenuItem>
                                            }
                                        </MudMenu>
                                    </CellTemplate>
                                </TemplateColumn>
                            </Columns>
                            
                            <PagerContent>
                                <MudDataGridPager T="MutualClosureSummaryDto" />
                            </PagerContent>
                        </MudDataGrid>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info">
                            <MudText>No mutual closure requests found with the current filters.</MudText>
                        </MudAlert>
                    }
                </div>
            </MudTabPanel>
        </MudTabs>
    }
</MudContainer>

@code {
    [Inject] private HttpClient HttpClient { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private MutualClosureService MutualClosureService { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;

    private bool isLoading = true;
    private string? loadError = null;
    private List<Dispute>? disputes = null;
    private int activeTab = 0;
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 1;
    private int totalCount = 0;
    
    // Filters
    private DisputeStatus? selectedStatus = null;
    private DisputeType? selectedType = null;
    private DateRange? dateRange = null;
    
    // Stats
    private int openDisputes = 0;
    private int underReviewDisputes = 0;
    private int escalatedDisputes = 0;
    private int resolvedThisMonth = 0;

    // Mutual Closures
    private List<MutualClosureSummaryDto> allMutualClosures = new();
    private List<MutualClosureSummaryDto> filteredMutualClosures = new();
    private MutualClosureStatistics? mutualClosureStats = null;
    private bool isLoadingMutualClosures = false;
    private int? mutualClosuresCount = null;
    
    // Mutual Closures Filters
    private string mutualClosuresSearchTerm = string.Empty;
    private MutualClosureStatus? mutualClosuresStatusFilter = null;
    private string? mutualClosuresPriorityFilter = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadDisputes();
        await LoadStats();
        await LoadMutualClosures();
    }

    private async Task LoadDisputes()
    {
        try
        {
            isLoading = true;
            loadError = null;

            var queryParams = new List<string>();
            queryParams.Add($"page={currentPage}");
            queryParams.Add($"pageSize={pageSize}");
            
            if (selectedStatus.HasValue)
                queryParams.Add($"status={selectedStatus}");
            if (selectedType.HasValue)
                queryParams.Add($"type={selectedType}");

            var queryString = string.Join("&", queryParams);
            var response = await HttpClient.GetAsync($"api/admin/disputes?{queryString}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<DisputeApiResponse>();
                if (result?.Success == true && result.Data != null)
                {
                    disputes = result.Data;
                    totalCount = result.TotalCount;
                    totalPages = (int)Math.Ceiling(totalCount / (double)pageSize);
                }
            }
            else
            {
                loadError = "Failed to load disputes";
            }
        }
        catch (Exception ex)
        {
            loadError = $"Error loading disputes: {ex.Message}";
            Snackbar.Add(loadError, Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadStats()
    {
        try
        {
            var response = await HttpClient.GetAsync("api/admin/dashboard/overview");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse<AdminDashboardOverview>>();
                if (result?.Success == true && result.Data != null)
                {
                    openDisputes = result.Data.Disputes.Open;
                    underReviewDisputes = result.Data.Disputes.InReview;
                    escalatedDisputes = result.Data.Disputes.Escalated;
                    resolvedThisMonth = result.Data.Disputes.ResolvedThisMonth;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading stats: {ex.Message}");
        }
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadDisputes();
    }

    private async Task LoadDisputesByStatus(DisputeStatus status)
    {
        selectedStatus = status;
        currentPage = 1;
        await LoadDisputes();
    }

    private async Task StartReview(string disputeId)
    {
        try
        {
            var response = await HttpClient.PostAsync($"api/admin/disputes/{disputeId}/start-review", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Dispute review started", Severity.Success);
                await LoadDisputes();
                await LoadStats();
            }
            else
            {
                Snackbar.Add("Failed to start dispute review", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task EscalateDispute(string disputeId)
    {
        try
        {
            var response = await HttpClient.PostAsync($"api/admin/disputes/{disputeId}/escalate", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Dispute escalated to PayPal", Severity.Success);
                await LoadDisputes();
                await LoadStats();
            }
            else
            {
                Snackbar.Add("Failed to escalate dispute", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task ResolveDispute(string disputeId)
    {
        try
        {
            var response = await HttpClient.PostAsync($"api/admin/disputes/{disputeId}/resolve", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Dispute resolved successfully", Severity.Success);
                await LoadDisputes();
                await LoadStats();
            }
            else
            {
                Snackbar.Add("Failed to resolve dispute", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task SyncWithPayPal(string disputeId)
    {
        try
        {
            var response = await HttpClient.PostAsync($"api/admin/disputes/{disputeId}/sync-paypal", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("PayPal sync completed", Severity.Success);
                await LoadDisputes();
            }
            else
            {
                Snackbar.Add("Failed to sync with PayPal", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task AddAdminNote(string disputeId)
    {
        // This would open a dialog for adding admin notes
        Navigation.NavigateTo($"/disputes/{disputeId}");
    }

    private void ViewDisputeDetails(string disputeId)
    {
        Navigation.NavigateTo($"/disputes/{disputeId}");
    }

    private async Task ExportDisputes()
    {
        try
        {
            Snackbar.Add("Export functionality coming soon", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Export failed: {ex.Message}", Severity.Error);
        }
    }

    private Color GetTypeColor(DisputeType type)
    {
        return type switch
        {
            DisputeType.PaymentDispute => Color.Error,
            DisputeType.ServiceDispute => Color.Warning,
            DisputeType.Damage => Color.Error,
            DisputeType.NoShow => Color.Warning,
            DisputeType.Chargeback => Color.Error,
            DisputeType.Refund => Color.Info,
            DisputeType.Other => Color.Secondary,
            _ => Color.Default
        };
    }

    private Color GetStatusColor(DisputeStatus status)
    {
        return status switch
        {
            DisputeStatus.Open => Color.Warning,
            DisputeStatus.InProgress => Color.Info,
            DisputeStatus.EscalatedToPayPal => Color.Error,
            DisputeStatus.Resolved => Color.Success,
            DisputeStatus.Closed => Color.Secondary,
            DisputeStatus.Cancelled => Color.Secondary,
            _ => Color.Default
        };
    }

    // Mutual Closures Methods
    private async Task LoadMutualClosures()
    {
        try
        {
            isLoadingMutualClosures = true;
            
            var result = await MutualClosureService.GetAllMutualClosuresAsync();
            if (result?.Success == true && result.Data != null)
            {
                allMutualClosures = result.Data.ToList();
                CalculateMutualClosureStatistics();
                ApplyMutualClosuresFilters();
                mutualClosuresCount = allMutualClosures.Count;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load mutual closure data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingMutualClosures = false;
            StateHasChanged();
        }
    }

    private void CalculateMutualClosureStatistics()
    {
        mutualClosureStats = new MutualClosureStatistics
        {
            PendingCount = allMutualClosures.Count(mc => mc.Status == MutualClosureStatus.Pending),
            AcceptedCount = allMutualClosures.Count(mc => mc.Status == MutualClosureStatus.Accepted),
            RejectedCount = allMutualClosures.Count(mc => mc.Status == MutualClosureStatus.Rejected),
            TotalRefundAmount = allMutualClosures
                .Where(mc => mc.AgreedRefundAmount.HasValue && mc.Status == MutualClosureStatus.Accepted)
                .Sum(mc => mc.AgreedRefundAmount ?? 0)
        };
    }

    private void ApplyMutualClosuresFilters()
    {
        var filtered = allMutualClosures.AsEnumerable();

        // Search filter
        if (!string.IsNullOrWhiteSpace(mutualClosuresSearchTerm))
        {
            filtered = filtered.Where(mc =>
                mc.DisputeTitle.Contains(mutualClosuresSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                mc.InitiatedByUserName.Contains(mutualClosuresSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                mc.ResponseRequiredFromUserName.Contains(mutualClosuresSearchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Status filter
        if (mutualClosuresStatusFilter.HasValue)
        {
            filtered = filtered.Where(mc => mc.Status == mutualClosuresStatusFilter.Value);
        }

        // Priority filter
        if (!string.IsNullOrEmpty(mutualClosuresPriorityFilter))
        {
            filtered = mutualClosuresPriorityFilter switch
            {
                "high-value" => filtered.Where(mc => mc.AgreedRefundAmount.HasValue && mc.AgreedRefundAmount.Value > 100),
                "expiring-soon" => filtered.Where(mc => mc.Status == MutualClosureStatus.Pending && mc.HoursUntilExpiry <= 24),
                "admin-review" => filtered.Where(mc => mc.Status == MutualClosureStatus.UnderAdminReview),
                _ => filtered
            };
        }

        filteredMutualClosures = filtered.OrderByDescending(mc => mc.CreatedAt).ToList();
        StateHasChanged();
    }

    private void ClearMutualClosuresFilters()
    {
        mutualClosuresSearchTerm = string.Empty;
        mutualClosuresStatusFilter = null;
        mutualClosuresPriorityFilter = null;
        ApplyMutualClosuresFilters();
    }

    private async Task ViewMutualClosureDetails(Guid mutualClosureId)
    {
        var parameters = new DialogParameters { { "MutualClosureId", mutualClosureId } };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
        
        // Since we don't have AdminMutualClosureDetailsDialog in this context, we'll navigate instead
        Snackbar.Add($"Navigate to mutual closure details: {mutualClosureId.ToString().Substring(0, 8)}", Severity.Info);
    }

    private void ViewRelatedDispute(Guid disputeId)
    {
        Navigation.NavigateTo($"/disputes/{disputeId}");
    }

    private async Task ForceAdminReview(Guid mutualClosureId)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Force Admin Review",
            "This will mark the mutual closure request as requiring admin review. Continue?",
            yesText: "Force Review",
            cancelText: "Cancel");

        if (confirmed == true)
        {
            Snackbar.Add("Mutual closure marked for admin review", Severity.Info);
            await LoadMutualClosures();
        }
    }

    private async Task CancelMutualClosure(Guid mutualClosureId)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Cancel Mutual Closure",
            "This will permanently cancel the mutual closure request. This action cannot be undone. Continue?",
            yesText: "Cancel Request",
            cancelText: "Keep Request");

        if (confirmed == true)
        {
            var result = await MutualClosureService.CancelMutualClosureAsync(mutualClosureId, "Cancelled by administrator");
            
            if (result?.Success == true)
            {
                Snackbar.Add("Mutual closure request cancelled successfully", Severity.Success);
                await LoadMutualClosures();
            }
            else
            {
                Snackbar.Add("Failed to cancel mutual closure request", Severity.Error);
            }
        }
    }

    private async Task ApproveMutualClosure(Guid mutualClosureId)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Approve Mutual Closure",
            "This will approve and finalize the mutual closure request. Any refunds will be processed. Continue?",
            yesText: "Approve",
            cancelText: "Cancel");

        if (confirmed == true)
        {
            Snackbar.Add("Mutual closure approved and processed", Severity.Success);
            await LoadMutualClosures();
        }
    }

    private async Task RejectMutualClosure(Guid mutualClosureId)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Reject Mutual Closure",
            "This will reject the mutual closure request and return the dispute to normal resolution. Continue?",
            yesText: "Reject",
            cancelText: "Cancel");

        if (confirmed == true)
        {
            Snackbar.Add("Mutual closure rejected - dispute continues normally", Severity.Info);
            await LoadMutualClosures();
        }
    }

    // Helper methods for Mutual Closures UI
    private Color GetMutualClosureStatusColor(MutualClosureStatus status) => status switch
    {
        MutualClosureStatus.Pending => Color.Warning,
        MutualClosureStatus.Accepted => Color.Success,
        MutualClosureStatus.Rejected => Color.Error,
        MutualClosureStatus.Expired => Color.Warning,
        MutualClosureStatus.Cancelled => Color.Secondary,
        MutualClosureStatus.UnderAdminReview => Color.Info,
        _ => Color.Default
    };

    private string GetMutualClosureStatusIcon(MutualClosureStatus status) => status switch
    {
        MutualClosureStatus.Pending => Icons.Material.Filled.Schedule,
        MutualClosureStatus.Accepted => Icons.Material.Filled.CheckCircle,
        MutualClosureStatus.Rejected => Icons.Material.Filled.Cancel,
        MutualClosureStatus.Expired => Icons.Material.Filled.Schedule,
        MutualClosureStatus.Cancelled => Icons.Material.Filled.Block,
        MutualClosureStatus.UnderAdminReview => Icons.Material.Filled.AdminPanelSettings,
        _ => Icons.Material.Filled.HelpOutline
    };

    private string GetMutualClosureStatusText(MutualClosureStatus status) => status switch
    {
        MutualClosureStatus.Pending => "Pending Response",
        MutualClosureStatus.Accepted => "Accepted",
        MutualClosureStatus.Rejected => "Rejected",
        MutualClosureStatus.Expired => "Expired",
        MutualClosureStatus.Cancelled => "Cancelled",
        MutualClosureStatus.UnderAdminReview => "Under Review",
        _ => "Unknown"
    };
}