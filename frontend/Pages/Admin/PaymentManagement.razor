@page "/admin/payments"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Payment Management - NeighborTools Admin</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-6">
    <div class="d-flex align-center mb-4">
        <MudIcon Icon="@Icons.Material.Filled.Payment" Color="Color.Success" Size="Size.Large" Class="mr-3" />
        <MudText Typo="Typo.h3">Payment Management</MudText>
    </div>
    
    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (loadError != null)
    {
        <MudAlert Severity="Severity.Error">@loadError</MudAlert>
    }
    else
    {
        <!-- Quick Stats -->
        <MudGrid Class="mb-6">
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Failed Payments</MudText>
                                <MudText Typo="Typo.h4">@failedPayments</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Error">Requires investigation</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Reviews" Color="Color.Warning" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Under Review</MudText>
                                <MudText Typo="Typo.h4">@paymentsUnderReview</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Warning">Needs approval</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.PendingActions" Color="Color.Info" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Pending Payouts</MudText>
                                <MudText Typo="Typo.h4">$@pendingPayouts.ToString("N0")</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Info">Ready for processing</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Color="Color.Success" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Revenue Today</MudText>
                                <MudText Typo="Typo.h4">$@revenueToday.ToString("N2")</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Success">Total processed</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Filters -->
        <MudPaper Class="pa-4 mb-4">
            <MudText Typo="Typo.h6" Class="mb-3">Filter Payments</MudText>
            <MudGrid>
                <MudItem xs="12" sm="6" md="3">
                    <MudSelect T="PaymentStatus?" @bind-Value="selectedStatus" Label="Status" Clearable="true">
                        <MudSelectItem T="PaymentStatus?" Value="@PaymentStatus.Pending">Pending</MudSelectItem>
                        <MudSelectItem T="PaymentStatus?" Value="@PaymentStatus.Processing">Processing</MudSelectItem>
                        <MudSelectItem T="PaymentStatus?" Value="@PaymentStatus.Completed">Completed</MudSelectItem>
                        <MudSelectItem T="PaymentStatus?" Value="@PaymentStatus.Failed">Failed</MudSelectItem>
                        <MudSelectItem T="PaymentStatus?" Value="@PaymentStatus.UnderReview">Under Review</MudSelectItem>
                        <MudSelectItem T="PaymentStatus?" Value="@PaymentStatus.Refunded">Refunded</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudSelect T="PaymentProvider?" @bind-Value="selectedProvider" Label="Provider" Clearable="true">
                        <MudSelectItem T="PaymentProvider?" Value="@PaymentProvider.PayPal">PayPal</MudSelectItem>
                        <MudSelectItem T="PaymentProvider?" Value="@PaymentProvider.Stripe">Stripe</MudSelectItem>
                        <MudSelectItem T="PaymentProvider?" Value="@PaymentProvider.Platform">Platform</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudDateRangePicker @bind-DateRange="dateRange" Label="Date Range" />
                </MudItem>
                <MudItem xs="12" sm="6" md="3" Class="d-flex align-end">
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.Search"
                               OnClick="LoadPayments"
                               FullWidth="true">
                        Apply Filters
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>

        <!-- Quick Actions -->
        <MudPaper Class="pa-4 mb-4">
            <MudText Typo="Typo.h6" Class="mb-3">Quick Actions</MudText>
            <div class="d-flex flex-wrap gap-2">
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Error" 
                           StartIcon="@Icons.Material.Filled.Error"
                           OnClick="@(() => LoadPaymentsByStatus(PaymentStatus.Failed))">
                    View Failed Payments (@failedPayments)
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Warning" 
                           StartIcon="@Icons.Material.Filled.Reviews"
                           OnClick="@(() => LoadPaymentsByStatus(PaymentStatus.UnderReview))">
                    Review Pending (@paymentsUnderReview)
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Info" 
                           StartIcon="@Icons.Material.Filled.AccountBalance"
                           OnClick="LoadPendingPayouts">
                    Process Payouts ($@pendingPayouts.ToString("N0"))
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Success" 
                           StartIcon="@Icons.Material.Filled.FileDownload"
                           OnClick="ExportPayments">
                    Export Report
                </MudButton>
            </div>
        </MudPaper>

        <!-- Payments Table -->
        <MudPaper Class="pa-4">
            <div class="d-flex justify-space-between align-center mb-4">
                <MudText Typo="Typo.h6">Payments (@totalCount)</MudText>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Secondary" 
                           StartIcon="@Icons.Material.Filled.Refresh"
                           OnClick="LoadPayments">
                    Refresh
                </MudButton>
            </div>
            
            @if (payments?.Any() == true)
            {
                <MudTable T="AdminPaymentDto" Items="@payments" Hover="true" Dense="true" FixedHeader="true" Height="600px">
                    <HeaderContent>
                        <MudTh>Payment ID</MudTh>
                        <MudTh>User/Rental</MudTh>
                        <MudTh>Amount</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Provider</MudTh>
                        <MudTh>Created</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Payment ID">
                            <div>
                                <MudText Typo="Typo.body2">@context.Id.Substring(0, 8)...</MudText>
                                @if (!string.IsNullOrEmpty(context.PayPalOrderId))
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">PayPal: @context.PayPalOrderId.Substring(0, 8)...</MudText>
                                }
                            </div>
                        </MudTd>
                        <MudTd DataLabel="User/Rental">
                            <div>
                                <MudText Typo="Typo.body2">@context.RenterName</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">Tool: @context.ToolName</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">Rental: @context.RentalId.ToString().Substring(0, 8)...</MudText>
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Amount">
                            <MudText Typo="Typo.body2" Style="font-weight: 500;">$@context.Amount.ToString("N2")</MudText>
                        </MudTd>
                        <MudTd DataLabel="Status">
                            <MudChip T="string" Color="@GetStatusColor(context.Status)" Size="Size.Small">
                                @context.Status.ToString()
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Provider">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@GetProviderIcon(context.Provider)" Size="Size.Small" Class="mr-1" />
                                <MudText Typo="Typo.body2">@context.Provider.ToString()</MudText>
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Created">
                            <div>
                                <MudText Typo="Typo.body2">@context.CreatedAt.ToString("MMM dd, yyyy")</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@context.CreatedAt.ToString("HH:mm")</MudText>
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <div class="d-flex gap-1">
                                <MudButton Size="Size.Small" 
                                           Variant="Variant.Text" 
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Visibility"
                                           OnClick="@(() => ViewPaymentDetails(context.Id))">
                                    View
                                </MudButton>
                                @if (context.Status == PaymentStatus.UnderReview)
                                {
                                    <MudButton Size="Size.Small" 
                                               Variant="Variant.Text" 
                                               Color="Color.Success"
                                               StartIcon="@Icons.Material.Filled.CheckCircle"
                                               OnClick="@(() => ApprovePayment(context.Id))">
                                        Approve
                                    </MudButton>
                                    <MudButton Size="Size.Small" 
                                               Variant="Variant.Text" 
                                               Color="Color.Error"
                                               StartIcon="@Icons.Material.Filled.Cancel"
                                               OnClick="@(() => RejectPayment(context.Id))">
                                        Reject
                                    </MudButton>
                                }
                                @if (context.Status == PaymentStatus.Failed)
                                {
                                    <MudButton Size="Size.Small" 
                                               Variant="Variant.Text" 
                                               Color="Color.Warning"
                                               StartIcon="@Icons.Material.Filled.Refresh"
                                               OnClick="@(() => RetryPayment(context.Id))">
                                        Retry
                                    </MudButton>
                                }
                                @if (context.Status == PaymentStatus.Completed && !context.IsRefunded)
                                {
                                    <MudButton Size="Size.Small" 
                                               Variant="Variant.Text" 
                                               Color="Color.Warning"
                                               StartIcon="@Icons.Material.Filled.Undo"
                                               OnClick="@(() => RefundPayment(context.Id))">
                                        Refund
                                    </MudButton>
                                }
                            </div>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                
                <!-- Pagination -->
                @if (totalPages > 1)
                {
                    <div class="d-flex justify-center mt-4">
                        <MudPagination Count="@totalPages" 
                                       Selected="@currentPage" 
                                       SelectedChanged="@((page) => OnPageChanged(page))" />
                    </div>
                }
            }
            else
            {
                <MudAlert Severity="Severity.Info">
                    <MudText>No payments found with the current filters.</MudText>
                </MudAlert>
            }
        </MudPaper>
    }
</MudContainer>

@code {
    [Inject] private HttpClient HttpClient { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private bool isLoading = true;
    private string? loadError = null;
    private List<AdminPaymentDto>? payments = null;
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 1;
    private int totalCount = 0;
    
    // Filters
    private PaymentStatus? selectedStatus = null;
    private PaymentProvider? selectedProvider = null;
    private DateRange? dateRange = null;
    
    // Stats
    private int failedPayments = 0;
    private int paymentsUnderReview = 0;
    private decimal pendingPayouts = 0;
    private decimal revenueToday = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadPayments();
        await LoadStats();
    }

    private async Task LoadPayments()
    {
        try
        {
            isLoading = true;
            loadError = null;

            var queryParams = new List<string>();
            queryParams.Add($"page={currentPage}");
            queryParams.Add($"pageSize={pageSize}");
            
            if (selectedStatus.HasValue)
                queryParams.Add($"status={selectedStatus}");
            if (selectedProvider.HasValue)
                queryParams.Add($"provider={selectedProvider}");

            var queryString = string.Join("&", queryParams);
            var response = await HttpClient.GetAsync($"api/admin/payments/review?{queryString}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse<PaginatedResult<AdminPaymentDto>>>();
                if (result?.Success == true && result.Data != null)
                {
                    payments = result.Data.Items;
                    totalCount = result.Data.TotalCount;
                    totalPages = result.Data.TotalPages;
                    currentPage = result.Data.Page;
                }
            }
            else
            {
                loadError = "Failed to load payments";
            }
        }
        catch (Exception ex)
        {
            loadError = $"Error loading payments: {ex.Message}";
            Snackbar.Add(loadError, Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadStats()
    {
        try
        {
            var response = await HttpClient.GetAsync("api/admin/system/health");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse<SystemHealthDto>>();
                if (result?.Success == true && result.Data != null)
                {
                    failedPayments = result.Data.PaymentSystem.FailedPayments;
                    paymentsUnderReview = result.Data.PaymentSystem.PaymentsUnderReview;
                }
            }

            // Load financial summary for additional stats
            var financialResponse = await HttpClient.GetAsync("api/admin/financial/summary");
            if (financialResponse.IsSuccessStatusCode)
            {
                var financialResult = await financialResponse.Content.ReadFromJsonAsync<ApiResponse<FinancialSummary>>();
                if (financialResult?.Success == true && financialResult.Data != null)
                {
                    pendingPayouts = financialResult.Data.Payouts.PendingPayouts;
                    revenueToday = financialResult.Data.Revenue.TotalRevenue;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading stats: {ex.Message}");
        }
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadPayments();
    }

    private async Task LoadPaymentsByStatus(PaymentStatus status)
    {
        selectedStatus = status;
        currentPage = 1;
        await LoadPayments();
    }

    private async Task LoadPendingPayouts()
    {
        // Filter for completed payments that need payouts
        selectedStatus = PaymentStatus.Completed;
        currentPage = 1;
        await LoadPayments();
    }

    private async Task ApprovePayment(string paymentId)
    {
        try
        {
            var response = await HttpClient.PostAsync($"api/admin/payments/{paymentId}/approve", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Payment approved successfully", Severity.Success);
                await LoadPayments();
                await LoadStats();
            }
            else
            {
                Snackbar.Add("Failed to approve payment", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task RejectPayment(string paymentId)
    {
        try
        {
            var response = await HttpClient.PostAsync($"api/admin/payments/{paymentId}/reject", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Payment rejected", Severity.Success);
                await LoadPayments();
                await LoadStats();
            }
            else
            {
                Snackbar.Add("Failed to reject payment", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task RetryPayment(string paymentId)
    {
        try
        {
            var response = await HttpClient.PostAsync($"api/admin/payments/{paymentId}/retry", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Payment retry initiated", Severity.Success);
                await LoadPayments();
            }
            else
            {
                Snackbar.Add("Failed to retry payment", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task RefundPayment(string paymentId)
    {
        try
        {
            var response = await HttpClient.PostAsync($"api/admin/payments/{paymentId}/refund", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Refund processed successfully", Severity.Success);
                await LoadPayments();
            }
            else
            {
                Snackbar.Add("Failed to process refund", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private void ViewPaymentDetails(string paymentId)
    {
        Navigation.NavigateTo($"/admin/payments/{paymentId}");
    }

    private async Task ExportPayments()
    {
        try
        {
            Snackbar.Add("Export functionality coming soon", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Export failed: {ex.Message}", Severity.Error);
        }
    }

    private Color GetStatusColor(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Pending => Color.Warning,
            PaymentStatus.Processing => Color.Info,
            PaymentStatus.Completed => Color.Success,
            PaymentStatus.Failed => Color.Error,
            PaymentStatus.UnderReview => Color.Warning,
            PaymentStatus.Refunded => Color.Secondary,
            PaymentStatus.Cancelled => Color.Secondary,
            _ => Color.Default
        };
    }

    private string GetProviderIcon(PaymentProvider provider)
    {
        return provider switch
        {
            PaymentProvider.PayPal => Icons.Material.Filled.AccountBalance,
            PaymentProvider.Stripe => Icons.Material.Filled.CreditCard,
            PaymentProvider.Platform => Icons.Material.Filled.AccountBalanceWallet,
            _ => Icons.Material.Filled.Payment
        };
    }

}