@page "/admin/fraud"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Fraud Management - NeighborTools Admin</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-6">
    <div class="d-flex align-center mb-4">
        <MudIcon Icon="@Icons.Material.Filled.Security" Color="Color.Warning" Size="Size.Large" Class="mr-3" />
        <MudText Typo="Typo.h3">Fraud Management Center</MudText>
    </div>
    
    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (loadError != null)
    {
        <MudAlert Severity="Severity.Error">@loadError</MudAlert>
    }
    else
    {
        <!-- Quick Stats -->
        <MudGrid Class="mb-6">
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">High Risk Alerts</MudText>
                                <MudText Typo="Typo.h4">@GetHighRiskCount()</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Error">Requires immediate action</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Reviews" Color="Color.Warning" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Pending Review</MudText>
                                <MudText Typo="Typo.h4">@GetPendingReviewCount()</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Warning">Manual review needed</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Block" Color="Color.Error" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Blocked Users</MudText>
                                <MudText Typo="Typo.h4">@blockedUsers</MudText>
                                <MudText Typo="Typo.caption">Suspicious activity detected</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Resolved Today</MudText>
                                <MudText Typo="Typo.h4">@resolvedToday</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Success">Cases processed</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Filters -->
        <MudPaper Class="pa-4 mb-4">
            <MudText Typo="Typo.h6" Class="mb-3">Filter Fraud Alerts</MudText>
            <MudGrid>
                <MudItem xs="12" sm="6" md="3">
                    <MudSelect T="FraudRiskLevel?" @bind-Value="selectedRiskLevel" Label="Risk Level" Clearable="true">
                        <MudSelectItem T="FraudRiskLevel?" Value="@FraudRiskLevel.Critical">Critical</MudSelectItem>
                        <MudSelectItem T="FraudRiskLevel?" Value="@FraudRiskLevel.High">High</MudSelectItem>
                        <MudSelectItem T="FraudRiskLevel?" Value="@FraudRiskLevel.Medium">Medium</MudSelectItem>
                        <MudSelectItem T="FraudRiskLevel?" Value="@FraudRiskLevel.Low">Low</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudSelect T="FraudAlertStatus?" @bind-Value="selectedStatus" Label="Status" Clearable="true">
                        <MudSelectItem T="FraudAlertStatus?" Value="@FraudAlertStatus.New">New</MudSelectItem>
                        <MudSelectItem T="FraudAlertStatus?" Value="@FraudAlertStatus.UnderReview">Under Review</MudSelectItem>
                        <MudSelectItem T="FraudAlertStatus?" Value="@FraudAlertStatus.Investigated">Investigated</MudSelectItem>
                        <MudSelectItem T="FraudAlertStatus?" Value="@FraudAlertStatus.Resolved">Resolved</MudSelectItem>
                        <MudSelectItem T="FraudAlertStatus?" Value="@FraudAlertStatus.Dismissed">Dismissed</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudSelect T="FraudAlertType?" @bind-Value="selectedType" Label="Alert Type" Clearable="true">
                        <MudSelectItem T="FraudAlertType?" Value="@FraudAlertType.VelocityLimit">Velocity Limit</MudSelectItem>
                        <MudSelectItem T="FraudAlertType?" Value="@FraudAlertType.SuspiciousPayment">Suspicious Payment</MudSelectItem>
                        <MudSelectItem T="FraudAlertType?" Value="@FraudAlertType.ChargebackRisk">Chargeback Risk</MudSelectItem>
                        <MudSelectItem T="FraudAlertType?" Value="@FraudAlertType.AccountTakeover">Account Takeover</MudSelectItem>
                        <MudSelectItem T="FraudAlertType?" Value="@FraudAlertType.MoneyLaundering">Money Laundering</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="3" Class="d-flex align-end">
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.Search"
                               OnClick="LoadFraudAlerts"
                               FullWidth="true">
                        Apply Filters
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>

        <!-- Fraud Alerts Table -->
        <MudPaper Class="pa-4">
            <div class="d-flex justify-space-between align-center mb-4">
                <MudText Typo="Typo.h6">Fraud Alerts</MudText>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Secondary" 
                           StartIcon="@Icons.Material.Filled.Refresh"
                           OnClick="LoadFraudAlerts">
                    Refresh
                </MudButton>
            </div>
            
            @if (fraudAlerts?.Any() == true)
            {
                <MudTable T="FraudAlert" Items="@fraudAlerts" Hover="true" Dense="true" FixedHeader="true" Height="600px">
                    <HeaderContent>
                        <MudTh>Alert ID</MudTh>
                        <MudTh>User</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>Risk Level</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Detected</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Alert ID">
                            <MudText Typo="Typo.body2">@context.Id.Substring(0, 8)...</MudText>
                        </MudTd>
                        <MudTd DataLabel="User">
                            <div>
                                <MudText Typo="Typo.body2">@context.UserName</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@context.UserId.Substring(0, 8)...</MudText>
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Type">
                            <MudChip T="string" Color="@GetTypeColor(context.Type)" Size="Size.Small">
                                @context.Type.ToString()
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Risk Level">
                            <MudChip T="string" Color="@GetRiskLevelColor(context.RiskLevel)" Size="Size.Small">
                                @context.RiskLevel.ToString()
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Status">
                            <MudChip T="string" Color="@GetStatusColor(context.Status)" Size="Size.Small">
                                @context.Status.ToString()
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Detected">
                            <MudText Typo="Typo.body2">@context.DetectedAt.ToString("MMM dd, yyyy")</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">@context.DetectedAt.ToString("HH:mm")</MudText>
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <div class="d-flex gap-2">
                                @if (context.RequiresManualReview && context.Status == FraudAlertStatus.New)
                                {
                                    <MudButton Size="Size.Small" 
                                               Variant="Variant.Filled" 
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.Visibility"
                                               OnClick="@(() => ReviewAlert(context.Id))">
                                        Review
                                    </MudButton>
                                }
                                @if (context.Status == FraudAlertStatus.UnderReview)
                                {
                                    <MudButton Size="Size.Small" 
                                               Variant="Variant.Filled" 
                                               Color="Color.Success"
                                               StartIcon="@Icons.Material.Filled.CheckCircle"
                                               OnClick="@(() => ResolveAlert(context.Id))">
                                        Resolve
                                    </MudButton>
                                    <MudButton Size="Size.Small" 
                                               Variant="Variant.Outlined" 
                                               Color="Color.Secondary"
                                               StartIcon="@Icons.Material.Filled.Cancel"
                                               OnClick="@(() => DismissAlert(context.Id))">
                                        Dismiss
                                    </MudButton>
                                }
                                <MudButton Size="Size.Small" 
                                           Variant="Variant.Text" 
                                           Color="Color.Info"
                                           StartIcon="@Icons.Material.Filled.Info"
                                           OnClick="@(() => ViewDetails(context.Id))">
                                    Details
                                </MudButton>
                            </div>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                
                <!-- Pagination -->
                @if (totalPages > 1)
                {
                    <div class="d-flex justify-center mt-4">
                        <MudPagination Count="@totalPages" 
                                       Selected="@currentPage" 
                                       SelectedChanged="@((page) => OnPageChanged(page))" />
                    </div>
                }
            }
            else
            {
                <MudAlert Severity="Severity.Info">
                    <MudText>No fraud alerts found with the current filters.</MudText>
                </MudAlert>
            }
        </MudPaper>
    }
</MudContainer>

@code {
    [Inject] private HttpClient HttpClient { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private INavigationHelperService NavigationHelper { get; set; } = default!;

    private bool isLoading = true;
    private string? loadError = null;
    private List<FraudAlert>? fraudAlerts = null;
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 1;
    
    // Filters
    private FraudRiskLevel? selectedRiskLevel = null;
    private FraudAlertStatus? selectedStatus = null;
    private FraudAlertType? selectedType = null;
    
    // Stats
    private int blockedUsers = 0;
    private int resolvedToday = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadFraudAlerts();
    }

    private async Task LoadFraudAlerts()
    {
        try
        {
            isLoading = true;
            loadError = null;

            var queryParams = new List<string>();
            queryParams.Add($"page={currentPage}");
            queryParams.Add($"pageSize={pageSize}");
            
            if (selectedRiskLevel.HasValue)
                queryParams.Add($"riskLevel={selectedRiskLevel}");
            if (selectedStatus.HasValue)
                queryParams.Add($"status={selectedStatus}");
            if (selectedType.HasValue)
                queryParams.Add($"type={selectedType}");

            var queryString = string.Join("&", queryParams);
            var response = await HttpClient.GetAsync($"api/admin/fraud/alerts?{queryString}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse<FraudAlertsResponse>>();
                if (result?.Success == true && result.Data != null)
                {
                    fraudAlerts = result.Data.Alerts;
                    totalPages = (int)Math.Ceiling(result.Data.TotalCount / (double)pageSize);
                }
            }
            else
            {
                loadError = "Failed to load fraud alerts";
            }
        }
        catch (Exception ex)
        {
            loadError = $"Error loading fraud alerts: {ex.Message}";
            Snackbar.Add(loadError, Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadFraudAlerts();
    }

    private int GetHighRiskCount()
    {
        return fraudAlerts?.Count(f => f.RiskLevel == FraudRiskLevel.High || f.RiskLevel == FraudRiskLevel.Critical) ?? 0;
    }

    private int GetPendingReviewCount()
    {
        return fraudAlerts?.Count(f => f.RequiresManualReview && f.Status == FraudAlertStatus.New) ?? 0;
    }

    private async Task ReviewAlert(string alertId)
    {
        try
        {
            var response = await HttpClient.PostAsync($"api/admin/fraud/alerts/{alertId}/review", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Alert marked for review", Severity.Success);
                await LoadFraudAlerts();
            }
            else
            {
                Snackbar.Add("Failed to mark alert for review", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task ResolveAlert(string alertId)
    {
        try
        {
            var response = await HttpClient.PostAsync($"api/admin/fraud/alerts/{alertId}/resolve", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Alert resolved successfully", Severity.Success);
                await LoadFraudAlerts();
            }
            else
            {
                Snackbar.Add("Failed to resolve alert", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task DismissAlert(string alertId)
    {
        try
        {
            var response = await HttpClient.PostAsync($"api/admin/fraud/alerts/{alertId}/dismiss", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Alert dismissed", Severity.Success);
                await LoadFraudAlerts();
            }
            else
            {
                Snackbar.Add("Failed to dismiss alert", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private void ViewDetails(string alertId)
    {
        NavigationHelper.NavigateToRoute($"/admin/fraud/{alertId}");
    }

    private Color GetTypeColor(FraudAlertType type)
    {
        return type switch
        {
            FraudAlertType.VelocityLimit => Color.Warning,
            FraudAlertType.SuspiciousPayment => Color.Error,
            FraudAlertType.ChargebackRisk => Color.Error,
            FraudAlertType.AccountTakeover => Color.Error,
            FraudAlertType.MoneyLaundering => Color.Error,
            FraudAlertType.SuspiciousActivity => Color.Warning,
            _ => Color.Default
        };
    }

    private Color GetRiskLevelColor(FraudRiskLevel riskLevel)
    {
        return riskLevel switch
        {
            FraudRiskLevel.Critical => Color.Error,
            FraudRiskLevel.High => Color.Error,
            FraudRiskLevel.Medium => Color.Warning,
            FraudRiskLevel.Low => Color.Success,
            _ => Color.Default
        };
    }

    private Color GetStatusColor(FraudAlertStatus status)
    {
        return status switch
        {
            FraudAlertStatus.New => Color.Warning,
            FraudAlertStatus.UnderReview => Color.Info,
            FraudAlertStatus.Investigated => Color.Primary,
            FraudAlertStatus.Resolved => Color.Success,
            FraudAlertStatus.Dismissed => Color.Secondary,
            FraudAlertStatus.Escalated => Color.Error,
            _ => Color.Default
        };
    }
}