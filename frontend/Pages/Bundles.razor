@page "/bundles"
@using ToolsSharing.Frontend.Models
@using ToolsSharing.Frontend.Services
@using frontend.Models
@using frontend.Components.Bundles
@using System.Web
@using frontend.Services
@using frontend.Components.Common
@using frontend.Components.Location
@inject BundleService BundleService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IBreadcrumbService BreadcrumbService
@inject IDeviceDetectionService DeviceDetectionService
@inject IBrowserCacheService BrowserCacheService
@implements IDisposable

<PageTitle>Tool Bundles - NeighborTools</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <!-- Breadcrumb -->
    <BreadcrumbNavigation Items="@breadcrumbItems" />
    <MudPaper Class="pa-6" Elevation="0">
        <MudGrid>
            <!-- Header Section -->
            <MudItem xs="12">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                    <div>
                        <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-2">Tool Bundles</MudText>
                        <MudText Typo="Typo.body1" Color="Color.Secondary">
                            Discover curated tool collections for your projects
                        </MudText>
                    </div>
                    
                    <div class="d-flex align-center gap-2">
                        <MudTextField @bind-Value="searchTerm" 
                                    @onkeypress="HandleKeyPress"
                                    Placeholder="Search bundles..." 
                                    Variant="Variant.Outlined" 
                                    Adornment="Adornment.End"
                                    AdornmentIcon="@Icons.Material.Filled.Search"
                                    OnAdornmentClick="SearchBundles"
                                    Style="min-width: 300px;" />
                        
                        <AuthorizeView>
                            <Authorized>
                                <MudButton Variant="Variant.Filled" 
                                         Color="Color.Primary" 
                                         StartIcon="@Icons.Material.Filled.Add"
                                         Href="/bundles/create">
                                    Create Bundle
                                </MudButton>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </MudStack>
            </MudItem>

            <!-- Filters and Results Section -->
            <MudItem xs="12">
                        <!-- Filters Section -->
                        <MudPaper Class="pa-4 mb-4" Elevation="1">
                            <MudStack Spacing="3">
                                <MudStack Row Spacing="3" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                                    <!-- Category Filter -->
                                    <MudSelect @bind-Value="selectedCategory" 
                                             Label="Category" 
                                             Variant="Variant.Outlined"
                                             AnchorOrigin="Origin.BottomCenter"
                                             @bind-Value:after="ApplyFilters">
                                        <MudSelectItem Value="@("")">All Categories</MudSelectItem>
                                        @foreach (var category in availableCategories)
                                        {
                                            <MudSelectItem Value="@category.Key">@category.Key (@category.Value)</MudSelectItem>
                                        }
                                    </MudSelect>

                                    <!-- Featured Filter -->
                                    <MudSwitch @bind-Value="featuredOnly" Label="Featured Only" Color="Color.Primary" @bind-Value:after="ApplyFilters" />
                                    
                                    <!-- Location Search Section -->
                                    <div style="min-width: 250px;">
                                        <MudText Typo="Typo.body2" Class="mb-2">Location Search</MudText>
                                        <LocationAutocomplete @bind-Value="locationFilter"
                                                             LocationSelectedWithCoordinates="OnLocationSelectedWithCoordinates"
                                                             Label="Search near..."
                                                             Placeholder="Enter city, neighborhood, or address"
                                                             Clearable="true"
                                                             ShowPopular="false"
                                                             MinCharacters="2"
                                                             Dense="true"
                                                             Variant="Variant.Outlined" />
                                        
                                        @if (!string.IsNullOrEmpty(locationFilter))
                                        {
                                            <div class="mt-2">
                                                <MudText Typo="Typo.body2" Class="mb-2">Distance: @distanceKm km</MudText>
                                                <MudSlider @bind-Value="distanceKm" 
                                                         Min="1" 
                                                         Max="100" 
                                                         Step="5" 
                                                         Color="Color.Primary" 
                                                         @bind-Value:after="OnDistanceChanged" />
                                                
                                                <MudCheckBox @bind-Value="includeRemoteTools" 
                                                            Label="Include bundles without location" 
                                                            Dense="true"
                                                            @bind-Value:after="OnIncludeRemoteChanged" />
                                            </div>
                                        }
                                    </div>
                                </MudStack>
                                
                                <!-- Active Filters Display -->
                                @if (HasActiveFilters())
                                {
                                    <MudDivider />
                                    <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Active filters:</MudText>
                                        
                                        @if (!string.IsNullOrEmpty(selectedCategory))
                                        {
                                            <MudChip T="string" 
                                                     Text="@($"Category: {selectedCategory}")"
                                                     Color="Color.Primary"
                                                     Size="Size.Small"
                                                     OnClose="() => ClearCategoryFilter()"
                                                     CloseIcon="@Icons.Material.Filled.Close" />
                                        }
                                        
                                        @if (featuredOnly)
                                        {
                                            <MudChip T="string" 
                                                     Text="Featured Only" 
                                                     Color="Color.Primary"
                                                     Size="Size.Small"
                                                     OnClose="() => ClearFeaturedFilter()"
                                                     CloseIcon="@Icons.Material.Filled.Close" />
                                        }
                                        
                                        @if (!string.IsNullOrEmpty(selectedTags))
                                        {
                                            @foreach (var tag in GetActiveTagList())
                                            {
                                                <MudChip T="string" 
                                                         Text="@($"Tag: {tag}")"
                                                         Color="Color.Secondary"
                                                         Size="Size.Small"
                                                         OnClose="() => RemoveTag(tag)"
                                                         CloseIcon="@Icons.Material.Filled.Close" />
                                            }
                                        }
                                        
                                        @if (!string.IsNullOrEmpty(locationFilter))
                                        {
                                            <MudChip T="string" 
                                                     Text="@($"Near: {locationFilter} ({distanceKm}km)")"
                                                     Color="Color.Info"
                                                     Size="Size.Small"
                                                     OnClose="ClearLocationFilter"
                                                     CloseIcon="@Icons.Material.Filled.Close" />
                                        }
                                        
                                        @if (!string.IsNullOrEmpty(locationFilter) && !includeRemoteTools)
                                        {
                                            <MudChip T="string" 
                                                     Text="Location Required"
                                                     Color="Color.Warning"
                                                     Size="Size.Small"
                                                     OnClose="() => { includeRemoteTools = true; OnIncludeRemoteChanged(); }"
                                                     CloseIcon="@Icons.Material.Filled.Close" />
                                        }
                                        
                                        <MudButton Variant="Variant.Text" 
                                                   Color="Color.Error" 
                                                   Size="Size.Small"
                                                   OnClick="ClearAllFilters"
                                                   StartIcon="@Icons.Material.Filled.Clear">
                                            Clear All
                                        </MudButton>
                                    </MudStack>
                                }
                            </MudStack>
                        </MudPaper>

                        <!-- Results Section -->
                            @if (isLoading)
                            {
                                <MudGrid>
                                    @for (int i = 0; i < 6; i++)
                                    {
                                        <MudItem xs="12" sm="6" md="4">
                                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" />
                                        </MudItem>
                                    }
                                </MudGrid>
                            }
                            else if ((isMobile && allLoadedBundles.Any()) || (!isMobile && bundles?.Items?.Any() == true))
                            {
                                <!-- Results Header -->
                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                                    <MudText Typo="Typo.body1" Color="Color.Secondary">
                                        @if (isMobile && allLoadedBundles.Any())
                                        {
                                            @($"Showing {allLoadedBundles.Count} of {bundles?.TotalCount ?? 0} bundles")
                                        }
                                        else if (!isMobile && bundles != null)
                                        {
                                            var startItem = (currentPage - 1) * pageSize + 1;
                                            var endItem = Math.Min(currentPage * pageSize, bundles.TotalCount);
                                            @($"Showing {startItem}-{endItem} of {bundles.TotalCount} bundles")
                                        }
                                        else
                                        {
                                            @("No bundles found")
                                        }
                                    </MudText>
                                    
                                    <!-- Sort Options -->
                                    <MudSelect @bind-Value="sortBy" 
                                             Label="Sort by" 
                                             Variant="Variant.Outlined"
                                             AnchorOrigin="Origin.BottomCenter"
                                             @bind-Value:after="OnSortChanged">
                                        <MudSelectItem Value="@("featured")">Featured First</MudSelectItem>
                                        <MudSelectItem Value="@("newest")">Newest First</MudSelectItem>
                                        <MudSelectItem Value="@("popular")">Most Popular</MudSelectItem>
                                        <MudSelectItem Value="@("price-low")">Price: Low to High</MudSelectItem>
                                        <MudSelectItem Value="@("price-high")">Price: High to Low</MudSelectItem>
                                    </MudSelect>
                                </MudStack>

                                <!-- Bundle Cards -->
                                <MudGrid>
                                    @if (isMobile)
                                    {
                                        @foreach (var bundle in allLoadedBundles)
                                        {
                                            <MudItem xs="12" sm="6" md="4">
                                                <BundleCard Bundle="bundle" OnClick="() => ViewBundle(bundle.Id)" />
                                            </MudItem>
                                        }
                                    }
                                    else if (bundles?.Items != null)
                                    {
                                        @foreach (var bundle in bundles.Items)
                                        {
                                            <MudItem xs="12" sm="6" md="4">
                                                <BundleCard Bundle="bundle" OnClick="() => ViewBundle(bundle.Id)" />
                                            </MudItem>
                                        }
                                    }
                                </MudGrid>

                                <!-- Desktop Pagination -->
                                @if (!isMobile && bundles != null && bundles.TotalPages > 1)
                                {
                                    <div class="d-flex justify-center mt-6">
                                        <MudPagination Count="@bundles.TotalPages" 
                                                      Selected="@currentPage" 
                                                      SelectedChanged="OnPageChanged"
                                                      Color="Color.Primary"
                                                      Variant="Variant.Filled"
                                                      ShowFirstButton="true"
                                                      ShowLastButton="true"
                                                      ShowPreviousButton="true"
                                                      ShowNextButton="true"
                                                      BoundaryCount="1"
                                                      MiddleCount="3" />
                                    </div>
                                }
                                
                                <!-- Mobile Load More -->
                                @if (isMobile && hasMoreItems && allLoadedBundles.Any())
                                {
                                    <div class="d-flex justify-center mt-6">
                                        <MudButton Variant="Variant.Outlined"
                                                  Color="Color.Primary"
                                                  OnClick="LoadMoreItems"
                                                  Disabled="@isLoadingMore"
                                                  StartIcon="@(isLoadingMore ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.ExpandMore)"
                                                  Size="Size.Large"
                                                  Class="load-more-btn">
                                            @if (isLoadingMore)
                                            {
                                                @("Loading...")
                                            }
                                            else
                                            {
                                                @($"Load More ({Math.Min(pageSize, (bundles?.TotalCount ?? 0) - allLoadedBundles.Count)} more items)")
                                            }
                                        </MudButton>
                                    </div>
                                }
                            }
                            else
                            {
                                <MudStack AlignItems="AlignItems.Center" Class="pa-8">
                                    <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Secondary" />
                                    <MudText Typo="Typo.h6" Class="mt-4">No bundles found</MudText>
                                    <MudText Typo="Typo.body1" Color="Color.Secondary">
                                        Try adjusting your search criteria or explore different categories.
                                    </MudText>
                                    @if (hasFiltersApplied)
                                    {
                                        <MudButton Variant="Variant.Text" 
                                                 Color="Color.Primary" 
                                                 OnClick="ClearFilters" 
                                                 Class="mt-2">
                                            Clear Filters
                                        </MudButton>
                                    }
                                </MudStack>
                            }
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

<style>
    .load-more-btn {
        min-width: 200px;
        border-radius: 25px;
        padding: 12px 24px;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .load-more-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    
    @@media (max-width: 768px) {
        .load-more-btn {
            width: 100%;
            max-width: 300px;
        }
    }
</style>

@code {
    private PagedResult<BundleModel>? bundles;
    private Dictionary<string, int> availableCategories = new();
    private bool isLoading = true;
    private List<frontend.Models.BreadcrumbItem> breadcrumbItems = new();
    
    // Mobile infinite scroll variables
    private List<BundleModel> allLoadedBundles = new();
    private bool isMobile = false;
    private bool isLoadingMore = false;
    private bool hasMoreItems = true;
    private IJSObjectReference? screenSizeCleanup;
    
    // Filter parameters
    private string searchTerm = "";
    private string selectedCategory = "";
    private bool featuredOnly = false;
    private string sortBy = "featured";
    private string selectedTags = "";
    private int currentPage = 1;
    private const int pageSize = 24;
    
    // Location filter properties
    private string locationFilter = string.Empty;
    private decimal? locationLat = null;
    private decimal? locationLng = null;
    private int distanceKm = 25;
    private bool includeRemoteTools = true;

    private bool hasFiltersApplied => 
        !string.IsNullOrWhiteSpace(searchTerm) || 
        !string.IsNullOrWhiteSpace(selectedCategory) || 
        !string.IsNullOrWhiteSpace(selectedTags) || 
        !string.IsNullOrWhiteSpace(locationFilter) ||
        featuredOnly;
        

    protected override async Task OnInitializedAsync()
    {
        // Detect mobile devices with proper JavaScript interop
        isMobile = await DetectMobileDevice();
        
        // Start monitoring screen size changes for responsive mobile detection
        await StartScreenSizeMonitoring();
        
        SetupBreadcrumbs();
        await ParseQueryParameters();
        await LoadCategories();
        await LoadBundles();
        
        // Listen for navigation changes to handle same-route navigation
        Navigation.LocationChanged += OnLocationChanged;
    }
    
    private async Task StartScreenSizeMonitoring()
    {
        try
        {
            screenSizeCleanup = await DeviceDetectionService.StartScreenSizeMonitoringAsync(OnScreenSizeChanged);
        }
        catch (Exception)
        {
            // Ignore if screen size monitoring fails
        }
    }
    
    private async Task OnScreenSizeChanged(DeviceInfo deviceInfo)
    {
        var wasMobile = isMobile;
        isMobile = deviceInfo.IsMobile;
        
        // If device type changed, reload data appropriately
        if (wasMobile != isMobile)
        {
            if (isMobile)
            {
                // Switching to mobile - prepare accumulated data
                allLoadedBundles = bundles?.Items?.ToList() ?? new List<BundleModel>();
                hasMoreItems = currentPage < (bundles?.TotalPages ?? 0);
            }
            else
            {
                // Switching to desktop - clear accumulated data
                allLoadedBundles.Clear();
                hasMoreItems = true;
            }
            
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task<bool> DetectMobileDevice()
    {
        try
        {
            var deviceInfo = await DeviceDetectionService.GetDeviceInfoAsync();
            return deviceInfo.IsMobile;
        }
        catch (Exception)
        {
            // Fallback to desktop if detection fails
            return false;
        }
    }

    private async Task LoadCategories()
    {
        var result = await BundleService.GetBundleCategoriesAsync();
        if (result.Success && result.Data != null)
        {
            availableCategories = result.Data;
        }
    }

    private async Task LoadBundles(bool append = false)
    {
        if (append)
        {
            isLoadingMore = true;
        }
        else
        {
            isLoading = true;
        }
        
        StateHasChanged();

        // Generate cache key for this request
        var cacheParams = new Dictionary<string, string?>
        {
            ["category"] = selectedCategory,
            ["search"] = searchTerm,
            ["sort"] = sortBy,
            ["featured"] = featuredOnly.ToString(),
            ["tags"] = string.IsNullOrEmpty(selectedTags) ? null : selectedTags,
            ["location"] = string.IsNullOrEmpty(locationFilter) ? null : locationFilter,
            ["lat"] = locationLat?.ToString(),
            ["lng"] = locationLng?.ToString(),
            ["distance"] = string.IsNullOrEmpty(locationFilter) ? null : distanceKm.ToString(),
            ["includeRemote"] = string.IsNullOrEmpty(locationFilter) ? null : includeRemoteTools.ToString()
        };
        var cacheKey = BrowserCacheService.GeneratePageCacheKey("bundles", currentPage, pageSize, cacheParams);
        
        // Try to get cached data first (only for non-append operations)
        PagedResult<BundleModel>? cachedResult = null;
        if (!append)
        {
            cachedResult = await BrowserCacheService.GetCachedPageAsync<BundleModel>(cacheKey);
        }
        
        ApiResponse<PagedResult<BundleModel>> result;
        if (cachedResult != null)
        {
            // Use cached data
            result = new ApiResponse<PagedResult<BundleModel>>
            {
                Success = true,
                Data = cachedResult,
                Message = "Loaded from cache"
            };
        }
        else
        {
            // Fetch from API using standardized search endpoint
            var searchRequest = new BundleSearchRequest
            {
                Page = currentPage,
                PageSize = pageSize,
                Query = string.IsNullOrWhiteSpace(searchTerm) ? null : searchTerm,
                Category = string.IsNullOrWhiteSpace(selectedCategory) ? null : selectedCategory,
                Tags = string.IsNullOrWhiteSpace(selectedTags) ? null : selectedTags,
                IsFeatured = featuredOnly ? true : null,
                SortBy = sortBy switch 
                {
                    "featured" => "relevance",
                    "newest" => "newest", 
                    "popular" => "popular",
                    _ => "relevance"
                },
                LocationSearch = string.IsNullOrEmpty(locationFilter) ? null : new LocationSearchRequest
                {
                    LocationQuery = locationFilter,
                    Lat = locationLat,
                    Lng = locationLng,
                    RadiusKm = distanceKm,
                    IncludeItemsWithoutLocation = includeRemoteTools
                }
            };
            
            result = await BundleService.SearchBundlesAsync(searchRequest);
            
            // Cache the result if successful
            if (result.Success && result.Data != null && !append)
            {
                await BrowserCacheService.SetCachedPageAsync(cacheKey, result.Data);
            }
        }

        if (result.Success && result.Data != null)
        {
            bundles = result.Data;
            
            if (isMobile)
            {
                if (append)
                {
                    // Append new items for infinite scroll
                    allLoadedBundles.AddRange(result.Data.Items);
                }
                else
                {
                    // Reset for new search/filter
                    allLoadedBundles = new List<BundleModel>(result.Data.Items);
                }
                hasMoreItems = currentPage < result.Data.TotalPages;
            }
        }
        else
        {
            Snackbar.Add(result.Message ?? "Failed to load bundles", Severity.Error);
            bundles = new PagedResult<BundleModel> { Items = new List<BundleModel>() };
            if (isMobile && !append)
            {
                allLoadedBundles.Clear();
            }
        }

        // Update breadcrumbs when filters change
        SetupBreadcrumbs();

        if (append)
        {
            isLoadingMore = false;
        }
        else
        {
            isLoading = false;
        }
        
        StateHasChanged();
    }

    private async Task OnPageChanged(int page)
    {
        if (page == currentPage) return;
        
        currentPage = page;
        UpdateUrl();
        await LoadBundles();
    }
    
    private async Task OnSortChanged()
    {
        // Reset to first page when sort changes
        currentPage = 1;
        
        // Clear mobile accumulated data
        if (isMobile)
        {
            allLoadedBundles.Clear();
            hasMoreItems = true;
        }
        
        UpdateUrl();
        await LoadBundles();
    }
    
    private async Task LoadMoreItems()
    {
        if (!hasMoreItems || isLoadingMore) return;
        
        currentPage++;
        await LoadBundles(append: true);
    }
    
    private async Task ApplyFilters()
    {
        // Reset to first page when filters change
        currentPage = 1;
        
        // Clear mobile accumulated data
        if (isMobile)
        {
            allLoadedBundles.Clear();
            hasMoreItems = true;
        }
        
        // Update URL with current parameters
        UpdateUrl();
        
        // Reload data with new filters
        await LoadBundles();
        
        // Update breadcrumbs when filters change
        SetupBreadcrumbs();
    }
    
    private void UpdateUrl()
    {
        var queryParams = new List<string>();
        
        if (!string.IsNullOrEmpty(searchTerm))
            queryParams.Add($"search={Uri.EscapeDataString(searchTerm)}");
            
        if (!string.IsNullOrEmpty(selectedCategory))
            queryParams.Add($"category={Uri.EscapeDataString(selectedCategory)}");
            
        if (currentPage > 1)
            queryParams.Add($"page={currentPage}");
            
        if (sortBy != "featured")
            queryParams.Add($"sort={Uri.EscapeDataString(sortBy)}");
            
        if (!string.IsNullOrEmpty(selectedTags))
            queryParams.Add($"tags={Uri.EscapeDataString(selectedTags)}");
        
        var queryString = queryParams.Any() ? "?" + string.Join("&", queryParams) : "";
        var newUrl = $"/bundles{queryString}";
        
        Navigation.NavigateTo(newUrl, false);
    }

    private async Task ParseQueryParameters()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        
        // Handle search parameter
        var search = query["search"];
        if (!string.IsNullOrEmpty(search))
        {
            searchTerm = search;
        }
        else
        {
            searchTerm = string.Empty;
        }
        
        // Handle category parameter  
        var category = query["category"];
        if (!string.IsNullOrEmpty(category))
        {
            selectedCategory = category;
        }
        else
        {
            selectedCategory = string.Empty;
        }
        
        // Handle tags parameter
        var tags = query["tags"];
        if (!string.IsNullOrEmpty(tags))
        {
            selectedTags = tags;
        }
        else
        {
            selectedTags = string.Empty;
        }
        
        // Handle page parameter
        var pageParam = query["page"];
        if (int.TryParse(pageParam, out int page) && page > 0)
        {
            currentPage = page;
        }
        else
        {
            currentPage = 1;
        }
        
        // Handle sort parameter
        var sort = query["sort"];
        if (!string.IsNullOrEmpty(sort))
        {
            sortBy = sort;
        }
        
        // Update breadcrumbs when parameters change
        SetupBreadcrumbs();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedCategory = "";
        featuredOnly = false;
        selectedTags = "";
        currentPage = 1;
        
        // Update URL to remove parameters
        var uri = new Uri(Navigation.Uri);
        var baseUrl = $"{uri.Scheme}://{uri.Authority}{uri.AbsolutePath}";
        Navigation.NavigateTo(baseUrl);
        
        _ = LoadBundles();
    }
    
    private bool HasActiveFilters()
    {
        return !string.IsNullOrEmpty(selectedCategory) ||
               featuredOnly ||
               !string.IsNullOrEmpty(selectedTags) ||
               !string.IsNullOrEmpty(locationFilter);
    }
    
    private List<string> GetActiveTagList()
    {
        if (string.IsNullOrEmpty(selectedTags))
            return new List<string>();
            
        return selectedTags.Split(',', StringSplitOptions.RemoveEmptyEntries)
                          .Select(tag => tag.Trim())
                          .Where(tag => !string.IsNullOrEmpty(tag))
                          .ToList();
    }
    
    private async Task ClearCategoryFilter()
    {
        selectedCategory = "";
        await ApplyFilters();
    }
    
    private async Task ClearFeaturedFilter()
    {
        featuredOnly = false;
        await ApplyFilters();
    }
    
    private async Task RemoveTag(string tag)
    {
        var tags = GetActiveTagList();
        tags.Remove(tag);
        selectedTags = string.Join(",", tags);
        await ApplyFilters();
    }
    
    private async Task ClearAllFilters()
    {
        searchTerm = "";
        selectedCategory = "";
        featuredOnly = false;
        selectedTags = "";
        locationFilter = string.Empty;
        locationLat = null;
        locationLng = null;
        distanceKm = 25;
        includeRemoteTools = true;
        await ApplyFilters();
    }
    
    // Location filter event handlers
    private async Task OnLocationSelectedWithCoordinates(ToolsSharing.Frontend.Models.Location.LocationAutocompleteResult result)
    {
        locationFilter = result.DisplayName ?? string.Empty;
        locationLat = result.Latitude;
        locationLng = result.Longitude;
        
        Console.WriteLine($"Bundles page: Location selected - {result.DisplayName}, Has coordinates: {result.HasCoordinates}");
        if (result.HasCoordinates)
        {
            Console.WriteLine($"Bundles page: Using coordinates for search - Lat: {result.Latitude}, Lng: {result.Longitude}");
        }
        
        await ApplyFilters();
    }
    
    private async Task OnDistanceChanged()
    {
        await ApplyFilters();
    }
    
    private async Task OnIncludeRemoteChanged()
    {
        await ApplyFilters();
    }
    
    private async Task ClearLocationFilter()
    {
        locationFilter = string.Empty;
        locationLat = null;
        locationLng = null;
        distanceKm = 25;
        includeRemoteTools = true;
        await ApplyFilters();
    }

    private void ViewBundle(Guid bundleId)
    {
        Navigation.NavigateTo($"/bundles/{bundleId}");
    }

    private void SetupBreadcrumbs()
    {
        breadcrumbItems = BreadcrumbService.GenerateBundlesBreadcrumb(
            category: selectedCategory,
            page: BreadcrumbPage.Browser);
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        // Handle navigation changes to the same route with different query parameters
        await ParseQueryParameters();
        await LoadCategories();
        await LoadBundles();
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchBundles();
        }
    }

    private async Task SearchBundles()
    {
        await ApplyFilters();
    }
    

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
        
        // Clean up screen size monitoring
        if (screenSizeCleanup != null)
        {
            _ = Task.Run(async () =>
            {
                try
                {
                    await DeviceDetectionService.StopScreenSizeMonitoringAsync(screenSizeCleanup);
                }
                catch
                {
                    // Ignore cleanup errors
                }
            });
        }
    }
}