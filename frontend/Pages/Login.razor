@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using frontend.Models
@using frontend.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<PageTitle>Login - NeighborTools</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
    <MudPaper Elevation="8" Class="pa-8" Style="border-radius: 16px;">
        <div class="d-flex flex-column align-center mb-6">
            <MudIcon Icon="@Icons.Material.Filled.Handyman" Size="Size.Large" Color="Color.Primary" Class="mb-4" Style="font-size: 4rem;" />
            <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">
                Welcome Back
            </MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                Sign in to your NeighborTools account
            </MudText>
        </div>

        <EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4" ShowCloseIcon="true" CloseIconClicked="(() => errorMessage = string.Empty)">
                    @errorMessage
                </MudAlert>
            }

            <MudTextField @bind-Value="loginRequest.Email"
                          Label="Email Address"
                          Variant="Variant.Outlined"
                          InputType="InputType.Email"
                          FullWidth="true"
                          Class="mb-4"
                          Required="true"
                          RequiredError="Email is required"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Email" />

            <MudTextField @bind-Value="loginRequest.Password"
                          Label="Password"
                          Variant="Variant.Outlined"
                          InputType="InputType.Password"
                          FullWidth="true"
                          Class="mb-6"
                          Required="true"
                          RequiredError="Password is required"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Lock" />

            <div class="d-flex justify-space-between align-center mb-4">
                <MudCheckBox T="bool" @bind-Value="rememberMe" 
                            Label="Remember me" 
                            Color="Color.Primary" />
                <MudLink Href="/forgot-password" Color="Color.Primary" Typo="Typo.body2">
                    Forgot password?
                </MudLink>
            </div>

            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true"
                       Class="mb-4"
                       Disabled="isLoading"
                       StartIcon="@(isLoading ? null : Icons.Material.Filled.Login)">
                @if (isLoading)
                {
                    <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ml-2">Signing in...</MudText>
                }
                else
                {
                    <MudText>Sign In</MudText>
                }
            </MudButton>
        </EditForm>

        @if (showVerificationNeeded)
        {
            <MudCard Class="mt-6" Style="border: 2px solid var(--mud-palette-warning); background-color: var(--mud-palette-warning-lighten);">
                <MudCardContent Class="text-center">
                    <MudIcon Icon="@Icons.Material.Filled.MarkEmailRead" Size="Size.Large" Color="Color.Warning" Class="mb-3" Style="font-size: 3rem;" />
                    <MudText Typo="Typo.h5" Color="Color.Warning" GutterBottom="true">
                        Email Verification Required
                    </MudText>
                    <MudText Typo="Typo.body1" Class="mb-3">
                        Your account exists but your email address hasn't been verified yet. 
                        Please check your email and click the verification link to activate your account.
                    </MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                        Can't find the email? Check your spam folder or click below to resend.
                    </MudText>
                    
                    <MudButton Variant="Variant.Outlined" 
                              Color="Color.Primary"
                              StartIcon="@Icons.Material.Filled.Email"
                              OnClick="ResendVerification"
                              Disabled="isResending">
                        @if (isResending)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            <span class="ml-2">Sending...</span>
                        }
                        else
                        {
                            <span>Resend Verification Email</span>
                        }
                    </MudButton>
                </MudCardContent>
            </MudCard>
        }

        <MudDivider Class="my-4" />

        <div class="d-flex justify-center">
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Don't have an account?
                <MudLink Href="/register" Color="Color.Primary" Class="ml-1">
                    Create one here
                </MudLink>
            </MudText>
        </div>
    </MudPaper>
</MudContainer>

@code {
    private LoginRequest loginRequest = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private bool rememberMe = false;
    private bool showVerificationNeeded = false;
    private bool isResending = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.LoginAsync(loginRequest, rememberMe);
            
            if (result.Success)
            {
                Snackbar.Add("Welcome back! Login successful.", Severity.Success);
                Navigation.NavigateTo("/");
            }
            else
            {
                // Check if the error is related to email verification
                var message = result.Message ?? "Login failed. Please check your credentials and try again.";
                if (message.Contains("verify your email", StringComparison.OrdinalIgnoreCase) || 
                    message.Contains("email verification", StringComparison.OrdinalIgnoreCase))
                {
                    showVerificationNeeded = true;
                    errorMessage = "";
                }
                else
                {
                    errorMessage = message;
                    showVerificationNeeded = false;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ResendVerification()
    {
        if (string.IsNullOrWhiteSpace(loginRequest.Email))
        {
            Snackbar.Add("Please enter your email address first.", Severity.Warning);
            return;
        }

        isResending = true;
        StateHasChanged();

        try
        {
            var request = new ResendVerificationRequest
            {
                Email = loginRequest.Email
            };

            var result = await AuthService.ResendVerificationAsync(request);

            if (result.Success)
            {
                Snackbar.Add("Verification email resent! Please check your inbox.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to resend verification email. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            isResending = false;
            StateHasChanged();
        }
    }
}