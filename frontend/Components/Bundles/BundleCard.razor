@using ToolsSharing.Frontend.Models
@using ToolsSharing.Frontend.Services
@inject IUrlService UrlService

<MudCard Class="bundle-card h-100" Style="cursor: pointer; transition: transform 0.2s ease-in-out;" 
         @onclick="OnClick">
    @{
        var imageUrl = GetImageUrl();
        var hasValidImage = !string.IsNullOrEmpty(imageUrl);
    }
    <div class="bundle-image-container">
        @if (hasValidImage)
        {
            <img src="@imageUrl" 
                 style="@(imageLoadError ? "display: none;" : "")" 
                 class="bundle-image"
                 @onerror="HandleImageError" 
                 @onload="HandleImageLoad" />
        }
        
        @if (!hasValidImage || imageLoadError)
        {
            <ThemeAwarePlaceholder Height="100%" 
                                  Icon="@Icons.Material.Filled.Inventory" 
                                  IconSize="Size.Large"
                                  IconFontSize="3rem"
                                  AdditionalClass="bundle-image-placeholder" />
        }
        
        <!-- Featured Badge -->
        @if (Bundle.IsFeatured)
        {
            <div class="featured-badge">
                <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Color="Color.Warning" />
            </div>
        }
    </div>
    
    <MudCardContent Class="bundle-content">
        <MudStack Spacing="2">
            <!-- Title -->
            <MudText Typo="Typo.h6" Class="bundle-title">@Bundle.Name</MudText>

            <!-- Category and Skill Level - Responsive -->
            <div class="bundle-tags">
                <MudChip Size="Size.Small" Color="Color.Primary" Text="@Bundle.Category" T="string" />
                <MudChip Size="Size.Small" Color="Color.Secondary" Text="@Bundle.RequiredSkillLevel" T="string" Class="skill-level-chip" />
            </div>

            <!-- Description - Hide on smallest screens -->
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="bundle-description">
                @GetTruncatedDescription()
            </MudText>

            <!-- Tools and Stats Row -->
            <div class="bundle-stats">
                <div class="tools-count">
                    <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Small" Color="Color.Primary" />
                    <MudText Typo="Typo.caption" Color="Color.Primary" Class="tools-text">
                        @Bundle.Tools.Count tool@(Bundle.Tools.Count != 1 ? "s" : "")
                    </MudText>
                </div>
                <div class="rental-stats">
                    <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Size="Size.Small" Color="Color.Secondary" />
                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="rentals-text">
                        @Bundle.RentalCount
                    </MudText>
                </div>
                <div class="duration-chip">
                    <MudChip Size="Size.Small" 
                             Color="Color.Info" 
                             Text="@($"{Bundle.EstimatedProjectDuration}h")" 
                             T="string" />
                </div>
            </div>

            <!-- Pricing Section -->
            <MudDivider Class="pricing-divider" />
            <div class="pricing-section">
                <div class="price-info">
                    @if (Bundle.BundleDiscount > 0)
                    {
                        <div class="discount-info">
                            <MudText Typo="Typo.body2" 
                                   Style="text-decoration: line-through;" 
                                   Color="Color.Secondary" 
                                   Class="original-price">
                                $@Bundle.TotalCost.ToString("F2")
                            </MudText>
                            <MudChip Size="Size.Small" 
                                   Color="Color.Success" 
                                   Text="@($"-{Bundle.BundleDiscount:F0}%")" 
                                   T="string" 
                                   Class="discount-chip" />
                        </div>
                    }
                    <MudText Typo="Typo.h6" Color="Color.Primary" Class="current-price">
                        $@Bundle.DiscountedCost.ToString("F2")<span class="price-period">/day</span>
                    </MudText>
                </div>
            </div>
            
            <!-- Owner and Location - Separate section for better layout control -->
            <div class="owner-location-section">
                <div class="owner-info">
                    <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Color="Color.Secondary" />
                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="bundle-owner-name">@Bundle.OwnerName</MudText>
                </div>
                <div class="location-info">
                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Color="Color.Secondary" />
                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="bundle-location">@GetBundleLocation()</MudText>
                </div>
            </div>

            <!-- Status Indicators -->
            <div class="status-section">
                <!-- Tool Approval Warning for Owners -->
                @if (ShowApprovalWarning && UnapprovedToolCount > 0)
                {
                    <MudTooltip Text="@($"{UnapprovedToolCount} tool{(UnapprovedToolCount != 1 ? "s" : "")} in this bundle need approval")">
                        <MudChip Color="Color.Warning" 
                               Size="Size.Small" 
                               Icon="@Icons.Material.Filled.Warning" 
                               Text="@($"{UnapprovedToolCount} Tool{(UnapprovedToolCount != 1 ? "s" : "")} Need Approval")" 
                               T="string" 
                               Class="approval-warning" />
                    </MudTooltip>
                }
                
                <!-- Availability Indicator -->
                @if (Bundle.IsAvailable)
                {
                    <MudChip Color="Color.Success" 
                           Size="Size.Small" 
                           Icon="@Icons.Material.Filled.CheckCircle" 
                           Text="Available" 
                           T="string" 
                           Class="availability-chip" />
                }
                else if (Bundle.AvailableFromDate.HasValue)
                {
                    <MudChip Color="Color.Warning" 
                           Size="Size.Small" 
                           Icon="@Icons.Material.Filled.Schedule" 
                           Text="@($"Available {Bundle.AvailableFromDate.Value:MMM dd}")" 
                           T="string" 
                           Class="availability-chip" />
                }
                else
                {
                    <MudChip Color="Color.Error" 
                           Size="Size.Small" 
                           Icon="@Icons.Material.Filled.Block" 
                           Text="Unavailable" 
                           T="string" 
                           Class="availability-chip" />
                }
            </div>
        </MudStack>
    </MudCardContent>

    <!-- Card Actions -->
    <MudCardActions Class="bundle-actions" @onclick:stopPropagation="true">
        <div class="actions-container">
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       OnClick="OnClick"
                       StartIcon="@Icons.Material.Filled.Visibility"
                       Class="view-button">
                <span class="button-text-full">View Details</span>
                <span class="button-text-compact">View</span>
            </MudButton>
            
            <BundleFavoriteButton BundleId="@Bundle.Id.ToString()" 
                                 OwnerUserId="@Bundle.UserId" 
                                 Size="Size.Small" 
                                 Class="favorite-button" />
        </div>
    </MudCardActions>

    <!-- Responsive Styles -->
    <style>
        .bundle-card {
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        
        .bundle-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        }

        .bundle-image-container {
            position: relative;
            height: 180px;
            overflow: hidden;
        }
        
        .bundle-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .bundle-image-placeholder {
            background: linear-gradient(45deg, #f5f5f5 0%, #e0e0e0 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
        }
        
        .featured-badge {
            position: absolute;
            top: 8px;
            right: 8px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 50%;
            padding: 4px;
            backdrop-filter: blur(4px);
        }
        
        .bundle-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            padding: 16px;
        }

        .bundle-title {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
            line-height: 1.3;
            margin-bottom: 8px;
        }
        
        .bundle-tags {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            margin-bottom: 8px;
        }

        .bundle-description {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
            line-height: 1.4;
            margin-bottom: 12px;
        }
        
        .bundle-stats {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
            gap: 8px;
        }
        
        .tools-count,
        .rental-stats {
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        .pricing-section {
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .price-info {
            display: flex;
            flex-direction: column;
            gap: 4px;
            text-align: center;
        }
        
        .discount-info {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }
        
        .current-price {
            font-weight: 600;
        }
        
        .price-period {
            font-size: 0.75em;
            font-weight: 400;
        }
        
        .owner-location-section {
            display: flex;
            flex-direction: column;
            gap: 4px;
            margin-top: 8px;
            align-items: center;
        }
        
        .owner-info,
        .location-info {
            display: flex;
            align-items: center;
            gap: 4px;
            justify-content: center;
        }
        
        .bundle-owner-name,
        .bundle-location {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            max-width: 100px;
        }
        
        .status-section {
            display: flex;
            justify-content: center;
            gap: 8px;
            flex-wrap: wrap;
            margin-top: auto;
        }
        
        .bundle-actions {
            padding: 12px 16px;
            margin-top: auto;
        }
        
        .actions-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
        }
        
        .button-text-compact {
            display: none;
        }

        /* Tablet and small desktop - 3 column with sidebar */
        @@media (min-width: 768px) and (max-width: 1200px) {
            .bundle-image-container {
                height: 160px;
            }
            
            .bundle-content {
                padding: 12px;
            }
            
            .bundle-description {
                -webkit-line-clamp: 1;
            }
            
            .bundle-owner-name,
            .bundle-location {
                max-width: 80px;
            }
            
            .button-text-full {
                display: none;
            }
            
            .button-text-compact {
                display: inline;
            }
            
            .skill-level-chip {
                display: none;
            }
            
            .tools-text {
                display: none;
            }
            
            .rentals-text::after {
                content: ' rentals';
            }
        }

        /* Mobile - single column */
        @@media (max-width: 767px) {
            .bundle-image-container {
                height: 200px;
            }
            
            .bundle-content {
                padding: 16px;
            }
            
            .bundle-description {
                -webkit-line-clamp: 3;
            }
            
            .bundle-owner-name,
            .bundle-location {
                max-width: 120px;
            }
            
            .pricing-section {
                justify-content: flex-start;
                text-align: left;
            }
            
            .price-info {
                text-align: left;
            }
            
            .discount-info {
                justify-content: flex-start;
            }
            
            .owner-location-section {
                align-items: flex-start;
            }
            
            .owner-info,
            .location-info {
                justify-content: flex-start;
            }
        }

        /* Large screens - full content */
        @@media (min-width: 1201px) {
            .bundle-image-container {
                height: 200px;
            }
            
            .bundle-description {
                -webkit-line-clamp: 3;
            }
            
            .bundle-owner-name,
            .bundle-location {
                max-width: 100px;
            }
        }
    </style>
</MudCard>

@code {
    [Parameter] public BundleModel Bundle { get; set; } = new();
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public bool ShowApprovalWarning { get; set; } = false;
    [Parameter] public int UnapprovedToolCount { get; set; } = 0;
    
    private bool imageLoadError = false;

    private string GetImageUrl()
    {
        return !string.IsNullOrEmpty(Bundle.ImageUrl) 
            ? UrlService.GetFileUrl(Bundle.ImageUrl)
            : string.Empty; // Return empty for placeholder handling
    }

    private string GetTruncatedDescription()
    {
        if (string.IsNullOrWhiteSpace(Bundle.Description))
            return "No description available";

        return Bundle.Description.Length > 120 
            ? Bundle.Description.Substring(0, 120) + "..." 
            : Bundle.Description;
    }

    private string GetBundleLocation()
    {
        // Use bundle location if available, otherwise fall back to owner location, then to placeholder
        return !string.IsNullOrEmpty(Bundle.Location) ? Bundle.Location : 
               !string.IsNullOrEmpty(Bundle.OwnerLocation) ? Bundle.OwnerLocation : 
               "Location not available";
    }
    
    private void HandleImageError()
    {
        imageLoadError = true;
        StateHasChanged();
    }
    
    private void HandleImageLoad()
    {
        imageLoadError = false;
        StateHasChanged();
    }
}