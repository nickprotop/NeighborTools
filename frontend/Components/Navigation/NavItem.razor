@using MudBlazor

@if (IsCollapsed)
{
    <MudTooltip Text="@Text" Placement="Placement.Right" Delay="500">
        <div class="nav-item-container">
            @if (!string.IsNullOrEmpty(Badge))
            {
                <MudBadge Content="@Badge" 
                          Color="@BadgeColor" 
                          Overlap="true" 
                          Visible="true"
                          Class="nav-badge">
                    <MudIconButton Icon="@Icon"
                                   Href="@Href"
                                   Class="@GetCollapsedClasses()"
                                   OnClick="HandleClick" />
                </MudBadge>
            }
            else
            {
                <MudIconButton Icon="@Icon"
                               Href="@Href"
                               Class="@GetCollapsedClasses()"
                               OnClick="HandleClick" />
            }
        </div>
    </MudTooltip>
}
else
{
    <div class="nav-item-container">
        @if (!string.IsNullOrEmpty(Badge))
        {
            <MudBadge Content="@Badge" 
                      Color="@BadgeColor" 
                      Overlap="true" 
                      Visible="true"
                      Class="nav-badge">
                <MudButton Variant="@GetVariant()" 
                           StartIcon="@Icon"
                           Href="@Href"
                           FullWidth="true"
                           Class="@GetExpandedClasses()"
                           Color="@GetButtonColor()"
                           OnClick="HandleClick">
                    @Text
                </MudButton>
            </MudBadge>
        }
        else
        {
            <MudButton Variant="@GetVariant()" 
                       StartIcon="@Icon"
                       Href="@Href"
                       FullWidth="true"
                       Class="@GetExpandedClasses()"
                       Color="@GetButtonColor()"
                       OnClick="HandleClick">
                @Text
            </MudButton>
        }
    </div>
}

<style>
    .nav-item-container {
        position: relative;
        margin-bottom: 4px;
    }
    
    .nav-badge {
        width: 100%;
    }
    
    /* Collapsed Icon Button */
    .nav-item-collapsed {
        width: 40px;
        height: 40px;
        margin: 0 auto;
        color: var(--mud-text-primary);
        border-radius: var(--mud-radius-md);
        transition: all 0.2s ease;
    }
    
    .nav-item-collapsed:hover {
        background-color: var(--mud-palette-action-hover);
    }
    
    .nav-item-collapsed.current {
        background-color: var(--mud-palette-primary-lighten);
        color: var(--mud-palette-primary);
    }
    
    .nav-item-collapsed.primary {
        background-color: var(--mud-palette-primary);
        color: white;
    }
    
    .nav-item-collapsed.primary:hover {
        background-color: var(--mud-palette-primary-darken);
    }
    
    /* Expanded Button */
    .nav-item-expanded {
        justify-content: flex-start !important;
        color: var(--mud-text-primary) !important;
        padding: 12px 16px;
        border-radius: var(--mud-radius-md);
        font-weight: 500;
        transition: all 0.2s ease;
        text-align: left;
    }
    
    .nav-item-expanded:hover {
        background-color: var(--mud-palette-action-hover) !important;
        transform: translateX(2px);
    }
    
    .nav-item-expanded.current {
        background-color: var(--mud-palette-primary-lighten) !important;
        color: var(--mud-palette-primary) !important;
        font-weight: 600;
        border-left: 3px solid var(--mud-palette-primary);
    }
    
    .nav-item-expanded.primary {
        background-color: var(--mud-palette-primary) !important;
        color: white !important;
        font-weight: 600;
        box-shadow: var(--mud-shadow-sm);
    }
    
    .nav-item-expanded.primary:hover {
        background-color: var(--mud-palette-primary-darken) !important;
        box-shadow: var(--mud-shadow-md);
        transform: translateY(-1px);
    }
</style>

@code {
    [Parameter] public string Icon { get; set; } = "";
    [Parameter] public string Text { get; set; } = "";
    [Parameter] public string Href { get; set; } = "";
    [Parameter] public string? Badge { get; set; }
    [Parameter] public Color BadgeColor { get; set; } = Color.Primary;
    [Parameter] public bool IsCollapsed { get; set; } = false;
    [Parameter] public bool IsPrimary { get; set; } = false;
    [Parameter] public EventCallback OnClick { get; set; }

    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private bool IsCurrentPage
    {
        get
        {
            if (string.IsNullOrEmpty(Href))
                return false;
                
            var currentPath = new Uri(Navigation.Uri).AbsolutePath.TrimEnd('/');
            var targetPath = Href.TrimStart('/').TrimEnd('/');
            
            // Handle root path case
            if (string.IsNullOrEmpty(targetPath))
                targetPath = "/";
            else
                targetPath = "/" + targetPath;
            
            return string.Equals(currentPath, targetPath, StringComparison.OrdinalIgnoreCase);
        }
    }

    private async Task HandleClick()
    {
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync();
        }
    }

    private Variant GetVariant()
    {
        return IsPrimary ? Variant.Filled : Variant.Text;
    }

    private Color GetButtonColor()
    {
        return IsPrimary ? Color.Primary : Color.Inherit;
    }

    private string GetCollapsedClasses()
    {
        var classes = new List<string> { "nav-item-collapsed" };
        
        if (IsPrimary)
            classes.Add("primary");
        else if (IsCurrentPage)
            classes.Add("current");
            
        return string.Join(" ", classes);
    }

    private string GetExpandedClasses()
    {
        var classes = new List<string> { "nav-item-expanded" };
        
        if (IsPrimary)
            classes.Add("primary");
        else if (IsCurrentPage)
            classes.Add("current");
            
        return string.Join(" ", classes);
    }
}