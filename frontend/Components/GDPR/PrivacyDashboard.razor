@page "/privacy-dashboard"
@using MudBlazor
@using System.Text.Json
@using frontend.Models
@inject HttpClient Http
@inject ILogger<PrivacyDashboard> Logger
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@attribute [Authorize]

<PageTitle>Privacy Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom>Privacy Dashboard</MudText>
    <MudText Typo="Typo.body1" Class="mb-6">
        Manage your data privacy settings and exercise your GDPR rights.
    </MudText>

    <MudGrid Spacing="4">
        <!-- Current Consents -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Your Consent Status</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @if (UserConsents != null)
                    {
                        @if (UserConsents.Any())
                        {
                            <MudStack Spacing="2">
                                @foreach (var consent in UserConsents)
                                {
                                    <MudPaper Class="pa-3" Elevation="1">
                                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                            <div>
                                                <MudText Typo="Typo.subtitle2">@GetConsentTypeDisplay(consent.ConsentType)</MudText>
                                                <MudText Typo="Typo.caption">
                                                    Last updated: @consent.ConsentDate.ToString("MMM dd, yyyy")
                                                </MudText>
                                            </div>
                                            <MudChip T="string" Color="@(consent.ConsentGiven ? Color.Success : Color.Default)" 
                                                    Size="Size.Small">
                                                @(consent.ConsentGiven ? "Granted" : "Withdrawn")
                                            </MudChip>
                                        </MudStack>
                                    </MudPaper>
                                }
                            </MudStack>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Info" Class="my-4">
                                <MudStack Spacing="2">
                                    <MudText Typo="Typo.body1">
                                        <strong>No consent records found</strong>
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        You haven't set any specific privacy preferences yet. Your basic account consents (data processing, marketing) 
                                        were set when you created your account.
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        You can update your cookie preferences using the cookie banner or manage additional consents as they become available.
                                    </MudText>
                                </MudStack>
                            </MudAlert>
                        }
                    }
                    else
                    {
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" />
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="UpdateConsents">
                        Update Consents
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <!-- Data Requests -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Data Subject Requests</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body2" Class="mb-3">
                        Exercise your GDPR rights by requesting data export, deletion, or rectification.
                    </MudText>
                    
                    <MudStack Spacing="2">
                        <MudButton Color="Color.Info" 
                                  Variant="Variant.Outlined" 
                                  FullWidth
                                  StartIcon="@Icons.Material.Filled.Download"
                                  OnClick="() => CreateDataRequest(0)">
                            Export My Data
                        </MudButton>
                        
                        <MudButton Color="Color.Warning" 
                                  Variant="Variant.Outlined" 
                                  FullWidth
                                  StartIcon="@Icons.Material.Filled.Edit"
                                  OnClick="() => CreateDataRequest(2)">
                            Request Data Correction
                        </MudButton>
                        
                        <MudButton Color="Color.Error" 
                                  Variant="Variant.Outlined" 
                                  FullWidth
                                  StartIcon="@Icons.Material.Filled.Delete"
                                  OnClick="() => CreateDataRequest(1)">
                            Delete My Account
                        </MudButton>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Recent Requests -->
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Recent Requests</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @if (DataRequests != null)
                    {
                        <MudTable Items="DataRequests" Hover="true" Breakpoint="Breakpoint.Sm">
                            <HeaderContent>
                                <MudTh>Request Type</MudTh>
                                <MudTh>Status</MudTh>
                                <MudTh>Requested</MudTh>
                                <MudTh>Completed</MudTh>
                                <MudTh>Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@GetRequestTypeDisplay(context.RequestType)</MudTd>
                                <MudTd>
                                    <MudChip T="string" Color="@GetStatusColor(context.Status)" Size="Size.Small">
                                        @context.Status
                                    </MudChip>
                                </MudTd>
                                <MudTd>@context.RequestDate.ToString("MMM dd, yyyy")</MudTd>
                                <MudTd>@(context.CompletedDate?.ToString("MMM dd, yyyy") ?? "-")</MudTd>
                                <MudTd>
                                    @if (context.Status.ToString() == "Completed" && context.RequestType == 0)
                                    {
                                        <MudButton Size="Size.Small" 
                                                  Color="Color.Primary" 
                                                  Variant="Variant.Text"
                                                  OnClick="() => DownloadData(context.Id)">
                                            Download
                                        </MudButton>
                                    }
                                </MudTd>
                            </RowTemplate>
                            <NoRecordsContent>
                                <MudText Typo="Typo.body2" Align="Align.Center">No requests found</MudText>
                            </NoRecordsContent>
                        </MudTable>
                    }
                    else
                    {
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<ConsentResponse>? UserConsents;
    private List<DataRequestResponse>? DataRequests;
    private string? CurrentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            CurrentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value 
                           ?? authState.User.FindFirst("sub")?.Value 
                           ?? authState.User.FindFirst("id")?.Value;
            
            if (CurrentUserId != null)
            {
                await LoadUserConsents();
                await LoadDataRequests();
            }
        }
    }

    private async Task LoadUserConsents()
    {
        try
        {
            var response = await Http.GetAsync($"api/gdpr/consent/{CurrentUserId}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                UserConsents = JsonSerializer.Deserialize<List<ConsentResponse>>(json, new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user consents");
            Snackbar.Add("Error loading consent data", Severity.Error);
        }
    }

    private async Task LoadDataRequests()
    {
        try
        {
            var response = await Http.GetAsync($"api/gdpr/data-subject/requests/{CurrentUserId}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                DataRequests = JsonSerializer.Deserialize<List<DataRequestResponse>>(json, new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading data requests");
            Snackbar.Add("Error loading request data", Severity.Error);
        }
    }

    private async Task CreateDataRequest(int requestType)
    {
        try
        {
            var request = new
            {
                UserId = CurrentUserId!,
                RequestType = requestType,
                Details = requestType switch
                {
                    0 => "Data export request from privacy dashboard",
                    1 => "Account deletion request from privacy dashboard",
                    2 => "Data rectification request from privacy dashboard",
                    _ => "General data request"
                }
            };

            var response = await Http.PostAsJsonAsync("api/gdpr/data-subject/request", request);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Request submitted successfully", Severity.Success);
                await LoadDataRequests(); // Refresh the list
            }
            else
            {
                Snackbar.Add("Failed to submit request", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating data request");
            Snackbar.Add("Error submitting request", Severity.Error);
        }
    }

    private async Task DownloadData(Guid requestId)
    {
        try
        {
            var response = await Http.GetAsync($"api/gdpr/export/download/{requestId}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsByteArrayAsync();
                var fileName = $"my_data_export_{DateTime.Now:yyyyMMdd}.json";
                
                // Create download link
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(content), "application/json");
                Snackbar.Add("Download started", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to download data", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading data");
            Snackbar.Add("Error downloading data", Severity.Error);
        }
    }

    private async Task UpdateConsents()
    {
        if (UserConsents == null || CurrentUserId == null) return;

        var parameters = new DialogParameters
        {
            { "UserId", CurrentUserId },
            { "InitialConsents", UserConsents }
        };

        var options = new DialogOptions 
        { 
            MaxWidth = MaxWidth.Medium, 
            FullWidth = true,
            CloseButton = true,
            BackdropClick = false
        };

        var dialog = DialogService.Show<ConsentUpdateDialog>("Update Consents", parameters, options);
        var result = await dialog.Result;

        // If changes were saved, refresh the consent data
        if (!result.Canceled && result.Data is bool changed && changed)
        {
            await LoadUserConsents();
        }
    }

    private string GetConsentTypeDisplay(int consentType)
    {
        return consentType switch
        {
            0 => "Cookies", // ConsentType.Cookies
            1 => "Marketing Communications", // ConsentType.Marketing
            2 => "Analytics & Performance", // ConsentType.Analytics
            3 => "Data Processing", // ConsentType.DataProcessing
            4 => "Financial Data", // ConsentType.FinancialData
            5 => "Location Data", // ConsentType.LocationData
            100 => "Terms of Service", // Special type for Terms of Service
            _ => "Unknown"
        };
    }

    private string GetRequestTypeDisplay(int requestType)
    {
        return requestType switch
        {
            0 => "Data Export",
            1 => "Data Deletion",
            2 => "Data Rectification",
            3 => "Data Portability",
            _ => "Unknown"
        };
    }

    private Color GetStatusColor(object status)
    {
        return status.ToString() switch
        {
            "Pending" => Color.Warning,
            "UnderReview" => Color.Info,
            "Completed" => Color.Success,
            "Rejected" => Color.Error,
            "Failed" => Color.Error,
            _ => Color.Default
        };
    }

}