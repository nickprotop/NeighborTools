@using frontend.Models
@using frontend.Services
@using MudBlazor
@inject IToolService ToolService
@inject NavigationManager Navigation
@inject IUrlService UrlService

<MudPaper Class="pa-6 mb-6" Elevation="0" Style="border-radius: 16px;">
    <MudStack Spacing="3" Class="mb-4">
        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h5" Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.Star" Class="mr-2" />
                @(GetSectionTitle())
            </MudText>
            @if (ShowViewAllButton)
            {
                <MudButton Variant="Variant.Text" 
                         Color="Color.Primary" 
                         OnClick="@(() => Navigation.NavigateTo("/tools"))"
                         EndIcon="@Icons.Material.Filled.ArrowForward">
                    View All Tools
                </MudButton>
            }
        </MudStack>
        
        @if (IsLoading)
        {
            <MudGrid>
                @for (int i = 0; i < MaxItems; i++)
                {
                    <MudItem xs="12" sm="6" md="@(MaxItems <= 4 ? 3 : 4)" lg="@(MaxItems <= 4 ? 3 : 4)">
                        <MudCard Class="marketplace-card" Elevation="4" Style="border-radius: 12px;">
                            <MudSkeleton Height="180px" />
                            <MudCardContent Class="pa-3">
                                <MudSkeleton Height="24px" Class="mb-2" />
                                <MudSkeleton Height="40px" Class="mb-2" />
                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudSkeleton Width="80px" Height="24px" />
                                    <MudSkeleton Width="60px" Height="20px" />
                                </MudStack>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else if (GetDisplayTools().Any())
        {
            <MudGrid>
                @foreach (var tool in GetDisplayTools())
                {
                    <MudItem xs="12" sm="6" md="@(MaxItems <= 4 ? 3 : 4)" lg="@(MaxItems <= 4 ? 3 : 4)">
                        <MudCard Class="marketplace-card" Elevation="4" Style="border-radius: 12px; cursor: pointer;" @onclick="() => ViewTool(tool.Id)">
                            @if (tool.ImageUrls.Any())
                            {
                                <MudCardMedia Image="@UrlService.GetFileUrl(tool.ImageUrls.First())" Height="180" />
                            }
                            else
                            {
                                <ThemeAwarePlaceholder Height="180px" 
                                                      Icon="@Icons.Material.Filled.Build" 
                                                      IconSize="Size.Large"
                                                      IconFontSize="3rem" />
                            }
                            
                            <MudCardContent Class="pa-3">
                                <MudText Typo="Typo.subtitle1" Class="mb-2" Style="font-weight: 600;">@tool.Name</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2" Style="height: 2.5em; overflow: hidden;">
                                    @(tool.Description.Length > 60 ? tool.Description.Substring(0, 60) + "..." : tool.Description)
                                </MudText>
                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudChip Size="Size.Small" Color="@(IsFeaturedTool(tool.Id) ? Color.Warning : Color.Primary)" Text="@(IsFeaturedTool(tool.Id) ? "Featured" : tool.Category)" T="string" />
                                    <MudText Typo="Typo.subtitle2" Color="Color.Primary" Style="font-weight: 600;">
                                        $@tool.DailyRate.ToString("F2")/day
                                    </MudText>
                                </MudStack>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Build">
                <MudText>No tools are currently available. Be the first to share your tools with the community!</MudText>
            </MudAlert>
        }
    </MudStack>
</MudPaper>

<style>
    .marketplace-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    
    .marketplace-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 24px rgba(0,0,0,0.15);
    }
</style>

@code {
    [Parameter] public int MaxItems { get; set; } = 8;
    [Parameter] public bool ShowViewAllButton { get; set; } = true;
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public List<Tool>? FeaturedTools { get; set; }
    [Parameter] public List<Tool>? RecentTools { get; set; }

    private void ViewTool(string toolId)
    {
        Navigation.NavigateTo($"/tools/{toolId}");
    }

    private List<Tool> GetDisplayTools()
    {
        var displayList = new List<Tool>();
        
        // Add featured tools first (30% of total, minimum 1 if any exist)
        if (FeaturedTools?.Any() == true)
        {
            var featuredCount = Math.Max(1, (int)(MaxItems * 0.3));
            displayList.AddRange(FeaturedTools.Take(featuredCount));
        }
        
        // Fill remaining slots with recent tools (excluding already added featured)
        if (RecentTools?.Any() == true)
        {
            var remainingSlots = MaxItems - displayList.Count;
            var availableRecent = RecentTools.Where(r => !displayList.Any(d => d.Id == r.Id));
            displayList.AddRange(availableRecent.Take(remainingSlots));
        }
        
        return displayList;
    }
    
    private string GetSectionTitle()
    {
        var hasFeatured = FeaturedTools?.Any() == true;
        var hasRecent = RecentTools?.Any() == true;
        
        if (hasFeatured && hasRecent)
            return "Popular Tools";
        else if (hasFeatured)
            return "Featured Tools";
        else if (hasRecent)
            return "Recent Tools";
        else
            return "Available Tools";
    }
    
    private bool IsFeaturedTool(string toolId)
    {
        return FeaturedTools?.Any(f => f.Id == toolId) == true;
    }
}