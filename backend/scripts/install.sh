#!/bin/bash

# NeighborTools Complete Installation Script
# Run this once for initial project setup

set -e  # Exit on any error

echo "🚀 Installing NeighborTools - Complete Setup"
echo "============================================="

# Check if Docker and Docker Compose are installed
if ! command -v docker &> /dev/null; then
    echo "❌ Docker is not installed. Please install Docker first."
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "❌ Docker Compose is not installed. Please install Docker Compose first."
    exit 1
fi

# Check if .NET SDK is installed
if ! command -v dotnet &> /dev/null; then
    echo "❌ .NET SDK is not installed. Please install .NET 9 SDK first."
    exit 1
fi

echo "✅ Prerequisites check passed"
echo ""

# Database password configuration
echo "🔐 Database Configuration"
echo "========================"
echo "Configure passwords for the MySQL database setup."
echo "Press Enter to use default passwords (recommended for development)."
echo ""

# Function to read password with optional default
read_password() {
    local prompt="$1"
    local default="$2"
    local password
    
    echo -n "$prompt"
    if [ -n "$default" ]; then
        echo -n " [default: $default]: "
    else
        echo -n ": "
    fi
    
    read -s password
    echo ""  # New line after hidden input
    
    if [ -z "$password" ] && [ -n "$default" ]; then
        password="$default"
    fi
    
    echo "$password"
}

# Get MySQL root password
MYSQL_ROOT_PASSWORD=$(read_password "MySQL root password" "RootPassword123!")

# Get MySQL user password
MYSQL_USER_PASSWORD=$(read_password "MySQL toolsuser password" "ToolsPassword123!")

echo ""
echo "✅ Database configuration complete"
echo "   Root password: $(echo "$MYSQL_ROOT_PASSWORD" | sed 's/./*/g')"
echo "   User password: $(echo "$MYSQL_USER_PASSWORD" | sed 's/./*/g')"

# Create .env file for docker-compose
DOCKER_DIR="$(dirname "$0")/../docker"
ENV_FILE="$DOCKER_DIR/.env"

echo "📝 Creating .env file for docker-compose..."
cat > "$ENV_FILE" << EOF
# Docker Compose Environment Variables
# Generated by install script on $(date)

# MySQL Configuration
MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
MYSQL_USER_PASSWORD=$MYSQL_USER_PASSWORD

# Note: This file is automatically read by docker-compose
EOF

echo "✅ Created .env file: $ENV_FILE"

# Navigate to the docker directory
cd "$DOCKER_DIR"

# Stop any existing containers
echo "🧹 Cleaning up existing containers..."
docker-compose down --remove-orphans

# Install infrastructure (MySQL, Redis)
echo "📦 Setting up infrastructure (MySQL, Redis)..."
docker-compose --profile infrastructure up -d

# Wait for MySQL to be ready
echo "⏳ Waiting for MySQL to be ready..."
for i in {1..30}; do
    if docker-compose exec -T mysql mysqladmin ping -h localhost --silent; then
        echo "✅ MySQL is ready"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "❌ MySQL failed to start within 30 seconds"
        exit 1
    fi
    echo "   Waiting... ($i/30)"
    sleep 1
done

# Wait for Redis to be ready
echo "⏳ Waiting for Redis to be ready..."
for i in {1..10}; do
    if docker-compose exec -T redis redis-cli ping | grep -q "PONG"; then
        echo "✅ Redis is ready"
        break
    fi
    if [ $i -eq 10 ]; then
        echo "❌ Redis failed to start within 10 seconds"
        exit 1
    fi
    echo "   Waiting... ($i/10)"
    sleep 1
done

# Navigate back to backend root
cd ..

# Install .NET dependencies
echo "📦 Installing .NET dependencies..."
dotnet restore

# Update backend configuration with database password
echo "📝 Updating backend configuration..."
cd src/ToolsSharing.API

# Check if config.json exists, if not create it from sample
if [ ! -f "config.json" ]; then
    if [ -f "config.sample.json" ]; then
        cp config.sample.json config.json
        echo "✅ Created config.json from sample"
    else
        echo "❌ config.sample.json not found. Cannot create config.json"
        exit 1
    fi
fi

# Update the database connection string in config.json
CONNECTION_STRING="server=localhost;port=3306;database=toolssharing;uid=toolsuser;pwd=${MYSQL_USER_PASSWORD}"
if command -v jq &> /dev/null; then
    # Use jq if available for proper JSON manipulation
    tmp=$(mktemp)
    jq --arg conn "$CONNECTION_STRING" '.ConnectionStrings.DefaultConnection = $conn' config.json > "$tmp" && mv "$tmp" config.json
    echo "✅ Updated database connection string in config.json (using jq)"
else
    # Fallback to sed for basic replacement
    sed -i "s|\"DefaultConnection\": \".*\"|\"DefaultConnection\": \"$CONNECTION_STRING\"|g" config.json
    echo "✅ Updated database connection string in config.json (using sed)"
fi

cd ../..

# Seed initial data (migrations will run automatically)
echo "🌱 Running database migrations and seeding initial data..."
dotnet run --project src/ToolsSharing.API --seed-only

echo ""
echo "🎉 Installation completed successfully!"
echo "============================================="
echo "Database Configuration:"
echo "  • MySQL Root Password: $(echo "$MYSQL_ROOT_PASSWORD" | sed 's/./*/g')"
echo "  • MySQL User Password: $(echo "$MYSQL_USER_PASSWORD" | sed 's/./*/g')"
echo ""
echo "Next steps:"
echo "  • Run './start-all.sh' to start development environment"
echo "  • Or run './start-infrastructure.sh' + 'dotnet run' for API debugging"
echo "  • Access Swagger UI at: http://localhost:5002/swagger"
echo "  • MySQL: localhost:3306 (user: toolsuser, password: [configured above])"
echo "  • Redis: localhost:6379"
echo ""
echo "Configuration Files Updated:"
echo "  • Docker Compose: Uses environment variables with fallback to defaults"
echo "  • Backend config.json: Updated with your database password"
echo ""
echo "Happy coding! 🚀"