// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToolsSharing.Infrastructure.Data;

#nullable disable

namespace ToolsSharing.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250713214437_AddIdentityRoles")]
    partial class AddIdentityRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PayoutTransactions", b =>
                {
                    b.Property<Guid>("PayoutId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("char(36)");

                    b.HasKey("PayoutId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("PayoutTransactions");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Dispute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("DisputeAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("DisputedAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("EscalatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Evidence")
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalCaseId")
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalDisputeId")
                        .HasColumnType("longtext");

                    b.Property<string>("InitiatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InitiatedByName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InitiatorId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastActionAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Metadata")
                        .HasColumnType("longtext");

                    b.Property<int?>("PayPalReason")
                        .HasColumnType("int");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("RefundAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("RentalId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Resolution")
                        .HasColumnType("int");

                    b.Property<string>("ResolutionNotes")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ResolvedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ResponseDueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("RentalId");

                    b.ToTable("Disputes");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.DisputeEvidence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("DisputeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DisputeId");

                    b.HasIndex("UploadedAt");

                    b.HasIndex("UploadedBy");

                    b.ToTable("DisputeEvidence", (string)null);
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.DisputeMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Attachments")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DisputeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FromUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFromAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSystemGenerated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SenderRole")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ToUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DisputeId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("DisputeMessages");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.FraudCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AdminNotified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CheckDetails")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CheckType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceFingerprint")
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PaymentBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PaymentId1")
                        .HasColumnType("char(36)");

                    b.Property<string>("ReviewNotes")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("int");

                    b.Property<decimal>("RiskScore")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TriggeredRules")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext");

                    b.Property<bool>("UserFlagged")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId1");

                    b.HasIndex("UserId");

                    b.ToTable("FraudChecks");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.GDPR.CookieConsent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ConsentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ConsentGiven")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CookieCategory")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExpiryDate")
                        .HasDatabaseName("IX_CookieConsents_ExpiryDate");

                    b.HasIndex("SessionId", "CookieCategory")
                        .HasDatabaseName("IX_CookieConsents_Session_Category");

                    b.HasIndex("UserId", "CookieCategory")
                        .HasDatabaseName("IX_CookieConsents_User_Category");

                    b.ToTable("CookieConsents");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.GDPR.DataProcessingLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DataCategories")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DataRecipients")
                        .HasColumnType("longtext");

                    b.Property<string>("DataSources")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LegalBasis")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProcessingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProcessingPurpose")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RetentionPeriod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityType")
                        .HasDatabaseName("IX_DataProcessingLogs_ActivityType");

                    b.HasIndex("UserId", "ProcessingDate")
                        .HasDatabaseName("IX_DataProcessingLogs_User_Date");

                    b.ToTable("DataProcessingLogs");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.GDPR.DataSubjectRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DataExportPath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProcessedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RequestDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ResponseDetails")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VerificationMethod")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedByUserId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_DataSubjectRequests_Status");

                    b.HasIndex("UserId", "RequestDate")
                        .HasDatabaseName("IX_DataSubjectRequests_User_Date");

                    b.ToTable("DataSubjectRequests");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.GDPR.PrivacyPolicyVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EffectiveDate")
                        .HasDatabaseName("IX_PrivacyPolicyVersions_EffectiveDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_PrivacyPolicyVersions_IsActive");

                    b.HasIndex("Version")
                        .IsUnique()
                        .HasDatabaseName("IX_PrivacyPolicyVersions_Version");

                    b.ToTable("PrivacyPolicyVersions");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.GDPR.UserConsent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ConsentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ConsentGiven")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ConsentSource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ConsentType")
                        .HasColumnType("int");

                    b.Property<string>("ConsentVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WithdrawalReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("WithdrawnDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ConsentType", "ConsentDate")
                        .HasDatabaseName("IX_UserConsents_User_Type_Date");

                    b.ToTable("UserConsents");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<string>("ExternalOrderId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ExternalPayerId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ExternalPaymentId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("FailedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRefunded")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Metadata")
                        .HasColumnType("JSON");

                    b.Property<string>("PayeeId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("PayerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RefundReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("RefundedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RentalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalPaymentId");

                    b.HasIndex("PayeeId");

                    b.HasIndex("PayerId");

                    b.HasIndex("RentalId");

                    b.HasIndex("Status");

                    b.HasIndex("Provider", "ExternalPaymentId")
                        .IsUnique()
                        .HasFilter("ExternalPaymentId IS NOT NULL");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.PaymentSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BusinessType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("CustomCommissionRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)");

                    b.Property<bool>("IsCommissionEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPayoutVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("MinimumPayoutAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(10.00m);

                    b.Property<bool>("NotifyOnPaymentReceived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("NotifyOnPayoutFailed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("NotifyOnPayoutSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PayPalEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PayoutDayOfMonth")
                        .HasColumnType("int");

                    b.Property<int?>("PayoutDayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("PayoutSchedule")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PreferredPayoutMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StripeAccountId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TaxIdLast4")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("TaxIdType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("TaxInfoProvided")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("VerificationNotes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IsPayoutVerified");

                    b.HasIndex("PayPalEmail");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PaymentSettings", (string)null);
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Payout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<string>("ExternalBatchId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ExternalPayoutId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ExternalTransactionId")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("FailedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Metadata")
                        .HasColumnType("JSON");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PayPalEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("PayoutDestination")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PayoutMethod")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("PlatformFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<Guid>("RentalId")
                        .HasColumnType("char(36)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalPayoutId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("RentalId");

                    b.HasIndex("ScheduledAt");

                    b.HasIndex("Status");

                    b.HasIndex("Provider", "ExternalPayoutId")
                        .IsUnique()
                        .HasFilter("ExternalPayoutId IS NOT NULL");

                    b.ToTable("Payouts", (string)null);
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RenterId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("ToolId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EndDate");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RenterId");

                    b.HasIndex("StartDate");

                    b.HasIndex("Status");

                    b.HasIndex("ToolId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("RentalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RevieweeId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("ToolId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("RentalId");

                    b.HasIndex("RevieweeId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("ToolId");

                    b.HasIndex("Type");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.SuspiciousActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FirstDetectedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<string>("InvestigationNotes")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastDetectedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PatternData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("PaymentsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RelatedPaymentIds")
                        .HasColumnType("longtext");

                    b.Property<string>("RelatedUserIds")
                        .HasColumnType("longtext");

                    b.Property<bool>("RequiresManualReview")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ResolvedBy")
                        .HasColumnType("longtext");

                    b.Property<decimal>("RiskScore")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("UserSuspended")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SuspiciousActivities");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Tool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("DepositRequired")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LeadTimeHours")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("MonthlyRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("WeeklyRate")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("IsAvailable");

                    b.HasIndex("Location");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.ToolImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ToolId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ToolId");

                    b.ToTable("ToolImages");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("CommissionAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CommissionRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<DateTime?>("DepositRefundedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DisputeOpenedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisputeReason")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("DisputeResolvedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasDispute")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("OwnerPayoutAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentCompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PayoutCompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PayoutScheduledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("RentalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RentalId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("SecurityDeposit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("HasDispute");

                    b.HasIndex("PayoutScheduledAt");

                    b.HasIndex("RentalId")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("AnonymizationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("DataPortabilityRequested")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DataProcessingConsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("DataRetentionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("GDPROptOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastConsentUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("MarketingConsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("PublicLocation")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("TermsAcceptedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("TermsOfServiceAccepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TermsVersion")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.UserSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowDirectMessages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("AllowRentalInquiries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("AutoApproveRentals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("USD");

                    b.Property<decimal>("DefaultDepositPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,4)")
                        .HasDefaultValue(0.20m);

                    b.Property<bool>("EmailMarketing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("EmailMessages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("EmailRentalRequests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("EmailRentalUpdates")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("EmailSecurityAlerts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("en");

                    b.Property<bool>("LoginAlertsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("PushMessages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("PushReminders")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("PushRentalRequests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("PushRentalUpdates")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("RentalLeadTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(24);

                    b.Property<bool>("RequireDeposit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("SessionTimeoutMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(480);

                    b.Property<bool>("ShowEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowOnlineStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowPhoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowProfilePicture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowRealName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowStatistics")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Theme")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("system");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("UTC");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.VelocityLimit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("AmountLimit")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("CurrentTransactions")
                        .HasColumnType("int");

                    b.Property<string>("CustomReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LimitType")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeWindow")
                        .HasColumnType("time(6)");

                    b.Property<int>("TransactionLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("WindowStartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("VelocityLimits");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolsSharing.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PayoutTransactions", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.Payout", null)
                        .WithMany()
                        .HasForeignKey("PayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolsSharing.Core.Entities.Transaction", null)
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Dispute", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId");

                    b.HasOne("ToolsSharing.Core.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("ToolsSharing.Core.Entities.Rental", "Rental")
                        .WithMany()
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");

                    b.Navigation("Payment");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.DisputeEvidence", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.Dispute", "Dispute")
                        .WithMany()
                        .HasForeignKey("DisputeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolsSharing.Core.Entities.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dispute");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.DisputeMessage", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.Dispute", "Dispute")
                        .WithMany("Messages")
                        .HasForeignKey("DisputeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolsSharing.Core.Entities.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolsSharing.Core.Entities.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId");

                    b.Navigation("Dispute");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.FraudCheck", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId1");

                    b.HasOne("ToolsSharing.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.GDPR.CookieConsent", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", "User")
                        .WithMany("CookieConsents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.GDPR.DataProcessingLog", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", "User")
                        .WithMany("ProcessingLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.GDPR.DataSubjectRequest", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", "ProcessedByUser")
                        .WithMany()
                        .HasForeignKey("ProcessedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ToolsSharing.Core.Entities.User", "User")
                        .WithMany("DataRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.GDPR.PrivacyPolicyVersion", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.GDPR.UserConsent", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", "User")
                        .WithMany("Consents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Payment", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", "Payee")
                        .WithMany("PaymentsReceived")
                        .HasForeignKey("PayeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ToolsSharing.Core.Entities.User", "Payer")
                        .WithMany("PaymentsMade")
                        .HasForeignKey("PayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ToolsSharing.Core.Entities.Rental", "Rental")
                        .WithMany()
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ToolsSharing.Core.Entities.Transaction", null)
                        .WithMany("Payments")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payee");

                    b.Navigation("Payer");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.PaymentSettings", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", "User")
                        .WithOne("PaymentSettings")
                        .HasForeignKey("ToolsSharing.Core.Entities.PaymentSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Payout", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", "Recipient")
                        .WithMany("Payouts")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ToolsSharing.Core.Entities.Rental", "Rental")
                        .WithMany()
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Rental", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", "Owner")
                        .WithMany("RentalsAsOwner")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ToolsSharing.Core.Entities.User", "Renter")
                        .WithMany("RentalsAsRenter")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ToolsSharing.Core.Entities.Tool", "Tool")
                        .WithMany("Rentals")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Renter");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Review", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.Rental", "Rental")
                        .WithMany("Reviews")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ToolsSharing.Core.Entities.User", "Reviewee")
                        .WithMany("ReviewsReceived")
                        .HasForeignKey("RevieweeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ToolsSharing.Core.Entities.User", "Reviewer")
                        .WithMany("ReviewsGiven")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ToolsSharing.Core.Entities.Tool", "Tool")
                        .WithMany("Reviews")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Rental");

                    b.Navigation("Reviewee");

                    b.Navigation("Reviewer");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.SuspiciousActivity", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Tool", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", "Owner")
                        .WithMany("OwnedTools")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.ToolImage", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.Tool", "Tool")
                        .WithMany("Images")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Transaction", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.Rental", "Rental")
                        .WithOne("Transaction")
                        .HasForeignKey("ToolsSharing.Core.Entities.Transaction", "RentalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.UserSettings", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("ToolsSharing.Core.Entities.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.VelocityLimit", b =>
                {
                    b.HasOne("ToolsSharing.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Dispute", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Rental", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Tool", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Rentals");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.Transaction", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ToolsSharing.Core.Entities.User", b =>
                {
                    b.Navigation("Consents");

                    b.Navigation("CookieConsents");

                    b.Navigation("DataRequests");

                    b.Navigation("OwnedTools");

                    b.Navigation("PaymentSettings");

                    b.Navigation("PaymentsMade");

                    b.Navigation("PaymentsReceived");

                    b.Navigation("Payouts");

                    b.Navigation("ProcessingLogs");

                    b.Navigation("RentalsAsOwner");

                    b.Navigation("RentalsAsRenter");

                    b.Navigation("ReviewsGiven");

                    b.Navigation("ReviewsReceived");

                    b.Navigation("Settings");
                });
#pragma warning restore 612, 618
        }
    }
}
