üíª Starting API in development mode...
=======================================
üîç Checking infrastructure...
‚úÖ Infrastructure is ready

üöÄ Starting API with dotnet run...
üåê API will be available at: http://localhost:5002
üìñ Swagger UI: http://localhost:5002/swagger
üîÑ Press Ctrl+C to stop

Using launch settings from /home/nick/NeighborTools/backend/src/ToolsSharing.API/Properties/launchSettings.json...
Building...
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/SmsNotificationService.cs(16,23): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/SmsNotificationService.cs(42,23): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/SmsNotificationService.cs(66,23): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/SmsNotificationService.cs(90,23): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/SmsNotificationService.cs(114,23): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/SmsNotificationService.cs(138,23): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/SmsNotificationService.cs(162,23): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/SmsNotificationService.cs(186,23): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/SmsNotificationService.cs(216,23): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/SightEngineService.cs(51,29): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Features/Messaging/MessageService.cs(150,54): warning CS8604: Possible null reference argument for parameter 'source' in 'MessageDto IMapper.Map<MessageDto>(object source)'. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Features/Users/UserService.cs(262,25): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/PaymentProviders/PayPalPaymentProvider.cs(72,16): warning CS8603: Possible null reference return. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Features/Messaging/MessageService.cs(476,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/PaymentProviders/PayPalPaymentProvider.cs(492,45): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Mappings/MappingProfile.cs(65,29): warning CS8603: Possible null reference return. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Mappings/MappingProfile.cs(66,29): warning CS8603: Possible null reference return. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Mappings/MappingProfile.cs(67,29): warning CS8603: Possible null reference return. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Features/Users/PublicProfileService.cs(162,29): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Features/Users/PublicProfileService.cs(174,32): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Features/Users/PublicProfileService.cs(208,29): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Features/Users/PublicProfileService.cs(209,31): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/SampleDataService.cs(537,24): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/SampleDataService.cs(558,24): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/SampleDataService.cs(579,24): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentStatusService.cs(36,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentStatusService.cs(38,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentStatusService.cs(40,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentStatusService.cs(94,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentStatusService.cs(119,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentStatusService.cs(243,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentStatusService.cs(477,55): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentStatusService.cs(529,55): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentStatusService.cs(556,54): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeNotificationService.cs(34,34): warning CS8601: Possible null reference assignment. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeNotificationService.cs(65,34): warning CS8601: Possible null reference assignment. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeNotificationService.cs(106,38): warning CS8601: Possible null reference assignment. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeNotificationService.cs(147,38): warning CS8601: Possible null reference assignment. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeNotificationService.cs(186,38): warning CS8601: Possible null reference assignment. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeNotificationService.cs(229,38): warning CS8601: Possible null reference assignment. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeNotificationService.cs(261,34): warning CS8601: Possible null reference assignment. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentService.cs(188,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentService.cs(190,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentService.cs(192,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentService.cs(550,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentService.cs(551,31): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentService.cs(602,67): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentService.cs(693,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentService.cs(724,71): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentService.cs(864,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(167,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(169,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(171,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(213,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(230,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(246,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(258,37): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(336,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(39,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(41,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(43,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(493,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(503,28): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(88,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(545,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(596,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(176,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(178,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(180,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(634,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(645,28): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(201,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(203,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(205,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(726,50): warning CS8629: Nullable value type may be null. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(254,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(780,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(794,28): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(830,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(840,28): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(307,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(900,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(910,28): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(1041,43): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(414,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(447,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(503,31): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(511,31): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(518,43): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(1225,48): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(533,23): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(1231,23): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(1237,47): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(581,43): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(1248,35): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(1288,44): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/PaymentReceiptService.cs(711,54): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(1302,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(1312,28): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(1414,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/DisputeService.cs(1424,28): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/MutualDisputeClosureService.cs(63,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/MutualDisputeClosureService.cs(65,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/MutualDisputeClosureService.cs(74,56): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/MutualDisputeClosureService.cs(155,43): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/MutualDisputeClosureService.cs(327,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/MutualDisputeClosureService.cs(338,27): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/MutualDisputeClosureService.cs(473,29): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/MutualClosureNotificationService.cs(268,38): warning CS8601: Possible null reference assignment. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/MutualClosureNotificationService.cs(317,38): warning CS8601: Possible null reference assignment. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/MutualDisputeClosureService.cs(576,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/MutualDisputeClosureService.cs(579,47): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/MutualClosureNotificationService.cs(373,38): warning CS8601: Possible null reference assignment. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/MutualDisputeClosureService.cs(714,75): warning CS8629: Nullable value type may be null. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/Services/MutualDisputeClosureService.cs(808,24): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/home/nick/NeighborTools/backend/src/ToolsSharing.Infrastructure/ToolsSharing.Infrastructure.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.API/Controllers/AuthController.cs(143,26): warning CS0168: The variable 'ex' is declared but never used [/home/nick/NeighborTools/backend/src/ToolsSharing.API/ToolsSharing.API.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.API/Controllers/AuthController.cs(177,26): warning CS0168: The variable 'ex' is declared but never used [/home/nick/NeighborTools/backend/src/ToolsSharing.API/ToolsSharing.API.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.API/Controllers/MutualDisputeClosureController.cs(438,57): warning CS8625: Cannot convert null literal to non-nullable reference type. [/home/nick/NeighborTools/backend/src/ToolsSharing.API/ToolsSharing.API.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.API/Controllers/MutualDisputeClosureController.cs(460,57): warning CS8625: Cannot convert null literal to non-nullable reference type. [/home/nick/NeighborTools/backend/src/ToolsSharing.API/ToolsSharing.API.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.API/Controllers/AdminController.cs(143,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.API/ToolsSharing.API.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.API/Controllers/AdminController.cs(150,57): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.API/ToolsSharing.API.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.API/Controllers/AdminController.cs(221,21): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.API/ToolsSharing.API.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.API/Controllers/AdminController.cs(438,21): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.API/ToolsSharing.API.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.API/Controllers/AdminController.cs(548,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.API/ToolsSharing.API.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.API/Controllers/AdminController.cs(550,39): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.API/ToolsSharing.API.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.API/Controllers/AdminController.cs(660,21): warning CS8602: Dereference of a possibly null reference. [/home/nick/NeighborTools/backend/src/ToolsSharing.API/ToolsSharing.API.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.API/Controllers/AdminController.cs(667,29): warning CS8601: Possible null reference assignment. [/home/nick/NeighborTools/backend/src/ToolsSharing.API/ToolsSharing.API.csproj]
/home/nick/NeighborTools/backend/src/ToolsSharing.API/Controllers/AdminController.cs(988,26): warning CS8601: Possible null reference assignment. [/home/nick/NeighborTools/backend/src/ToolsSharing.API/ToolsSharing.API.csproj]
‚úÖ Using config.json
[04:07:13 INF] User profile is available. Using '/home/nick/.aspnet/DataProtection-Keys' as key repository; keys will not be encrypted at rest. {"EventId": {"Id": 62, "Name": "UsingProfileAsKeyRepository"}, "SourceContext": "Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager"}
[04:07:13 INF] Loading proxy data from config. {"EventId": {"Id": 1, "Name": "ApplyProxyConfig"}, "SourceContext": "Yarp.ReverseProxy.Configuration.ConfigProvider.ConfigurationConfigProvider"}
[04:07:13 INF] Starting Tools Sharing API {}
[04:07:14 INF] Applying database migrations... {}
[04:07:15 WRN] Entity 'Dispute' has a global query filter defined and is the required end of a relationship with the entity 'MutualDisputeClosure'. This may lead to unexpected results when the required entity is filtered out. Either configure the navigation as optional, or define matching query filters for both entities in the navigation. See https://go.microsoft.com/fwlink/?linkid=2131316 for more information. {"EventId": {"Id": 10622, "Name": "Microsoft.EntityFrameworkCore.Model.Validation.PossibleIncorrectRequiredNavigationWithQueryFilterInteractionWarning"}, "SourceContext": "Microsoft.EntityFrameworkCore.Model.Validation"}
[04:07:15 WRN] The foreign key property 'FraudCheck.PaymentId1' was created in shadow state because a conflicting property with the simple name 'PaymentId' exists in the entity type, but is either not mapped, is already used for another relationship, or is incompatible with the associated primary key type. See https://aka.ms/efcore-relationships for information on mapping relationships in EF Core. {"EventId": {"Id": 10625, "Name": "Microsoft.EntityFrameworkCore.Model.Validation.ShadowForeignKeyPropertyCreated"}, "SourceContext": "Microsoft.EntityFrameworkCore.Model.Validation"}
[04:07:15 WRN] The 'MessagePriority' property 'Priority' on entity type 'Message' is configured with a database-generated default, but has no configured sentinel value. The database-generated default will always be used for inserts when the property has the value '0', since this is the CLR default for the 'MessagePriority' type. Consider using a nullable type, using a nullable backing field, or setting the sentinel value for the property to ensure the database default is used when, and only when, appropriate. See https://aka.ms/efcore-docs-default-values for more information. {"EventId": {"Id": 20601, "Name": "Microsoft.EntityFrameworkCore.Model.Validation.BoolWithDefaultWarning"}, "SourceContext": "Microsoft.EntityFrameworkCore.Model.Validation"}
[04:07:15 WRN] The 'MessageType' property 'Type' on entity type 'Message' is configured with a database-generated default, but has no configured sentinel value. The database-generated default will always be used for inserts when the property has the value '0', since this is the CLR default for the 'MessageType' type. Consider using a nullable type, using a nullable backing field, or setting the sentinel value for the property to ensure the database default is used when, and only when, appropriate. See https://aka.ms/efcore-docs-default-values for more information. {"EventId": {"Id": 20601, "Name": "Microsoft.EntityFrameworkCore.Model.Validation.BoolWithDefaultWarning"}, "SourceContext": "Microsoft.EntityFrameworkCore.Model.Validation"}
[04:07:16 INF] Executed DbCommand (10ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT GET_LOCK('__toolssharing_EFMigrationsLock', 259200) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command"}
[04:07:16 INF] Executed DbCommand (22ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
CREATE TABLE IF NOT EXISTS `__EFMigrationsHistory` (
    `MigrationId` varchar(150) CHARACTER SET utf8mb4 NOT NULL,
    `ProductVersion` varchar(32) CHARACTER SET utf8mb4 NOT NULL,
    CONSTRAINT `PK___EFMigrationsHistory` PRIMARY KEY (`MigrationId`)
) CHARACTER SET=utf8mb4; {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command"}
[04:07:16 INF] Executed DbCommand (18ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='toolssharing' AND TABLE_NAME='__EFMigrationsHistory'; {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command"}
[04:07:16 INF] Executed DbCommand (4ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `MigrationId`, `ProductVersion`
FROM `__EFMigrationsHistory`
ORDER BY `MigrationId`; {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command"}
[04:07:17 INF] No migrations were applied. The database is already up to date. {"EventId": {"Id": 20405, "Name": "Microsoft.EntityFrameworkCore.Migrations.MigrationsNotApplied"}, "SourceContext": "Microsoft.EntityFrameworkCore.Migrations"}
[04:07:17 INF] Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT RELEASE_LOCK('__toolssharing_EFMigrationsLock') {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command"}
[04:07:17 INF] Database migrations applied successfully {}
[04:07:17 INF] Essential system data loaded via migrations. Use admin panel to manage sample data. {}
[04:07:17 INF] Payout background service started {"SourceContext": "ToolsSharing.API.Services.PayoutBackgroundService"}
[04:07:17 INF] Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `t`.`Id`, `t`.`CommissionAmount`, `t`.`CommissionRate`, `t`.`CreatedAt`, `t`.`Currency`, `t`.`DepositRefundedAt`, `t`.`DisputeOpenedAt`, `t`.`DisputeReason`, `t`.`DisputeResolvedAt`, `t`.`HasDispute`, `t`.`IsDeleted`, `t`.`OwnerPayoutAmount`, `t`.`PaymentCompletedAt`, `t`.`PayoutCompletedAt`, `t`.`PayoutScheduledAt`, `t`.`RentalAmount`, `t`.`RentalId`, `t`.`SecurityDeposit`, `t`.`Status`, `t`.`TotalAmount`, `t`.`UpdatedAt`, `r0`.`Id`, `r0`.`ApprovedAt`, `r0`.`CancellationReason`, `r0`.`CancelledAt`, `r0`.`CreatedAt`, `r0`.`DepositAmount`, `r0`.`DisputeDeadline`, `r0`.`EndDate`, `r0`.`IsDeleted`, `r0`.`Notes`, `r0`.`OwnerId`, `r0`.`PickupDate`, `r0`.`RenterId`, `r0`.`ReturnConditionNotes`, `r0`.`ReturnDate`, `r0`.`ReturnedByUserId`, `r0`.`StartDate`, `r0`.`Status`, `r0`.`ToolId`, `r0`.`TotalCost`, `r0`.`UpdatedAt`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`
FROM `Transactions` AS `t`
INNER JOIN (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`
    FROM `Rentals` AS `r`
    WHERE NOT (`r`.`IsDeleted`)
) AS `r0` ON `t`.`RentalId` = `r0`.`Id`
INNER JOIN `AspNetUsers` AS `a` ON `r0`.`OwnerId` = `a`.`Id`
WHERE NOT (`t`.`IsDeleted`) AND ((((`t`.`Status` = 'PaymentCompleted') AND `t`.`PayoutScheduledAt` IS NOT NULL) AND (`t`.`PayoutScheduledAt` <= UTC_TIMESTAMP())) AND `t`.`PayoutCompletedAt` IS NULL) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command"}
[04:07:17 INF] RentalLifecycleService started {"SourceContext": "ToolsSharing.API.Services.RentalLifecycleService"}
[04:07:17 INF] Executed DbCommand (40ms) [Parameters=[@__now_0='?' (DbType = DateTime)], CommandType='Text', CommandTimeout='30']
SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`
FROM `Rentals` AS `r`
WHERE NOT (`r`.`IsDeleted`) AND (((`r`.`Status` = 'Returned') AND `r`.`DisputeDeadline` IS NOT NULL) AND (`r`.`DisputeDeadline` <= @__now_0)) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command"}
[04:07:17 INF] Executed DbCommand (60ms) [Parameters=[@__currentTime_0='?' (DbType = DateTime), @__AddDays_1='?' (DbType = DateTime)], CommandType='Text', CommandTimeout='30']
SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`, `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM `Rentals` AS `r`
INNER JOIN (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE NOT (`t`.`IsDeleted`)
) AS `t0` ON `r`.`ToolId` = `t0`.`Id`
INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `r`.`RenterId` = `a0`.`Id`
WHERE (NOT (`r`.`IsDeleted`) AND `r`.`Status` IN ('PickedUp', 'Approved')) AND ((`r`.`EndDate` >= @__currentTime_0) AND (`r`.`EndDate` <= @__AddDays_1)) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command"}
[04:07:17 INF] Executed DbCommand (17ms) [Parameters=[@__currentTime_0='?' (DbType = DateTime)], CommandType='Text', CommandTimeout='30']
SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`, `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM `Rentals` AS `r`
INNER JOIN (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE NOT (`t`.`IsDeleted`)
) AS `t0` ON `r`.`ToolId` = `t0`.`Id`
INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `r`.`RenterId` = `a0`.`Id`
WHERE NOT (`r`.`IsDeleted`) AND ((`r`.`Status` = 'PickedUp') AND (`r`.`EndDate` < @__currentTime_0)) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command"}
[04:07:18 WRN] The ASP.NET Core developer certificate is not trusted. For information about trusting the ASP.NET Core developer certificate, see https://aka.ms/aspnet/https-trust-dev-cert {"EventId": {"Id": 8, "Name": "DeveloperCertificateNotTrusted"}, "SourceContext": "Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer"}
[04:07:18 INF] Now listening on: https://0.0.0.0:5003 {"EventId": {"Id": 14, "Name": "ListeningOnAddress"}, "SourceContext": "Microsoft.Hosting.Lifetime"}
[04:07:18 INF] Now listening on: http://0.0.0.0:5002 {"EventId": {"Id": 14, "Name": "ListeningOnAddress"}, "SourceContext": "Microsoft.Hosting.Lifetime"}
[04:07:18 INF] Application started. Press Ctrl+C to shut down. {"SourceContext": "Microsoft.Hosting.Lifetime"}
[04:07:18 INF] Hosting environment: Development {"SourceContext": "Microsoft.Hosting.Lifetime"}
[04:07:18 INF] Content root path: /home/nick/NeighborTools/backend/src/ToolsSharing.API {"SourceContext": "Microsoft.Hosting.Lifetime"}
[04:07:18 INF] Executed DbCommand (4ms) [Parameters=[@__currentTime_Date_0='?' (DbType = DateTime)], CommandType='Text', CommandTimeout='30']
SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`, `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM `Rentals` AS `r`
INNER JOIN (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE NOT (`t`.`IsDeleted`)
) AS `t0` ON `r`.`ToolId` = `t0`.`Id`
INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `r`.`RenterId` = `a0`.`Id`
WHERE (NOT (`r`.`IsDeleted`) AND (`r`.`Status` = 'Approved')) AND (CONVERT(`r`.`StartDate`, date) = @__currentTime_Date_0) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command"}
[04:07:18 INF] Rental lifecycle processing completed successfully {"SourceContext": "ToolsSharing.API.Services.RentalLifecycleService"}
[04:07:18 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?status=Overdue&type=renter - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL4:00000001", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL4"}
[04:07:18 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?type=renter - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL2:00000001", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:18 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/messages/unread-count - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL5:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL5"}
[04:07:18 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?type=owner - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL3:00000001", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL3"}
[04:07:19 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL5:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL5"}
[04:07:19 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL3:00000001", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL3"}
[04:07:19 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL4:00000001", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL4"}
[04:07:19 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL2:00000001", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:19 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/messages/unread-count - 204 null null 140.6857ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL5:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL5"}
[04:07:19 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?type=owner - 204 null null 140.8391ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL3:00000001", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL3"}
[04:07:19 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?status=Overdue&type=renter - 204 null null 140.9321ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL4:00000001", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL4"}
[04:07:19 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?type=renter - 204 null null 140.7566ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL2:00000001", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:19 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/messages/unread-count - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL3:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL3"}
[04:07:19 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/rentals?type=renter - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL4:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL4"}
[04:07:19 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/rentals?type=owner - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL5:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL5"}
[04:07:19 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=renter - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL2:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:19 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL4:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL4"}
[04:07:19 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL5:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL5"}
[04:07:19 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL2:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:19 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL3:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL3"}
[04:07:19 INF] Executing endpoint 'ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL3:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL3"}
[04:07:19 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL2:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:19 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL5:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL5"}
[04:07:19 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL4:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL4"}
[04:07:19 INF] Route matched with {action = "GetUnreadCount", controller = "Messages"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetUnreadCount() on controller ToolsSharing.API.Controllers.MessagesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL3:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL3"}
[04:07:19 INF] Route matched with {action = "GetRentals", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetRentals(ToolsSharing.Core.Features.Rentals.GetRentalsQuery) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL2:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:19 INF] Route matched with {action = "GetRentals", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetRentals(ToolsSharing.Core.Features.Rentals.GetRentalsQuery) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL5:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL5"}
[04:07:19 INF] Route matched with {action = "GetRentals", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetRentals(ToolsSharing.Core.Features.Rentals.GetRentalsQuery) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL4:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL4"}
[04:07:19 INF] Executed DbCommand (6ms) [Parameters=[@__query_UserId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT COUNT(*)
FROM `Messages` AS `m`
WHERE NOT (`m`.`IsDeleted`) AND ((((`m`.`RecipientId` = @__query_UserId_0) AND NOT (`m`.`IsRead`)) AND NOT (`m`.`IsDeleted`)) AND NOT (`m`.`IsBlocked`)) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL3:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL3"}
[04:07:19 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL3:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL3"}
[04:07:19 INF] Executed action ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API) in 182.7007ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL3:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL3"}
[04:07:19 INF] Executed endpoint 'ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL3:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL3"}
[04:07:19 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/messages/unread-count - 200 null application/json; charset=utf-8 477.1855ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL3:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL3"}
[04:07:19 INF] Executed DbCommand (28ms) [Parameters=[@__query_UserId_0='?' (Size = 255), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `r0`.`Id`, `r0`.`ApprovedAt`, `r0`.`CancellationReason`, `r0`.`CancelledAt`, `r0`.`CreatedAt`, `r0`.`DepositAmount`, `r0`.`DisputeDeadline`, `r0`.`EndDate`, `r0`.`IsDeleted`, `r0`.`Notes`, `r0`.`OwnerId`, `r0`.`PickupDate`, `r0`.`RenterId`, `r0`.`ReturnConditionNotes`, `r0`.`ReturnDate`, `r0`.`ReturnedByUserId`, `r0`.`StartDate`, `r0`.`Status`, `r0`.`ToolId`, `r0`.`TotalCost`, `r0`.`UpdatedAt`, `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`
    FROM `Rentals` AS `r`
    WHERE NOT (`r`.`IsDeleted`) AND (`r`.`RenterId` = @__query_UserId_0)
    ORDER BY `r`.`CreatedAt` DESC
    LIMIT @__p_2 OFFSET @__p_1
) AS `r0`
INNER JOIN (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE NOT (`t`.`IsDeleted`)
) AS `t0` ON `r0`.`ToolId` = `t0`.`Id`
INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `r0`.`RenterId` = `a0`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `t0`.`Id` = `t2`.`ToolId`
ORDER BY `r0`.`CreatedAt` DESC, `r0`.`Id`, `t0`.`Id`, `a`.`Id`, `a0`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL4:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL4"}
[04:07:19 INF] Executed DbCommand (21ms) [Parameters=[@__query_UserId_0='?' (Size = 255), @__query_Status_Value_1='?' (Size = 20), @__p_3='?' (DbType = Int32), @__p_2='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `r0`.`Id`, `r0`.`ApprovedAt`, `r0`.`CancellationReason`, `r0`.`CancelledAt`, `r0`.`CreatedAt`, `r0`.`DepositAmount`, `r0`.`DisputeDeadline`, `r0`.`EndDate`, `r0`.`IsDeleted`, `r0`.`Notes`, `r0`.`OwnerId`, `r0`.`PickupDate`, `r0`.`RenterId`, `r0`.`ReturnConditionNotes`, `r0`.`ReturnDate`, `r0`.`ReturnedByUserId`, `r0`.`StartDate`, `r0`.`Status`, `r0`.`ToolId`, `r0`.`TotalCost`, `r0`.`UpdatedAt`, `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`
    FROM `Rentals` AS `r`
    WHERE (NOT (`r`.`IsDeleted`) AND (`r`.`RenterId` = @__query_UserId_0)) AND (`r`.`Status` = @__query_Status_Value_1)
    ORDER BY `r`.`CreatedAt` DESC
    LIMIT @__p_3 OFFSET @__p_2
) AS `r0`
INNER JOIN (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE NOT (`t`.`IsDeleted`)
) AS `t0` ON `r0`.`ToolId` = `t0`.`Id`
INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `r0`.`RenterId` = `a0`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `t0`.`Id` = `t2`.`ToolId`
ORDER BY `r0`.`CreatedAt` DESC, `r0`.`Id`, `t0`.`Id`, `a`.`Id`, `a0`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL2:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:19 INF] Executed DbCommand (52ms) [Parameters=[@__query_UserId_0='?' (Size = 255), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `s`.`Id`, `s`.`ApprovedAt`, `s`.`CancellationReason`, `s`.`CancelledAt`, `s`.`CreatedAt`, `s`.`DepositAmount`, `s`.`DisputeDeadline`, `s`.`EndDate`, `s`.`IsDeleted`, `s`.`Notes`, `s`.`OwnerId`, `s`.`PickupDate`, `s`.`RenterId`, `s`.`ReturnConditionNotes`, `s`.`ReturnDate`, `s`.`ReturnedByUserId`, `s`.`StartDate`, `s`.`Status`, `s`.`ToolId`, `s`.`TotalCost`, `s`.`UpdatedAt`, `s`.`Id0`, `s`.`Brand`, `s`.`Category`, `s`.`Condition`, `s`.`CreatedAt0`, `s`.`DailyRate`, `s`.`DepositRequired`, `s`.`Description`, `s`.`IsAvailable`, `s`.`IsDeleted0`, `s`.`LeadTimeHours`, `s`.`Location`, `s`.`Model`, `s`.`MonthlyRate`, `s`.`Name`, `s`.`OwnerId0`, `s`.`UpdatedAt0`, `s`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`, `t0`.`Id` AS `Id0`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt` AS `CreatedAt0`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted` AS `IsDeleted0`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId` AS `OwnerId0`, `t0`.`UpdatedAt` AS `UpdatedAt0`, `t0`.`WeeklyRate`
    FROM `Rentals` AS `r`
    INNER JOIN (
        SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
        FROM `Tools` AS `t`
        WHERE NOT (`t`.`IsDeleted`)
    ) AS `t0` ON `r`.`ToolId` = `t0`.`Id`
    WHERE NOT (`r`.`IsDeleted`) AND (`t0`.`OwnerId` = @__query_UserId_0)
    ORDER BY `r`.`CreatedAt` DESC
    LIMIT @__p_2 OFFSET @__p_1
) AS `s`
INNER JOIN `AspNetUsers` AS `a` ON `s`.`OwnerId0` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `s`.`RenterId` = `a0`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `s`.`Id0` = `t2`.`ToolId`
ORDER BY `s`.`CreatedAt` DESC, `s`.`Id`, `s`.`Id0`, `a`.`Id`, `a0`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL5:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL5"}
[04:07:19 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `t`.`RentalId`
FROM `Transactions` AS `t`
WHERE FALSE {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL2:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:19 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `t`.`RentalId`
FROM `Transactions` AS `t`
WHERE FALSE {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL5:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL5"}
[04:07:19 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Rentals.RentalDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL5:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL5"}
[04:07:19 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Rentals.RentalDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL2:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:19 INF] Executed action ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API) in 714.6134ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL5:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL5"}
[04:07:19 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL5:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL5"}
[04:07:19 INF] Executed action ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API) in 718.2299ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL2:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:19 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL2:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:19 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/rentals?type=owner - 200 null application/json; charset=utf-8 937.2676ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL5:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL5"}
[04:07:19 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=renter - 200 null application/json; charset=utf-8 937.6773ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL2:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:20 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?status=Overdue&type=owner - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL2:00000003", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:20 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL2:00000003", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:20 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?status=Overdue&type=owner - 204 null null 1.4ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL2:00000003", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:20 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=owner - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL2:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:20 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL2:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:20 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL2:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:20 INF] Route matched with {action = "GetRentals", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetRentals(ToolsSharing.Core.Features.Rentals.GetRentalsQuery) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL2:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:20 INF] Executed DbCommand (4ms) [Parameters=[@__query_UserId_0='?' (Size = 255), @__query_Status_Value_1='?' (Size = 20), @__p_3='?' (DbType = Int32), @__p_2='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `s`.`Id`, `s`.`ApprovedAt`, `s`.`CancellationReason`, `s`.`CancelledAt`, `s`.`CreatedAt`, `s`.`DepositAmount`, `s`.`DisputeDeadline`, `s`.`EndDate`, `s`.`IsDeleted`, `s`.`Notes`, `s`.`OwnerId`, `s`.`PickupDate`, `s`.`RenterId`, `s`.`ReturnConditionNotes`, `s`.`ReturnDate`, `s`.`ReturnedByUserId`, `s`.`StartDate`, `s`.`Status`, `s`.`ToolId`, `s`.`TotalCost`, `s`.`UpdatedAt`, `s`.`Id0`, `s`.`Brand`, `s`.`Category`, `s`.`Condition`, `s`.`CreatedAt0`, `s`.`DailyRate`, `s`.`DepositRequired`, `s`.`Description`, `s`.`IsAvailable`, `s`.`IsDeleted0`, `s`.`LeadTimeHours`, `s`.`Location`, `s`.`Model`, `s`.`MonthlyRate`, `s`.`Name`, `s`.`OwnerId0`, `s`.`UpdatedAt0`, `s`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`, `t0`.`Id` AS `Id0`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt` AS `CreatedAt0`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted` AS `IsDeleted0`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId` AS `OwnerId0`, `t0`.`UpdatedAt` AS `UpdatedAt0`, `t0`.`WeeklyRate`
    FROM `Rentals` AS `r`
    INNER JOIN (
        SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
        FROM `Tools` AS `t`
        WHERE NOT (`t`.`IsDeleted`)
    ) AS `t0` ON `r`.`ToolId` = `t0`.`Id`
    WHERE (NOT (`r`.`IsDeleted`) AND (`t0`.`OwnerId` = @__query_UserId_0)) AND (`r`.`Status` = @__query_Status_Value_1)
    ORDER BY `r`.`CreatedAt` DESC
    LIMIT @__p_3 OFFSET @__p_2
) AS `s`
INNER JOIN `AspNetUsers` AS `a` ON `s`.`OwnerId0` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `s`.`RenterId` = `a0`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `s`.`Id0` = `t2`.`ToolId`
ORDER BY `s`.`CreatedAt` DESC, `s`.`Id`, `s`.`Id0`, `a`.`Id`, `a0`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL2:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:20 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `t`.`RentalId`
FROM `Transactions` AS `t`
WHERE FALSE {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL2:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:20 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Rentals.RentalDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL2:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:20 INF] Executed action ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API) in 101.1009ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL2:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:20 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL2:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:20 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=owner - 200 null application/json; charset=utf-8 113.1249ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL2:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL2"}
[04:07:20 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `t`.`RentalId`
FROM `Transactions` AS `t`
WHERE NOT (`t`.`IsDeleted`) AND (`t`.`RentalId` IN ('2b2f4e9a-914b-450a-b1b8-be2e0e89d963', '5877392d-93e1-46fc-98be-d9a64cf5821b', '868a4dc1-da44-4bc9-883a-489a451c51d3', '5702c1a1-df37-4926-a7df-e0c13531cf81', '6a2f58b1-e359-4023-a8e6-f591d82f30e6', 'cdfa64c3-01b4-442d-a73e-3efb5caef8ae', '41f86621-fc14-45e5-b771-e8ade7d8ad98', '91d1fec5-a01c-4eb2-993e-80f7b973327c', '2177c5f7-587c-43ad-be5c-3f0362c81fbe', 'b7aa9054-b0b3-4f06-97e0-d96362f0296e') AND `t`.`Status` IN ('PaymentCompleted', 'PayoutPending', 'PayoutCompleted')) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL4:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL4"}
[04:07:20 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Rentals.RentalDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL4:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL4"}
[04:07:20 INF] Executed action ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API) in 1061.457ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL4:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL4"}
[04:07:20 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL4:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL4"}
[04:07:20 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/rentals?type=renter - 200 null application/json; charset=utf-8 1285.7697ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL4:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL4"}
[04:07:24 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000001", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL7:00000001", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel - 204 null null 9.5786ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000001", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Request starting HTTP/1.1 PATCH http://localhost:5002/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel - application/json; charset=utf-8 2 {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000002", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL7:00000002", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.CancelRental (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL7:00000002", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Route matched with {action = "CancelRental", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CancelRental(System.Guid, System.String) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "a73ce8ee-133f-48ba-874a-4c33f75a88c9", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CancelRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000002", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Executed DbCommand (7ms) [Parameters=[@__command_RentalId_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `s`.`Id`, `s`.`ApprovedAt`, `s`.`CancellationReason`, `s`.`CancelledAt`, `s`.`CreatedAt`, `s`.`DepositAmount`, `s`.`DisputeDeadline`, `s`.`EndDate`, `s`.`IsDeleted`, `s`.`Notes`, `s`.`OwnerId`, `s`.`PickupDate`, `s`.`RenterId`, `s`.`ReturnConditionNotes`, `s`.`ReturnDate`, `s`.`ReturnedByUserId`, `s`.`StartDate`, `s`.`Status`, `s`.`ToolId`, `s`.`TotalCost`, `s`.`UpdatedAt`, `s`.`Id0`, `s`.`Brand`, `s`.`Category`, `s`.`Condition`, `s`.`CreatedAt0`, `s`.`DailyRate`, `s`.`DepositRequired`, `s`.`Description`, `s`.`IsAvailable`, `s`.`IsDeleted0`, `s`.`LeadTimeHours`, `s`.`Location`, `s`.`Model`, `s`.`MonthlyRate`, `s`.`Name`, `s`.`OwnerId0`, `s`.`UpdatedAt0`, `s`.`WeeklyRate`, `s`.`Id1`, `s`.`AccessFailedCount`, `s`.`Address`, `s`.`AnonymizationDate`, `s`.`City`, `s`.`ConcurrencyStamp`, `s`.`Country`, `s`.`CreatedAt1`, `s`.`DataPortabilityRequested`, `s`.`DataProcessingConsent`, `s`.`DataRetentionDate`, `s`.`DateOfBirth`, `s`.`Email`, `s`.`EmailConfirmed`, `s`.`FirstName`, `s`.`GDPROptOut`, `s`.`IsDeleted1`, `s`.`LastConsentUpdate`, `s`.`LastName`, `s`.`LockoutEnabled`, `s`.`LockoutEnd`, `s`.`MarketingConsent`, `s`.`NormalizedEmail`, `s`.`NormalizedUserName`, `s`.`PasswordHash`, `s`.`PhoneNumber`, `s`.`PhoneNumberConfirmed`, `s`.`PostalCode`, `s`.`ProfilePictureUrl`, `s`.`PublicLocation`, `s`.`SecurityStamp`, `s`.`TermsAcceptedDate`, `s`.`TermsOfServiceAccepted`, `s`.`TermsVersion`, `s`.`TwoFactorEnabled`, `s`.`UpdatedAt1`, `s`.`UserName`, `s`.`Id2`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `s`.`AccessFailedCount0`, `s`.`Address0`, `s`.`AnonymizationDate0`, `s`.`City0`, `s`.`ConcurrencyStamp0`, `s`.`Country0`, `s`.`CreatedAt2`, `s`.`DataPortabilityRequested0`, `s`.`DataProcessingConsent0`, `s`.`DataRetentionDate0`, `s`.`DateOfBirth0`, `s`.`Email0`, `s`.`EmailConfirmed0`, `s`.`FirstName0`, `s`.`GDPROptOut0`, `s`.`IsDeleted2`, `s`.`LastConsentUpdate0`, `s`.`LastName0`, `s`.`LockoutEnabled0`, `s`.`LockoutEnd0`, `s`.`MarketingConsent0`, `s`.`NormalizedEmail0`, `s`.`NormalizedUserName0`, `s`.`PasswordHash0`, `s`.`PhoneNumber0`, `s`.`PhoneNumberConfirmed0`, `s`.`PostalCode0`, `s`.`ProfilePictureUrl0`, `s`.`PublicLocation0`, `s`.`SecurityStamp0`, `s`.`TermsAcceptedDate0`, `s`.`TermsOfServiceAccepted0`, `s`.`TermsVersion0`, `s`.`TwoFactorEnabled0`, `s`.`UpdatedAt2`, `s`.`UserName0`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`, `t0`.`Id` AS `Id0`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt` AS `CreatedAt0`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted` AS `IsDeleted0`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId` AS `OwnerId0`, `t0`.`UpdatedAt` AS `UpdatedAt0`, `t0`.`WeeklyRate`, `a`.`Id` AS `Id1`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt` AS `CreatedAt1`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted` AS `IsDeleted1`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt` AS `UpdatedAt1`, `a`.`UserName`, `a0`.`Id` AS `Id2`, `a0`.`AccessFailedCount` AS `AccessFailedCount0`, `a0`.`Address` AS `Address0`, `a0`.`AnonymizationDate` AS `AnonymizationDate0`, `a0`.`City` AS `City0`, `a0`.`ConcurrencyStamp` AS `ConcurrencyStamp0`, `a0`.`Country` AS `Country0`, `a0`.`CreatedAt` AS `CreatedAt2`, `a0`.`DataPortabilityRequested` AS `DataPortabilityRequested0`, `a0`.`DataProcessingConsent` AS `DataProcessingConsent0`, `a0`.`DataRetentionDate` AS `DataRetentionDate0`, `a0`.`DateOfBirth` AS `DateOfBirth0`, `a0`.`Email` AS `Email0`, `a0`.`EmailConfirmed` AS `EmailConfirmed0`, `a0`.`FirstName` AS `FirstName0`, `a0`.`GDPROptOut` AS `GDPROptOut0`, `a0`.`IsDeleted` AS `IsDeleted2`, `a0`.`LastConsentUpdate` AS `LastConsentUpdate0`, `a0`.`LastName` AS `LastName0`, `a0`.`LockoutEnabled` AS `LockoutEnabled0`, `a0`.`LockoutEnd` AS `LockoutEnd0`, `a0`.`MarketingConsent` AS `MarketingConsent0`, `a0`.`NormalizedEmail` AS `NormalizedEmail0`, `a0`.`NormalizedUserName` AS `NormalizedUserName0`, `a0`.`PasswordHash` AS `PasswordHash0`, `a0`.`PhoneNumber` AS `PhoneNumber0`, `a0`.`PhoneNumberConfirmed` AS `PhoneNumberConfirmed0`, `a0`.`PostalCode` AS `PostalCode0`, `a0`.`ProfilePictureUrl` AS `ProfilePictureUrl0`, `a0`.`PublicLocation` AS `PublicLocation0`, `a0`.`SecurityStamp` AS `SecurityStamp0`, `a0`.`TermsAcceptedDate` AS `TermsAcceptedDate0`, `a0`.`TermsOfServiceAccepted` AS `TermsOfServiceAccepted0`, `a0`.`TermsVersion` AS `TermsVersion0`, `a0`.`TwoFactorEnabled` AS `TwoFactorEnabled0`, `a0`.`UpdatedAt` AS `UpdatedAt2`, `a0`.`UserName` AS `UserName0`
    FROM `Rentals` AS `r`
    INNER JOIN (
        SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
        FROM `Tools` AS `t`
        WHERE NOT (`t`.`IsDeleted`)
    ) AS `t0` ON `r`.`ToolId` = `t0`.`Id`
    INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
    INNER JOIN `AspNetUsers` AS `a0` ON `r`.`RenterId` = `a0`.`Id`
    WHERE NOT (`r`.`IsDeleted`) AND (`r`.`Id` = @__command_RentalId_0)
    LIMIT 1
) AS `s`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `s`.`Id0` = `t2`.`ToolId`
ORDER BY `s`.`Id`, `s`.`Id0`, `s`.`Id1`, `s`.`Id2` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "a73ce8ee-133f-48ba-874a-4c33f75a88c9", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CancelRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000002", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Executed DbCommand (14ms) [Parameters=[@p4='?' (DbType = Guid), @p0='?' (Size = 4000), @p1='?' (DbType = DateTime), @p2='?' (Size = 20), @p3='?' (DbType = DateTime)], CommandType='Text', CommandTimeout='30']
SET AUTOCOMMIT = 1;
UPDATE `Rentals` SET `CancellationReason` = @p0, `CancelledAt` = @p1, `Status` = @p2, `UpdatedAt` = @p3
WHERE `Id` = @p4;
SELECT ROW_COUNT(); {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "a73ce8ee-133f-48ba-874a-4c33f75a88c9", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CancelRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000002", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Executed DbCommand (3ms) [Parameters=[@__userId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT `u`.`Id`, `u`.`AllowDirectMessages`, `u`.`AllowRentalInquiries`, `u`.`AutoApproveRentals`, `u`.`CreatedAt`, `u`.`Currency`, `u`.`DefaultDepositPercentage`, `u`.`EmailMarketing`, `u`.`EmailMessages`, `u`.`EmailRentalRequests`, `u`.`EmailRentalUpdates`, `u`.`EmailSecurityAlerts`, `u`.`IsDeleted`, `u`.`Language`, `u`.`LoginAlertsEnabled`, `u`.`PushMessages`, `u`.`PushReminders`, `u`.`PushRentalRequests`, `u`.`PushRentalUpdates`, `u`.`RentalLeadTime`, `u`.`RequireDeposit`, `u`.`SessionTimeoutMinutes`, `u`.`ShowEmail`, `u`.`ShowLocation`, `u`.`ShowOnlineStatus`, `u`.`ShowPhoneNumber`, `u`.`ShowProfilePicture`, `u`.`ShowRealName`, `u`.`ShowStatistics`, `u`.`Theme`, `u`.`TimeZone`, `u`.`TwoFactorEnabled`, `u`.`UpdatedAt`, `u`.`UserId`
FROM `UserSettings` AS `u`
WHERE NOT (`u`.`IsDeleted`) AND (`u`.`UserId` = @__userId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "a73ce8ee-133f-48ba-874a-4c33f75a88c9", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CancelRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000002", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 WRN] Email sending skipped - SMTP not configured. Subject: Rental request for Circular Saw was not approved, To: john.doe@email.com {"SourceContext": "ToolsSharing.Infrastructure.Services.EmailNotificationService", "ActionId": "a73ce8ee-133f-48ba-874a-4c33f75a88c9", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CancelRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000002", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Email notification sent to john.doe@email.com with subject Rental request for Circular Saw was not approved {"SourceContext": "ToolsSharing.Infrastructure.Services.EmailNotificationService", "ActionId": "a73ce8ee-133f-48ba-874a-4c33f75a88c9", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CancelRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000002", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "a73ce8ee-133f-48ba-874a-4c33f75a88c9", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CancelRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000002", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Executed action ToolsSharing.API.Controllers.RentalsController.CancelRental (ToolsSharing.API) in 376.355ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL7:00000002", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.CancelRental (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL7:00000002", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Request finished HTTP/1.1 PATCH http://localhost:5002/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel - 200 null application/json; charset=utf-8 409.753ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000002", "RequestPath": "/api/rentals/2b2f4e9a-914b-450a-b1b8-be2e0e89d963/cancel", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?type=renter - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000003", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL7:00000003", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?type=renter - 204 null null 1.2946ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000003", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/rentals?type=renter - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL7:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL7:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Route matched with {action = "GetRentals", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetRentals(ToolsSharing.Core.Features.Rentals.GetRentalsQuery) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Executed DbCommand (4ms) [Parameters=[@__query_UserId_0='?' (Size = 255), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `r0`.`Id`, `r0`.`ApprovedAt`, `r0`.`CancellationReason`, `r0`.`CancelledAt`, `r0`.`CreatedAt`, `r0`.`DepositAmount`, `r0`.`DisputeDeadline`, `r0`.`EndDate`, `r0`.`IsDeleted`, `r0`.`Notes`, `r0`.`OwnerId`, `r0`.`PickupDate`, `r0`.`RenterId`, `r0`.`ReturnConditionNotes`, `r0`.`ReturnDate`, `r0`.`ReturnedByUserId`, `r0`.`StartDate`, `r0`.`Status`, `r0`.`ToolId`, `r0`.`TotalCost`, `r0`.`UpdatedAt`, `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`
    FROM `Rentals` AS `r`
    WHERE NOT (`r`.`IsDeleted`) AND (`r`.`RenterId` = @__query_UserId_0)
    ORDER BY `r`.`CreatedAt` DESC
    LIMIT @__p_2 OFFSET @__p_1
) AS `r0`
INNER JOIN (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE NOT (`t`.`IsDeleted`)
) AS `t0` ON `r0`.`ToolId` = `t0`.`Id`
INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `r0`.`RenterId` = `a0`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `t0`.`Id` = `t2`.`ToolId`
ORDER BY `r0`.`CreatedAt` DESC, `r0`.`Id`, `t0`.`Id`, `a`.`Id`, `a0`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `t`.`RentalId`
FROM `Transactions` AS `t`
WHERE NOT (`t`.`IsDeleted`) AND (`t`.`RentalId` IN ('2b2f4e9a-914b-450a-b1b8-be2e0e89d963', '5877392d-93e1-46fc-98be-d9a64cf5821b', '868a4dc1-da44-4bc9-883a-489a451c51d3', '5702c1a1-df37-4926-a7df-e0c13531cf81', '6a2f58b1-e359-4023-a8e6-f591d82f30e6', 'cdfa64c3-01b4-442d-a73e-3efb5caef8ae', '41f86621-fc14-45e5-b771-e8ade7d8ad98', '91d1fec5-a01c-4eb2-993e-80f7b973327c', '2177c5f7-587c-43ad-be5c-3f0362c81fbe', 'b7aa9054-b0b3-4f06-97e0-d96362f0296e') AND `t`.`Status` IN ('PaymentCompleted', 'PayoutPending', 'PayoutCompleted')) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Rentals.RentalDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Executed action ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API) in 34.7663ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL7:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL7:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:24 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/rentals?type=renter - 200 null application/json; charset=utf-8 39.7188ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:27 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/tools/my-tools - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000005", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:27 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL7:00000005", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:27 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/tools/my-tools - 204 null null 2.8619ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000005", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:27 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/tools/my-tools - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000006", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:27 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL7:00000006", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:27 INF] Executing endpoint 'ToolsSharing.API.Controllers.ToolsController.GetMyTools (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL7:00000006", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:27 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/messages/unread-count - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL8:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/messages/unread-count - 204 null null 1.5873ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/messages/unread-count - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL8:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executing endpoint 'ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Route matched with {action = "GetUnreadCount", controller = "Messages"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetUnreadCount() on controller ToolsSharing.API.Controllers.MessagesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Route matched with {action = "GetMyTools", controller = "Tools"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetMyTools(ToolsSharing.Core.Features.Tools.GetToolsQuery) on controller ToolsSharing.API.Controllers.ToolsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "15752063-8f80-426a-8024-9c6591d897c6", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetMyTools (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000006", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:27 INF] Executed DbCommand (3ms) [Parameters=[@__query_UserId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT COUNT(*)
FROM `Messages` AS `m`
WHERE NOT (`m`.`IsDeleted`) AND ((((`m`.`RecipientId` = @__query_UserId_0) AND NOT (`m`.`IsRead`)) AND NOT (`m`.`IsDeleted`)) AND NOT (`m`.`IsBlocked`)) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executed action ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API) in 26.0295ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL8:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executed endpoint 'ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/messages/unread-count - 200 null application/json; charset=utf-8 30.2979ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?status=Overdue&type=renter - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000003", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL8:00000003", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?status=Overdue&type=renter - 204 null null 3.8506ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000003", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=renter - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL8:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Route matched with {action = "GetRentals", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetRentals(ToolsSharing.Core.Features.Rentals.GetRentalsQuery) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executed DbCommand (6ms) [Parameters=[@__query_UserId_0='?' (Size = 255), @__query_Status_Value_1='?' (Size = 20), @__p_3='?' (DbType = Int32), @__p_2='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `r0`.`Id`, `r0`.`ApprovedAt`, `r0`.`CancellationReason`, `r0`.`CancelledAt`, `r0`.`CreatedAt`, `r0`.`DepositAmount`, `r0`.`DisputeDeadline`, `r0`.`EndDate`, `r0`.`IsDeleted`, `r0`.`Notes`, `r0`.`OwnerId`, `r0`.`PickupDate`, `r0`.`RenterId`, `r0`.`ReturnConditionNotes`, `r0`.`ReturnDate`, `r0`.`ReturnedByUserId`, `r0`.`StartDate`, `r0`.`Status`, `r0`.`ToolId`, `r0`.`TotalCost`, `r0`.`UpdatedAt`, `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`
    FROM `Rentals` AS `r`
    WHERE (NOT (`r`.`IsDeleted`) AND (`r`.`RenterId` = @__query_UserId_0)) AND (`r`.`Status` = @__query_Status_Value_1)
    ORDER BY `r`.`CreatedAt` DESC
    LIMIT @__p_3 OFFSET @__p_2
) AS `r0`
INNER JOIN (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE NOT (`t`.`IsDeleted`)
) AS `t0` ON `r0`.`ToolId` = `t0`.`Id`
INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `r0`.`RenterId` = `a0`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `t0`.`Id` = `t2`.`ToolId`
ORDER BY `r0`.`CreatedAt` DESC, `r0`.`Id`, `t0`.`Id`, `a`.`Id`, `a0`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `t`.`RentalId`
FROM `Transactions` AS `t`
WHERE FALSE {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Rentals.RentalDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executed action ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API) in 40.799ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL8:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=renter - 200 null application/json; charset=utf-8 47.7132ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000004", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?status=Overdue&type=owner - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000005", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL8:00000005", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executed DbCommand (25ms) [Parameters=[@__userId_0='?' (Size = 255), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`
FROM (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE (NOT (`t`.`IsDeleted`) AND (NOT (`t`.`IsDeleted`) AND (`t`.`OwnerId` = @__userId_0))) AND `t`.`IsAvailable`
    ORDER BY `t`.`Name`
    LIMIT @__p_2 OFFSET @__p_1
) AS `t0`
INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `t0`.`Id` = `t2`.`ToolId`
ORDER BY `t0`.`Name`, `t0`.`Id`, `a`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "15752063-8f80-426a-8024-9c6591d897c6", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetMyTools (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000006", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:27 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?status=Overdue&type=owner - 204 null null 1.2646ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000005", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=owner - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL8:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Route matched with {action = "GetRentals", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetRentals(ToolsSharing.Core.Features.Rentals.GetRentalsQuery) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Tools.ToolDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "15752063-8f80-426a-8024-9c6591d897c6", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetMyTools (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000006", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:27 INF] Executed action ToolsSharing.API.Controllers.ToolsController.GetMyTools (ToolsSharing.API) in 152.6015ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL7:00000006", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:27 INF] Executed endpoint 'ToolsSharing.API.Controllers.ToolsController.GetMyTools (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL7:00000006", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:27 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/tools/my-tools - 200 null application/json; charset=utf-8 173.6623ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000006", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:27 INF] Executed DbCommand (18ms) [Parameters=[@__query_UserId_0='?' (Size = 255), @__query_Status_Value_1='?' (Size = 20), @__p_3='?' (DbType = Int32), @__p_2='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `s`.`Id`, `s`.`ApprovedAt`, `s`.`CancellationReason`, `s`.`CancelledAt`, `s`.`CreatedAt`, `s`.`DepositAmount`, `s`.`DisputeDeadline`, `s`.`EndDate`, `s`.`IsDeleted`, `s`.`Notes`, `s`.`OwnerId`, `s`.`PickupDate`, `s`.`RenterId`, `s`.`ReturnConditionNotes`, `s`.`ReturnDate`, `s`.`ReturnedByUserId`, `s`.`StartDate`, `s`.`Status`, `s`.`ToolId`, `s`.`TotalCost`, `s`.`UpdatedAt`, `s`.`Id0`, `s`.`Brand`, `s`.`Category`, `s`.`Condition`, `s`.`CreatedAt0`, `s`.`DailyRate`, `s`.`DepositRequired`, `s`.`Description`, `s`.`IsAvailable`, `s`.`IsDeleted0`, `s`.`LeadTimeHours`, `s`.`Location`, `s`.`Model`, `s`.`MonthlyRate`, `s`.`Name`, `s`.`OwnerId0`, `s`.`UpdatedAt0`, `s`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`, `t0`.`Id` AS `Id0`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt` AS `CreatedAt0`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted` AS `IsDeleted0`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId` AS `OwnerId0`, `t0`.`UpdatedAt` AS `UpdatedAt0`, `t0`.`WeeklyRate`
    FROM `Rentals` AS `r`
    INNER JOIN (
        SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
        FROM `Tools` AS `t`
        WHERE NOT (`t`.`IsDeleted`)
    ) AS `t0` ON `r`.`ToolId` = `t0`.`Id`
    WHERE (NOT (`r`.`IsDeleted`) AND (`t0`.`OwnerId` = @__query_UserId_0)) AND (`r`.`Status` = @__query_Status_Value_1)
    ORDER BY `r`.`CreatedAt` DESC
    LIMIT @__p_3 OFFSET @__p_2
) AS `s`
INNER JOIN `AspNetUsers` AS `a` ON `s`.`OwnerId0` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `s`.`RenterId` = `a0`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `s`.`Id0` = `t2`.`ToolId`
ORDER BY `s`.`CreatedAt` DESC, `s`.`Id`, `s`.`Id0`, `a`.`Id`, `a0`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `t`.`RentalId`
FROM `Transactions` AS `t`
WHERE FALSE {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Rentals.RentalDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executed action ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API) in 43.3262ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL8:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:27 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=owner - 200 null application/json; charset=utf-8 49.4916ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/rentals?type=renter - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL8:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Route matched with {action = "GetRentals", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetRentals(ToolsSharing.Core.Features.Rentals.GetRentalsQuery) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?type=owner - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:29 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL7:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:29 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?type=owner - 204 null null 1.0937ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:29 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/rentals?type=owner - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:29 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL7:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:29 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL7:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:29 INF] Route matched with {action = "GetRentals", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetRentals(ToolsSharing.Core.Features.Rentals.GetRentalsQuery) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:29 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/messages/unread-count - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL9:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:29 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL9:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:29 INF] Executing endpoint 'ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL9:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:29 INF] Route matched with {action = "GetUnreadCount", controller = "Messages"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetUnreadCount() on controller ToolsSharing.API.Controllers.MessagesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL9:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:29 INF] Executed DbCommand (3ms) [Parameters=[@__query_UserId_0='?' (Size = 255), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `r0`.`Id`, `r0`.`ApprovedAt`, `r0`.`CancellationReason`, `r0`.`CancelledAt`, `r0`.`CreatedAt`, `r0`.`DepositAmount`, `r0`.`DisputeDeadline`, `r0`.`EndDate`, `r0`.`IsDeleted`, `r0`.`Notes`, `r0`.`OwnerId`, `r0`.`PickupDate`, `r0`.`RenterId`, `r0`.`ReturnConditionNotes`, `r0`.`ReturnDate`, `r0`.`ReturnedByUserId`, `r0`.`StartDate`, `r0`.`Status`, `r0`.`ToolId`, `r0`.`TotalCost`, `r0`.`UpdatedAt`, `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`
    FROM `Rentals` AS `r`
    WHERE NOT (`r`.`IsDeleted`) AND (`r`.`RenterId` = @__query_UserId_0)
    ORDER BY `r`.`CreatedAt` DESC
    LIMIT @__p_2 OFFSET @__p_1
) AS `r0`
INNER JOIN (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE NOT (`t`.`IsDeleted`)
) AS `t0` ON `r0`.`ToolId` = `t0`.`Id`
INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `r0`.`RenterId` = `a0`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `t0`.`Id` = `t2`.`ToolId`
ORDER BY `r0`.`CreatedAt` DESC, `r0`.`Id`, `t0`.`Id`, `a`.`Id`, `a0`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `t`.`RentalId`
FROM `Transactions` AS `t`
WHERE NOT (`t`.`IsDeleted`) AND (`t`.`RentalId` IN ('2b2f4e9a-914b-450a-b1b8-be2e0e89d963', '5877392d-93e1-46fc-98be-d9a64cf5821b', '868a4dc1-da44-4bc9-883a-489a451c51d3', '5702c1a1-df37-4926-a7df-e0c13531cf81', '6a2f58b1-e359-4023-a8e6-f591d82f30e6', 'cdfa64c3-01b4-442d-a73e-3efb5caef8ae', '41f86621-fc14-45e5-b771-e8ade7d8ad98', '91d1fec5-a01c-4eb2-993e-80f7b973327c', '2177c5f7-587c-43ad-be5c-3f0362c81fbe', 'b7aa9054-b0b3-4f06-97e0-d96362f0296e') AND `t`.`Status` IN ('PaymentCompleted', 'PayoutPending', 'PayoutCompleted')) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executed DbCommand (3ms) [Parameters=[@__query_UserId_0='?' (Size = 255), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `s`.`Id`, `s`.`ApprovedAt`, `s`.`CancellationReason`, `s`.`CancelledAt`, `s`.`CreatedAt`, `s`.`DepositAmount`, `s`.`DisputeDeadline`, `s`.`EndDate`, `s`.`IsDeleted`, `s`.`Notes`, `s`.`OwnerId`, `s`.`PickupDate`, `s`.`RenterId`, `s`.`ReturnConditionNotes`, `s`.`ReturnDate`, `s`.`ReturnedByUserId`, `s`.`StartDate`, `s`.`Status`, `s`.`ToolId`, `s`.`TotalCost`, `s`.`UpdatedAt`, `s`.`Id0`, `s`.`Brand`, `s`.`Category`, `s`.`Condition`, `s`.`CreatedAt0`, `s`.`DailyRate`, `s`.`DepositRequired`, `s`.`Description`, `s`.`IsAvailable`, `s`.`IsDeleted0`, `s`.`LeadTimeHours`, `s`.`Location`, `s`.`Model`, `s`.`MonthlyRate`, `s`.`Name`, `s`.`OwnerId0`, `s`.`UpdatedAt0`, `s`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`, `t0`.`Id` AS `Id0`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt` AS `CreatedAt0`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted` AS `IsDeleted0`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId` AS `OwnerId0`, `t0`.`UpdatedAt` AS `UpdatedAt0`, `t0`.`WeeklyRate`
    FROM `Rentals` AS `r`
    INNER JOIN (
        SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
        FROM `Tools` AS `t`
        WHERE NOT (`t`.`IsDeleted`)
    ) AS `t0` ON `r`.`ToolId` = `t0`.`Id`
    WHERE NOT (`r`.`IsDeleted`) AND (`t0`.`OwnerId` = @__query_UserId_0)
    ORDER BY `r`.`CreatedAt` DESC
    LIMIT @__p_2 OFFSET @__p_1
) AS `s`
INNER JOIN `AspNetUsers` AS `a` ON `s`.`OwnerId0` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `s`.`RenterId` = `a0`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `s`.`Id0` = `t2`.`ToolId`
ORDER BY `s`.`CreatedAt` DESC, `s`.`Id`, `s`.`Id0`, `a`.`Id`, `a0`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:29 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Rentals.RentalDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executed action ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API) in 28.5313ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL8:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/rentals?type=renter - 200 null application/json; charset=utf-8 32.2595ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `t`.`RentalId`
FROM `Transactions` AS `t`
WHERE FALSE {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:29 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Rentals.RentalDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:29 INF] Executed action ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API) in 24.866ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL7:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:29 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=renter - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL8:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL7:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:29 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Route matched with {action = "GetRentals", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetRentals(ToolsSharing.Core.Features.Rentals.GetRentalsQuery) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/rentals?type=owner - 200 null application/json; charset=utf-8 33.4406ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:29 INF] Executed DbCommand (2ms) [Parameters=[@__query_UserId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT COUNT(*)
FROM `Messages` AS `m`
WHERE NOT (`m`.`IsDeleted`) AND ((((`m`.`RecipientId` = @__query_UserId_0) AND NOT (`m`.`IsRead`)) AND NOT (`m`.`IsDeleted`)) AND NOT (`m`.`IsBlocked`)) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL9:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:29 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL9:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:29 INF] Executed action ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API) in 47.314ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL9:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:29 INF] Executed endpoint 'ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL9:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:29 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/messages/unread-count - 200 null application/json; charset=utf-8 59.621ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL9:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:29 INF] Executed DbCommand (4ms) [Parameters=[@__query_UserId_0='?' (Size = 255), @__query_Status_Value_1='?' (Size = 20), @__p_3='?' (DbType = Int32), @__p_2='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `r0`.`Id`, `r0`.`ApprovedAt`, `r0`.`CancellationReason`, `r0`.`CancelledAt`, `r0`.`CreatedAt`, `r0`.`DepositAmount`, `r0`.`DisputeDeadline`, `r0`.`EndDate`, `r0`.`IsDeleted`, `r0`.`Notes`, `r0`.`OwnerId`, `r0`.`PickupDate`, `r0`.`RenterId`, `r0`.`ReturnConditionNotes`, `r0`.`ReturnDate`, `r0`.`ReturnedByUserId`, `r0`.`StartDate`, `r0`.`Status`, `r0`.`ToolId`, `r0`.`TotalCost`, `r0`.`UpdatedAt`, `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`
    FROM `Rentals` AS `r`
    WHERE (NOT (`r`.`IsDeleted`) AND (`r`.`RenterId` = @__query_UserId_0)) AND (`r`.`Status` = @__query_Status_Value_1)
    ORDER BY `r`.`CreatedAt` DESC
    LIMIT @__p_3 OFFSET @__p_2
) AS `r0`
INNER JOIN (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE NOT (`t`.`IsDeleted`)
) AS `t0` ON `r0`.`ToolId` = `t0`.`Id`
INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `r0`.`RenterId` = `a0`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `t0`.`Id` = `t2`.`ToolId`
ORDER BY `r0`.`CreatedAt` DESC, `r0`.`Id`, `t0`.`Id`, `a`.`Id`, `a0`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `t`.`RentalId`
FROM `Transactions` AS `t`
WHERE FALSE {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Rentals.RentalDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executed action ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API) in 90.8532ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL8:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=renter - 200 null application/json; charset=utf-8 97.3977ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=owner - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000009", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL8:00000009", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:00000009", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Route matched with {action = "GetRentals", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetRentals(ToolsSharing.Core.Features.Rentals.GetRentalsQuery) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000009", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executed DbCommand (3ms) [Parameters=[@__query_UserId_0='?' (Size = 255), @__query_Status_Value_1='?' (Size = 20), @__p_3='?' (DbType = Int32), @__p_2='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `s`.`Id`, `s`.`ApprovedAt`, `s`.`CancellationReason`, `s`.`CancelledAt`, `s`.`CreatedAt`, `s`.`DepositAmount`, `s`.`DisputeDeadline`, `s`.`EndDate`, `s`.`IsDeleted`, `s`.`Notes`, `s`.`OwnerId`, `s`.`PickupDate`, `s`.`RenterId`, `s`.`ReturnConditionNotes`, `s`.`ReturnDate`, `s`.`ReturnedByUserId`, `s`.`StartDate`, `s`.`Status`, `s`.`ToolId`, `s`.`TotalCost`, `s`.`UpdatedAt`, `s`.`Id0`, `s`.`Brand`, `s`.`Category`, `s`.`Condition`, `s`.`CreatedAt0`, `s`.`DailyRate`, `s`.`DepositRequired`, `s`.`Description`, `s`.`IsAvailable`, `s`.`IsDeleted0`, `s`.`LeadTimeHours`, `s`.`Location`, `s`.`Model`, `s`.`MonthlyRate`, `s`.`Name`, `s`.`OwnerId0`, `s`.`UpdatedAt0`, `s`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`, `t0`.`Id` AS `Id0`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt` AS `CreatedAt0`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted` AS `IsDeleted0`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId` AS `OwnerId0`, `t0`.`UpdatedAt` AS `UpdatedAt0`, `t0`.`WeeklyRate`
    FROM `Rentals` AS `r`
    INNER JOIN (
        SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
        FROM `Tools` AS `t`
        WHERE NOT (`t`.`IsDeleted`)
    ) AS `t0` ON `r`.`ToolId` = `t0`.`Id`
    WHERE (NOT (`r`.`IsDeleted`) AND (`t0`.`OwnerId` = @__query_UserId_0)) AND (`r`.`Status` = @__query_Status_Value_1)
    ORDER BY `r`.`CreatedAt` DESC
    LIMIT @__p_3 OFFSET @__p_2
) AS `s`
INNER JOIN `AspNetUsers` AS `a` ON `s`.`OwnerId0` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `s`.`RenterId` = `a0`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `s`.`Id0` = `t2`.`ToolId`
ORDER BY `s`.`CreatedAt` DESC, `s`.`Id`, `s`.`Id0`, `a`.`Id`, `a0`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000009", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `t`.`RentalId`
FROM `Transactions` AS `t`
WHERE FALSE {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000009", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Rentals.RentalDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:00000009", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executed action ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API) in 32.1128ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL8:00000009", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:00000009", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:29 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=owner - 200 null application/json; charset=utf-8 37.3611ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:00000009", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/tools - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:0000000A", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL8:0000000A", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/tools - 204 null null 1.1662ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:0000000A", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/tools - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:0000000B", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL8:0000000B", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/messages/unread-count - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL9:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Executing endpoint 'ToolsSharing.API.Controllers.ToolsController.GetTools (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:0000000B", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL9:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Executing endpoint 'ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL9:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Route matched with {action = "GetUnreadCount", controller = "Messages"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetUnreadCount() on controller ToolsSharing.API.Controllers.MessagesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL9:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Route matched with {action = "GetTools", controller = "Tools"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetTools(ToolsSharing.Core.Features.Tools.GetToolsQuery) on controller ToolsSharing.API.Controllers.ToolsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "1f7c9536-72d1-4a2d-84bc-82a4693a5101", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetTools (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:0000000B", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Executed DbCommand (2ms) [Parameters=[@__query_UserId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT COUNT(*)
FROM `Messages` AS `m`
WHERE NOT (`m`.`IsDeleted`) AND ((((`m`.`RecipientId` = @__query_UserId_0) AND NOT (`m`.`IsRead`)) AND NOT (`m`.`IsDeleted`)) AND NOT (`m`.`IsBlocked`)) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL9:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL9:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Executed action ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API) in 25.9114ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL9:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Executed endpoint 'ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL9:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/messages/unread-count - 200 null application/json; charset=utf-8 29.9005ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL9:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`
FROM (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE NOT (`t`.`IsDeleted`) AND `t`.`IsAvailable`
    ORDER BY `t`.`Name`
    LIMIT @__p_1 OFFSET @__p_0
) AS `t0`
INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `t0`.`Id` = `t2`.`ToolId`
ORDER BY `t0`.`Name`, `t0`.`Id`, `a`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "1f7c9536-72d1-4a2d-84bc-82a4693a5101", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetTools (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:0000000B", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Tools.ToolDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "1f7c9536-72d1-4a2d-84bc-82a4693a5101", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetTools (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:0000000B", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Executed action ToolsSharing.API.Controllers.ToolsController.GetTools (ToolsSharing.API) in 110.9449ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL8:0000000B", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Executed endpoint 'ToolsSharing.API.Controllers.ToolsController.GetTools (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:0000000B", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/tools - 200 null application/json; charset=utf-8 127.1879ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:0000000B", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000002 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:0000000C", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL8:0000000C", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000002 - 204 null null 1.8665ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:0000000C", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000002 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:0000000D", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000003 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL9:00000003", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL8:0000000D", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL9:00000003", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000003 - 204 null null 1.2893ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL9:00000003", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Executing endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:0000000D", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000003 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL9:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL9:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Executing endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL9:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000004 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000009", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL7:00000009", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000004 - 204 null null 1.3979ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:00000009", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Route matched with {action = "CheckFavoriteStatus", controller = "Favorites"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CheckFavoriteStatus(System.Guid) on controller ToolsSharing.API.Controllers.FavoritesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:0000000D", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000004 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:0000000A", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL7:0000000A", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Route matched with {action = "CheckFavoriteStatus", controller = "Favorites"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CheckFavoriteStatus(System.Guid) on controller ToolsSharing.API.Controllers.FavoritesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL9:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Executing endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL7:0000000A", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Route matched with {action = "CheckFavoriteStatus", controller = "Favorites"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CheckFavoriteStatus(System.Guid) on controller ToolsSharing.API.Controllers.FavoritesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:0000000A", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000001 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLA:00000001", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLA:00000001", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000001 - 204 null null 0.7971ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLA:00000001", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000001 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLA:00000002", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLA:00000002", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Executing endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLA:00000002", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Route matched with {action = "CheckFavoriteStatus", controller = "Favorites"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CheckFavoriteStatus(System.Guid) on controller ToolsSharing.API.Controllers.FavoritesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLA:00000002", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Executed DbCommand (3ms) [Parameters=[@__userId_0='?' (Size = 450), @__toolId_1='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `f`.`Id`, `f`.`CreatedAt`, `f`.`IsDeleted`, `f`.`ToolId`, `f`.`UpdatedAt`, `f`.`UserId`
FROM `Favorites` AS `f`
WHERE NOT (`f`.`IsDeleted`) AND ((`f`.`UserId` = @__userId_0) AND (`f`.`ToolId` = @__toolId_1))
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLA:00000002", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Executed DbCommand (5ms) [Parameters=[@__userId_0='?' (Size = 450), @__toolId_1='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `f`.`Id`, `f`.`CreatedAt`, `f`.`IsDeleted`, `f`.`ToolId`, `f`.`UpdatedAt`, `f`.`UserId`
FROM `Favorites` AS `f`
WHERE NOT (`f`.`IsDeleted`) AND ((`f`.`UserId` = @__userId_0) AND (`f`.`ToolId` = @__toolId_1))
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:0000000D", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.DTOs.FavoriteStatusDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLA:00000002", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Executed DbCommand (6ms) [Parameters=[@__userId_0='?' (Size = 450), @__toolId_1='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `f`.`Id`, `f`.`CreatedAt`, `f`.`IsDeleted`, `f`.`ToolId`, `f`.`UpdatedAt`, `f`.`UserId`
FROM `Favorites` AS `f`
WHERE NOT (`f`.`IsDeleted`) AND ((`f`.`UserId` = @__userId_0) AND (`f`.`ToolId` = @__toolId_1))
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:0000000A", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.DTOs.FavoriteStatusDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:0000000D", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.DTOs.FavoriteStatusDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:0000000A", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Executed DbCommand (2ms) [Parameters=[@__userId_0='?' (Size = 450), @__toolId_1='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `f`.`Id`, `f`.`CreatedAt`, `f`.`IsDeleted`, `f`.`ToolId`, `f`.`UpdatedAt`, `f`.`UserId`
FROM `Favorites` AS `f`
WHERE NOT (`f`.`IsDeleted`) AND ((`f`.`UserId` = @__userId_0) AND (`f`.`ToolId` = @__toolId_1))
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL9:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.DTOs.FavoriteStatusDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL9:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Executed action ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API) in 65.2272ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL8:0000000D", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Executed action ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API) in 46.4656ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLA:00000002", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Executed action ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API) in 60.0279ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL7:0000000A", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Executed action ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API) in 61.0686ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL9:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Executed endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:0000000D", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Executed endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLA:00000002", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Executed endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL7:0000000A", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000001 - 200 null application/json; charset=utf-8 51.7219ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLA:00000002", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000002 - 200 null application/json; charset=utf-8 83.4203ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:0000000D", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000004 - 200 null application/json; charset=utf-8 65.4984ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:0000000A", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Executed endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL9:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000003 - 200 null application/json; charset=utf-8 77.274ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL9:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCL9"}
[04:07:32 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000004 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:0000000B", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL7:0000000B", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Executing endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL7:0000000B", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Route matched with {action = "CheckFavoriteStatus", controller = "Favorites"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CheckFavoriteStatus(System.Guid) on controller ToolsSharing.API.Controllers.FavoritesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:0000000B", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000001 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:0000000E", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL8:0000000E", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Executing endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:0000000E", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Route matched with {action = "CheckFavoriteStatus", controller = "Favorites"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CheckFavoriteStatus(System.Guid) on controller ToolsSharing.API.Controllers.FavoritesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:0000000E", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000003 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLA:00000003", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLA:00000003", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Executing endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLA:00000003", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Executed DbCommand (3ms) [Parameters=[@__userId_0='?' (Size = 450), @__toolId_1='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `f`.`Id`, `f`.`CreatedAt`, `f`.`IsDeleted`, `f`.`ToolId`, `f`.`UpdatedAt`, `f`.`UserId`
FROM `Favorites` AS `f`
WHERE NOT (`f`.`IsDeleted`) AND ((`f`.`UserId` = @__userId_0) AND (`f`.`ToolId` = @__toolId_1))
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:0000000B", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Route matched with {action = "CheckFavoriteStatus", controller = "Favorites"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CheckFavoriteStatus(System.Guid) on controller ToolsSharing.API.Controllers.FavoritesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLA:00000003", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.DTOs.FavoriteStatusDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:0000000B", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Executed action ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API) in 24.5047ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL7:0000000B", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Executed endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL7:0000000B", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000004 - 200 null application/json; charset=utf-8 28.5758ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:0000000B", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000004", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000002 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:0000000C", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCL7:0000000C", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Executing endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL7:0000000C", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Route matched with {action = "CheckFavoriteStatus", controller = "Favorites"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CheckFavoriteStatus(System.Guid) on controller ToolsSharing.API.Controllers.FavoritesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:0000000C", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Executed DbCommand (7ms) [Parameters=[@__userId_0='?' (Size = 450), @__toolId_1='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `f`.`Id`, `f`.`CreatedAt`, `f`.`IsDeleted`, `f`.`ToolId`, `f`.`UpdatedAt`, `f`.`UserId`
FROM `Favorites` AS `f`
WHERE NOT (`f`.`IsDeleted`) AND ((`f`.`UserId` = @__userId_0) AND (`f`.`ToolId` = @__toolId_1))
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:0000000E", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.DTOs.FavoriteStatusDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL8:0000000E", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Executed action ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API) in 32.3277ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL8:0000000E", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Executed endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL8:0000000E", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000001 - 200 null application/json; charset=utf-8 35.1511ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL8:0000000E", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000001", "ConnectionId": "0HNE7UBO8SCL8"}
[04:07:32 INF] Executed DbCommand (1ms) [Parameters=[@__userId_0='?' (Size = 450), @__toolId_1='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `f`.`Id`, `f`.`CreatedAt`, `f`.`IsDeleted`, `f`.`ToolId`, `f`.`UpdatedAt`, `f`.`UserId`
FROM `Favorites` AS `f`
WHERE NOT (`f`.`IsDeleted`) AND ((`f`.`UserId` = @__userId_0) AND (`f`.`ToolId` = @__toolId_1))
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLA:00000003", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.DTOs.FavoriteStatusDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLA:00000003", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Executed action ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API) in 34.853ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLA:00000003", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Executed endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLA:00000003", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000003 - 200 null application/json; charset=utf-8 41.0338ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLA:00000003", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000003", "ConnectionId": "0HNE7UBO8SCLA"}
[04:07:32 INF] Executed DbCommand (2ms) [Parameters=[@__userId_0='?' (Size = 450), @__toolId_1='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `f`.`Id`, `f`.`CreatedAt`, `f`.`IsDeleted`, `f`.`ToolId`, `f`.`UpdatedAt`, `f`.`UserId`
FROM `Favorites` AS `f`
WHERE NOT (`f`.`IsDeleted`) AND ((`f`.`UserId` = @__userId_0) AND (`f`.`ToolId` = @__toolId_1))
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:0000000C", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.DTOs.FavoriteStatusDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCL7:0000000C", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Executed action ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API) in 34.3292ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCL7:0000000C", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Executed endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCL7:0000000C", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:32 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000002 - 200 null application/json; charset=utf-8 42.5952ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCL7:0000000C", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCL7"}
[04:07:34 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/messages/unread-count - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/tools/00000000-0000-0000-0000-000000000002 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLC:00000001", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLC"}
[04:07:34 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLB:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLC:00000001", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLC"}
[04:07:34 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/tools/00000000-0000-0000-0000-000000000002 - 204 null null 1.5396ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLC:00000001", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLC"}
[04:07:34 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/messages/unread-count - 204 null null 1.7148ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000001", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/tools/00000000-0000-0000-0000-000000000002 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000002", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLB:00000002", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/messages/unread-count - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLC:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLC"}
[04:07:34 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLC:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLC"}
[04:07:34 INF] Executing endpoint 'ToolsSharing.API.Controllers.ToolsController.GetTool (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:00000002", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executing endpoint 'ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLC:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLC"}
[04:07:34 INF] Route matched with {action = "GetUnreadCount", controller = "Messages"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetUnreadCount() on controller ToolsSharing.API.Controllers.MessagesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLC:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLC"}
[04:07:34 INF] Route matched with {action = "GetTool", controller = "Tools"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetTool(System.Guid) on controller ToolsSharing.API.Controllers.ToolsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "5b9924e8-446c-4366-9114-f151e698a685", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetTool (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000002", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executed DbCommand (2ms) [Parameters=[@__query_UserId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT COUNT(*)
FROM `Messages` AS `m`
WHERE NOT (`m`.`IsDeleted`) AND ((((`m`.`RecipientId` = @__query_UserId_0) AND NOT (`m`.`IsRead`)) AND NOT (`m`.`IsDeleted`)) AND NOT (`m`.`IsBlocked`)) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLC:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLC"}
[04:07:34 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLC:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLC"}
[04:07:34 INF] Executed action ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API) in 24.3008ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLC:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLC"}
[04:07:34 INF] Executed endpoint 'ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLC:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLC"}
[04:07:34 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/messages/unread-count - 200 null application/json; charset=utf-8 27.9971ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLC:00000002", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLC"}
[04:07:34 WRN] Compiling a query which loads related collections for more than one collection navigation, either via 'Include' or through projection, but no 'QuerySplittingBehavior' has been configured. By default, Entity Framework will use 'QuerySplittingBehavior.SingleQuery', which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w => w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'. {"EventId": {"Id": 20504, "Name": "Microsoft.EntityFrameworkCore.Query.MultipleCollectionIncludeWarning"}, "SourceContext": "Microsoft.EntityFrameworkCore.Query", "ActionId": "5b9924e8-446c-4366-9114-f151e698a685", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetTool (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000002", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executed DbCommand (18ms) [Parameters=[@__query_Id_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `s`.`Id`, `s`.`Brand`, `s`.`Category`, `s`.`Condition`, `s`.`CreatedAt`, `s`.`DailyRate`, `s`.`DepositRequired`, `s`.`Description`, `s`.`IsAvailable`, `s`.`IsDeleted`, `s`.`LeadTimeHours`, `s`.`Location`, `s`.`Model`, `s`.`MonthlyRate`, `s`.`Name`, `s`.`OwnerId`, `s`.`UpdatedAt`, `s`.`WeeklyRate`, `s`.`Id0`, `s`.`AccessFailedCount`, `s`.`Address`, `s`.`AnonymizationDate`, `s`.`City`, `s`.`ConcurrencyStamp`, `s`.`Country`, `s`.`CreatedAt0`, `s`.`DataPortabilityRequested`, `s`.`DataProcessingConsent`, `s`.`DataRetentionDate`, `s`.`DateOfBirth`, `s`.`Email`, `s`.`EmailConfirmed`, `s`.`FirstName`, `s`.`GDPROptOut`, `s`.`IsDeleted0`, `s`.`LastConsentUpdate`, `s`.`LastName`, `s`.`LockoutEnabled`, `s`.`LockoutEnd`, `s`.`MarketingConsent`, `s`.`NormalizedEmail`, `s`.`NormalizedUserName`, `s`.`PasswordHash`, `s`.`PhoneNumber`, `s`.`PhoneNumberConfirmed`, `s`.`PostalCode`, `s`.`ProfilePictureUrl`, `s`.`PublicLocation`, `s`.`SecurityStamp`, `s`.`TermsAcceptedDate`, `s`.`TermsOfServiceAccepted`, `s`.`TermsVersion`, `s`.`TwoFactorEnabled`, `s`.`UpdatedAt0`, `s`.`UserName`, `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`, `r0`.`Id`, `r0`.`ApprovedAt`, `r0`.`CancellationReason`, `r0`.`CancelledAt`, `r0`.`CreatedAt`, `r0`.`DepositAmount`, `r0`.`DisputeDeadline`, `r0`.`EndDate`, `r0`.`IsDeleted`, `r0`.`Notes`, `r0`.`OwnerId`, `r0`.`PickupDate`, `r0`.`RenterId`, `r0`.`ReturnConditionNotes`, `r0`.`ReturnDate`, `r0`.`ReturnedByUserId`, `r0`.`StartDate`, `r0`.`Status`, `r0`.`ToolId`, `r0`.`TotalCost`, `r0`.`UpdatedAt`
FROM (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`, `a`.`Id` AS `Id0`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt` AS `CreatedAt0`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted` AS `IsDeleted0`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt` AS `UpdatedAt0`, `a`.`UserName`
    FROM `Tools` AS `t`
    INNER JOIN `AspNetUsers` AS `a` ON `t`.`OwnerId` = `a`.`Id`
    WHERE NOT (`t`.`IsDeleted`) AND ((`t`.`Id` = @__query_Id_0) AND NOT (`t`.`IsDeleted`))
    LIMIT 1
) AS `s`
LEFT JOIN (
    SELECT `t0`.`Id`, `t0`.`AltText`, `t0`.`CreatedAt`, `t0`.`ImageUrl`, `t0`.`IsDeleted`, `t0`.`IsPrimary`, `t0`.`Order`, `t0`.`ToolId`, `t0`.`UpdatedAt`
    FROM `ToolImages` AS `t0`
    WHERE NOT (`t0`.`IsDeleted`)
) AS `t1` ON `s`.`Id` = `t1`.`ToolId`
LEFT JOIN (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`
    FROM `Rentals` AS `r`
    WHERE NOT (`r`.`IsDeleted`)
) AS `r0` ON `s`.`Id` = `r0`.`ToolId`
ORDER BY `s`.`Id`, `s`.`Id0`, `t1`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "5b9924e8-446c-4366-9114-f151e698a685", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetTool (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000002", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.Features.Tools.ToolDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "5b9924e8-446c-4366-9114-f151e698a685", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetTool (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000002", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executed action ToolsSharing.API.Controllers.ToolsController.GetTool (ToolsSharing.API) in 127.9863ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLB:00000002", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executed endpoint 'ToolsSharing.API.Controllers.ToolsController.GetTool (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:00000002", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/tools/00000000-0000-0000-0000-000000000002 - 200 null application/json; charset=utf-8 143.385ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000002", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/tools/00000000-0000-0000-0000-000000000002 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000003", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLB:00000003", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executing endpoint 'ToolsSharing.API.Controllers.ToolsController.GetTool (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:00000003", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Route matched with {action = "GetTool", controller = "Tools"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetTool(System.Guid) on controller ToolsSharing.API.Controllers.ToolsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "5b9924e8-446c-4366-9114-f151e698a685", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetTool (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000003", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executed DbCommand (2ms) [Parameters=[@__query_Id_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `s`.`Id`, `s`.`Brand`, `s`.`Category`, `s`.`Condition`, `s`.`CreatedAt`, `s`.`DailyRate`, `s`.`DepositRequired`, `s`.`Description`, `s`.`IsAvailable`, `s`.`IsDeleted`, `s`.`LeadTimeHours`, `s`.`Location`, `s`.`Model`, `s`.`MonthlyRate`, `s`.`Name`, `s`.`OwnerId`, `s`.`UpdatedAt`, `s`.`WeeklyRate`, `s`.`Id0`, `s`.`AccessFailedCount`, `s`.`Address`, `s`.`AnonymizationDate`, `s`.`City`, `s`.`ConcurrencyStamp`, `s`.`Country`, `s`.`CreatedAt0`, `s`.`DataPortabilityRequested`, `s`.`DataProcessingConsent`, `s`.`DataRetentionDate`, `s`.`DateOfBirth`, `s`.`Email`, `s`.`EmailConfirmed`, `s`.`FirstName`, `s`.`GDPROptOut`, `s`.`IsDeleted0`, `s`.`LastConsentUpdate`, `s`.`LastName`, `s`.`LockoutEnabled`, `s`.`LockoutEnd`, `s`.`MarketingConsent`, `s`.`NormalizedEmail`, `s`.`NormalizedUserName`, `s`.`PasswordHash`, `s`.`PhoneNumber`, `s`.`PhoneNumberConfirmed`, `s`.`PostalCode`, `s`.`ProfilePictureUrl`, `s`.`PublicLocation`, `s`.`SecurityStamp`, `s`.`TermsAcceptedDate`, `s`.`TermsOfServiceAccepted`, `s`.`TermsVersion`, `s`.`TwoFactorEnabled`, `s`.`UpdatedAt0`, `s`.`UserName`, `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`, `r0`.`Id`, `r0`.`ApprovedAt`, `r0`.`CancellationReason`, `r0`.`CancelledAt`, `r0`.`CreatedAt`, `r0`.`DepositAmount`, `r0`.`DisputeDeadline`, `r0`.`EndDate`, `r0`.`IsDeleted`, `r0`.`Notes`, `r0`.`OwnerId`, `r0`.`PickupDate`, `r0`.`RenterId`, `r0`.`ReturnConditionNotes`, `r0`.`ReturnDate`, `r0`.`ReturnedByUserId`, `r0`.`StartDate`, `r0`.`Status`, `r0`.`ToolId`, `r0`.`TotalCost`, `r0`.`UpdatedAt`
FROM (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`, `a`.`Id` AS `Id0`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt` AS `CreatedAt0`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted` AS `IsDeleted0`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt` AS `UpdatedAt0`, `a`.`UserName`
    FROM `Tools` AS `t`
    INNER JOIN `AspNetUsers` AS `a` ON `t`.`OwnerId` = `a`.`Id`
    WHERE NOT (`t`.`IsDeleted`) AND ((`t`.`Id` = @__query_Id_0) AND NOT (`t`.`IsDeleted`))
    LIMIT 1
) AS `s`
LEFT JOIN (
    SELECT `t0`.`Id`, `t0`.`AltText`, `t0`.`CreatedAt`, `t0`.`ImageUrl`, `t0`.`IsDeleted`, `t0`.`IsPrimary`, `t0`.`Order`, `t0`.`ToolId`, `t0`.`UpdatedAt`
    FROM `ToolImages` AS `t0`
    WHERE NOT (`t0`.`IsDeleted`)
) AS `t1` ON `s`.`Id` = `t1`.`ToolId`
LEFT JOIN (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`
    FROM `Rentals` AS `r`
    WHERE NOT (`r`.`IsDeleted`)
) AS `r0` ON `s`.`Id` = `r0`.`ToolId`
ORDER BY `s`.`Id`, `s`.`Id0`, `t1`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "5b9924e8-446c-4366-9114-f151e698a685", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetTool (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000003", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.Features.Tools.ToolDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "5b9924e8-446c-4366-9114-f151e698a685", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetTool (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000003", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executed action ToolsSharing.API.Controllers.ToolsController.GetTool (ToolsSharing.API) in 24.5612ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLB:00000003", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executed endpoint 'ToolsSharing.API.Controllers.ToolsController.GetTool (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:00000003", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/tools/00000000-0000-0000-0000-000000000002 - 200 null application/json; charset=utf-8 28.7753ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000003", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000002 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLB:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executing endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Route matched with {action = "CheckFavoriteStatus", controller = "Favorites"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CheckFavoriteStatus(System.Guid) on controller ToolsSharing.API.Controllers.FavoritesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executed DbCommand (1ms) [Parameters=[@__userId_0='?' (Size = 450), @__toolId_1='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `f`.`Id`, `f`.`CreatedAt`, `f`.`IsDeleted`, `f`.`ToolId`, `f`.`UpdatedAt`, `f`.`UserId`
FROM `Favorites` AS `f`
WHERE NOT (`f`.`IsDeleted`) AND ((`f`.`UserId` = @__userId_0) AND (`f`.`ToolId` = @__toolId_1))
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.DTOs.FavoriteStatusDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executed action ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API) in 17.6856ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLB:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executed endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000002 - 200 null application/json; charset=utf-8 21.5484ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000004", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000002 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000005", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLB:00000005", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Executing endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:00000005", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:34 INF] Route matched with {action = "CheckFavoriteStatus", controller = "Favorites"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CheckFavoriteStatus(System.Guid) on controller ToolsSharing.API.Controllers.FavoritesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000005", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:35 INF] Executed DbCommand (1ms) [Parameters=[@__userId_0='?' (Size = 450), @__toolId_1='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `f`.`Id`, `f`.`CreatedAt`, `f`.`IsDeleted`, `f`.`ToolId`, `f`.`UpdatedAt`, `f`.`UserId`
FROM `Favorites` AS `f`
WHERE NOT (`f`.`IsDeleted`) AND ((`f`.`UserId` = @__userId_0) AND (`f`.`ToolId` = @__toolId_1))
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000005", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:35 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.DTOs.FavoriteStatusDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "b675485e-6aa8-487f-a809-85f917e9be45", "ActionName": "ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000005", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:35 INF] Executed action ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API) in 18.8259ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLB:00000005", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:35 INF] Executed endpoint 'ToolsSharing.API.Controllers.FavoritesController.CheckFavoriteStatus (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:00000005", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:35 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/favorites/status/00000000-0000-0000-0000-000000000002 - 200 null application/json; charset=utf-8 22.9775ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000005", "RequestPath": "/api/favorites/status/00000000-0000-0000-0000-000000000002", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000006", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLB:00000006", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences - 204 null null 1.1415ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000006", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000007", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLB:00000007", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Executing endpoint 'ToolsSharing.API.Controllers.ToolsController.GetToolRentalPreferences (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:00000007", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Route matched with {action = "GetToolRentalPreferences", controller = "Tools"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetToolRentalPreferences(System.Guid) on controller ToolsSharing.API.Controllers.ToolsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "81866668-74c5-4084-9c38-7fdfbea9ba87", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetToolRentalPreferences (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000007", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Executed DbCommand (3ms) [Parameters=[@__query_Id_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `s`.`Id`, `s`.`Brand`, `s`.`Category`, `s`.`Condition`, `s`.`CreatedAt`, `s`.`DailyRate`, `s`.`DepositRequired`, `s`.`Description`, `s`.`IsAvailable`, `s`.`IsDeleted`, `s`.`LeadTimeHours`, `s`.`Location`, `s`.`Model`, `s`.`MonthlyRate`, `s`.`Name`, `s`.`OwnerId`, `s`.`UpdatedAt`, `s`.`WeeklyRate`, `s`.`Id0`, `s`.`AccessFailedCount`, `s`.`Address`, `s`.`AnonymizationDate`, `s`.`City`, `s`.`ConcurrencyStamp`, `s`.`Country`, `s`.`CreatedAt0`, `s`.`DataPortabilityRequested`, `s`.`DataProcessingConsent`, `s`.`DataRetentionDate`, `s`.`DateOfBirth`, `s`.`Email`, `s`.`EmailConfirmed`, `s`.`FirstName`, `s`.`GDPROptOut`, `s`.`IsDeleted0`, `s`.`LastConsentUpdate`, `s`.`LastName`, `s`.`LockoutEnabled`, `s`.`LockoutEnd`, `s`.`MarketingConsent`, `s`.`NormalizedEmail`, `s`.`NormalizedUserName`, `s`.`PasswordHash`, `s`.`PhoneNumber`, `s`.`PhoneNumberConfirmed`, `s`.`PostalCode`, `s`.`ProfilePictureUrl`, `s`.`PublicLocation`, `s`.`SecurityStamp`, `s`.`TermsAcceptedDate`, `s`.`TermsOfServiceAccepted`, `s`.`TermsVersion`, `s`.`TwoFactorEnabled`, `s`.`UpdatedAt0`, `s`.`UserName`, `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`, `r0`.`Id`, `r0`.`ApprovedAt`, `r0`.`CancellationReason`, `r0`.`CancelledAt`, `r0`.`CreatedAt`, `r0`.`DepositAmount`, `r0`.`DisputeDeadline`, `r0`.`EndDate`, `r0`.`IsDeleted`, `r0`.`Notes`, `r0`.`OwnerId`, `r0`.`PickupDate`, `r0`.`RenterId`, `r0`.`ReturnConditionNotes`, `r0`.`ReturnDate`, `r0`.`ReturnedByUserId`, `r0`.`StartDate`, `r0`.`Status`, `r0`.`ToolId`, `r0`.`TotalCost`, `r0`.`UpdatedAt`
FROM (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`, `a`.`Id` AS `Id0`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt` AS `CreatedAt0`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted` AS `IsDeleted0`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt` AS `UpdatedAt0`, `a`.`UserName`
    FROM `Tools` AS `t`
    INNER JOIN `AspNetUsers` AS `a` ON `t`.`OwnerId` = `a`.`Id`
    WHERE NOT (`t`.`IsDeleted`) AND ((`t`.`Id` = @__query_Id_0) AND NOT (`t`.`IsDeleted`))
    LIMIT 1
) AS `s`
LEFT JOIN (
    SELECT `t0`.`Id`, `t0`.`AltText`, `t0`.`CreatedAt`, `t0`.`ImageUrl`, `t0`.`IsDeleted`, `t0`.`IsPrimary`, `t0`.`Order`, `t0`.`ToolId`, `t0`.`UpdatedAt`
    FROM `ToolImages` AS `t0`
    WHERE NOT (`t0`.`IsDeleted`)
) AS `t1` ON `s`.`Id` = `t1`.`ToolId`
LEFT JOIN (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`
    FROM `Rentals` AS `r`
    WHERE NOT (`r`.`IsDeleted`)
) AS `r0` ON `s`.`Id` = `r0`.`ToolId`
ORDER BY `s`.`Id`, `s`.`Id0`, `t1`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "81866668-74c5-4084-9c38-7fdfbea9ba87", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetToolRentalPreferences (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000007", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Executed DbCommand (2ms) [Parameters=[@__userId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT `u`.`Id`, `u`.`AllowDirectMessages`, `u`.`AllowRentalInquiries`, `u`.`AutoApproveRentals`, `u`.`CreatedAt`, `u`.`Currency`, `u`.`DefaultDepositPercentage`, `u`.`EmailMarketing`, `u`.`EmailMessages`, `u`.`EmailRentalRequests`, `u`.`EmailRentalUpdates`, `u`.`EmailSecurityAlerts`, `u`.`IsDeleted`, `u`.`Language`, `u`.`LoginAlertsEnabled`, `u`.`PushMessages`, `u`.`PushReminders`, `u`.`PushRentalRequests`, `u`.`PushRentalUpdates`, `u`.`RentalLeadTime`, `u`.`RequireDeposit`, `u`.`SessionTimeoutMinutes`, `u`.`ShowEmail`, `u`.`ShowLocation`, `u`.`ShowOnlineStatus`, `u`.`ShowPhoneNumber`, `u`.`ShowProfilePicture`, `u`.`ShowRealName`, `u`.`ShowStatistics`, `u`.`Theme`, `u`.`TimeZone`, `u`.`TwoFactorEnabled`, `u`.`UpdatedAt`, `u`.`UserId`
FROM `UserSettings` AS `u`
WHERE NOT (`u`.`IsDeleted`) AND (`u`.`UserId` = @__userId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "81866668-74c5-4084-9c38-7fdfbea9ba87", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetToolRentalPreferences (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000007", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "81866668-74c5-4084-9c38-7fdfbea9ba87", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetToolRentalPreferences (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000007", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Executed action ToolsSharing.API.Controllers.ToolsController.GetToolRentalPreferences (ToolsSharing.API) in 53.241ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLB:00000007", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Executed endpoint 'ToolsSharing.API.Controllers.ToolsController.GetToolRentalPreferences (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:00000007", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences - 200 null application/json; charset=utf-8 63.3147ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000007", "RequestPath": "/api/tools/00000000-0000-0000-0000-000000000002/rental-preferences", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000008", "RequestPath": "/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLB:00000008", "RequestPath": "/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901 - 204 null null 0.9762ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000008", "RequestPath": "/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000009", "RequestPath": "/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLB:00000009", "RequestPath": "/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Executing endpoint 'ToolsSharing.API.Controllers.PaymentsController.CanOwnerReceivePayments (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:00000009", "RequestPath": "/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Route matched with {action = "CanOwnerReceivePayments", controller = "Payments"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CanOwnerReceivePayments(System.String) on controller ToolsSharing.API.Controllers.PaymentsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "f8335d7a-dc56-4fbe-b273-c8167d55b808", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.CanOwnerReceivePayments (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000009", "RequestPath": "/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Executed DbCommand (3ms) [Parameters=[@__userId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT `p`.`Id`, `p`.`BusinessName`, `p`.`BusinessType`, `p`.`CreatedAt`, `p`.`CustomCommissionRate`, `p`.`IsCommissionEnabled`, `p`.`IsDeleted`, `p`.`IsPayoutVerified`, `p`.`MinimumPayoutAmount`, `p`.`NotifyOnPaymentReceived`, `p`.`NotifyOnPayoutFailed`, `p`.`NotifyOnPayoutSent`, `p`.`PayPalEmail`, `p`.`PayoutDayOfMonth`, `p`.`PayoutDayOfWeek`, `p`.`PayoutSchedule`, `p`.`PreferredPayoutMethod`, `p`.`StripeAccountId`, `p`.`TaxIdLast4`, `p`.`TaxIdType`, `p`.`TaxInfoProvided`, `p`.`UpdatedAt`, `p`.`UserId`, `p`.`VerificationNotes`, `p`.`VerifiedAt`
FROM `PaymentSettings` AS `p`
WHERE NOT (`p`.`IsDeleted`) AND (`p`.`UserId` = @__userId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "f8335d7a-dc56-4fbe-b273-c8167d55b808", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.CanOwnerReceivePayments (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000009", "RequestPath": "/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:37 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType57`2[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType65`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], ToolsSharing.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "f8335d7a-dc56-4fbe-b273-c8167d55b808", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.CanOwnerReceivePayments (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:00000009", "RequestPath": "/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] Executed action ToolsSharing.API.Controllers.PaymentsController.CanOwnerReceivePayments (ToolsSharing.API) in 150.017ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLB:00000009", "RequestPath": "/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] Executed endpoint 'ToolsSharing.API.Controllers.PaymentsController.CanOwnerReceivePayments (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:00000009", "RequestPath": "/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901 - 200 null application/json; charset=utf-8 167.9221ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:00000009", "RequestPath": "/api/payments/can-receive-payments/user1-guid-1234-5678-9012345678901", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/payments/calculate-rental-cost?toolId=00000000-0000-0000-0000-000000000002&startDate=2025-07-22&endDate=2025-07-23 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:0000000A", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLB:0000000A", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/payments/calculate-rental-cost?toolId=00000000-0000-0000-0000-000000000002&startDate=2025-07-22&endDate=2025-07-23 - 204 null null 1.0388ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:0000000A", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/payments/calculate-rental-cost?toolId=00000000-0000-0000-0000-000000000002&startDate=2025-07-22&endDate=2025-07-23 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:0000000B", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLB:0000000B", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] Executing endpoint 'ToolsSharing.API.Controllers.PaymentsController.CalculateRentalCost (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:0000000B", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] Route matched with {action = "CalculateRentalCost", controller = "Payments"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateRentalCost(System.Guid, System.DateTime, System.DateTime) on controller ToolsSharing.API.Controllers.PaymentsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "4b0d66a2-09e3-438b-800d-7d8b9e81b10e", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.CalculateRentalCost (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:0000000B", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] Executed DbCommand (2ms) [Parameters=[@__toolId_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
FROM `Tools` AS `t`
WHERE NOT (`t`.`IsDeleted`) AND (`t`.`Id` = @__toolId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "4b0d66a2-09e3-438b-800d-7d8b9e81b10e", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.CalculateRentalCost (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:0000000B", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] Executed DbCommand (3ms) [Parameters=[@__ownerId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT `p`.`Id`, `p`.`BusinessName`, `p`.`BusinessType`, `p`.`CreatedAt`, `p`.`CustomCommissionRate`, `p`.`IsCommissionEnabled`, `p`.`IsDeleted`, `p`.`IsPayoutVerified`, `p`.`MinimumPayoutAmount`, `p`.`NotifyOnPaymentReceived`, `p`.`NotifyOnPayoutFailed`, `p`.`NotifyOnPayoutSent`, `p`.`PayPalEmail`, `p`.`PayoutDayOfMonth`, `p`.`PayoutDayOfWeek`, `p`.`PayoutSchedule`, `p`.`PreferredPayoutMethod`, `p`.`StripeAccountId`, `p`.`TaxIdLast4`, `p`.`TaxIdType`, `p`.`TaxInfoProvided`, `p`.`UpdatedAt`, `p`.`UserId`, `p`.`VerificationNotes`, `p`.`VerifiedAt`
FROM `PaymentSettings` AS `p`
WHERE NOT (`p`.`IsDeleted`) AND (`p`.`UserId` = @__ownerId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "4b0d66a2-09e3-438b-800d-7d8b9e81b10e", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.CalculateRentalCost (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:0000000B", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType57`2[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType59`12[[System.Guid, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Decimal, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Decimal, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Decimal, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Decimal, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Decimal, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Decimal, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Decimal, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], ToolsSharing.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "4b0d66a2-09e3-438b-800d-7d8b9e81b10e", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.CalculateRentalCost (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:0000000B", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] Executed action ToolsSharing.API.Controllers.PaymentsController.CalculateRentalCost (ToolsSharing.API) in 79.7793ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLB:0000000B", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] Executed endpoint 'ToolsSharing.API.Controllers.PaymentsController.CalculateRentalCost (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:0000000B", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:38 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/payments/calculate-rental-cost?toolId=00000000-0000-0000-0000-000000000002&startDate=2025-07-22&endDate=2025-07-23 - 200 null application/json; charset=utf-8 94.3863ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:0000000B", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:42 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/payments/calculate-rental-cost?toolId=00000000-0000-0000-0000-000000000002&startDate=2025-07-23&endDate=2025-07-24 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:0000000C", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:42 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLB:0000000C", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:42 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/payments/calculate-rental-cost?toolId=00000000-0000-0000-0000-000000000002&startDate=2025-07-23&endDate=2025-07-24 - 204 null null 1.1665ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:0000000C", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:42 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/payments/calculate-rental-cost?toolId=00000000-0000-0000-0000-000000000002&startDate=2025-07-23&endDate=2025-07-24 - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:0000000D", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:42 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLB:0000000D", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:42 INF] Executing endpoint 'ToolsSharing.API.Controllers.PaymentsController.CalculateRentalCost (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:0000000D", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:42 INF] Route matched with {action = "CalculateRentalCost", controller = "Payments"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateRentalCost(System.Guid, System.DateTime, System.DateTime) on controller ToolsSharing.API.Controllers.PaymentsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "4b0d66a2-09e3-438b-800d-7d8b9e81b10e", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.CalculateRentalCost (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:0000000D", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:42 INF] Executed DbCommand (3ms) [Parameters=[@__toolId_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
FROM `Tools` AS `t`
WHERE NOT (`t`.`IsDeleted`) AND (`t`.`Id` = @__toolId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "4b0d66a2-09e3-438b-800d-7d8b9e81b10e", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.CalculateRentalCost (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:0000000D", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:42 INF] Executed DbCommand (2ms) [Parameters=[@__ownerId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT `p`.`Id`, `p`.`BusinessName`, `p`.`BusinessType`, `p`.`CreatedAt`, `p`.`CustomCommissionRate`, `p`.`IsCommissionEnabled`, `p`.`IsDeleted`, `p`.`IsPayoutVerified`, `p`.`MinimumPayoutAmount`, `p`.`NotifyOnPaymentReceived`, `p`.`NotifyOnPayoutFailed`, `p`.`NotifyOnPayoutSent`, `p`.`PayPalEmail`, `p`.`PayoutDayOfMonth`, `p`.`PayoutDayOfWeek`, `p`.`PayoutSchedule`, `p`.`PreferredPayoutMethod`, `p`.`StripeAccountId`, `p`.`TaxIdLast4`, `p`.`TaxIdType`, `p`.`TaxInfoProvided`, `p`.`UpdatedAt`, `p`.`UserId`, `p`.`VerificationNotes`, `p`.`VerifiedAt`
FROM `PaymentSettings` AS `p`
WHERE NOT (`p`.`IsDeleted`) AND (`p`.`UserId` = @__ownerId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "4b0d66a2-09e3-438b-800d-7d8b9e81b10e", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.CalculateRentalCost (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:0000000D", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:42 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType57`2[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType59`12[[System.Guid, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Decimal, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Decimal, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Decimal, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Decimal, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Decimal, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Decimal, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Decimal, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], ToolsSharing.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "4b0d66a2-09e3-438b-800d-7d8b9e81b10e", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.CalculateRentalCost (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLB:0000000D", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:42 INF] Executed action ToolsSharing.API.Controllers.PaymentsController.CalculateRentalCost (ToolsSharing.API) in 31.4576ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLB:0000000D", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:42 INF] Executed endpoint 'ToolsSharing.API.Controllers.PaymentsController.CalculateRentalCost (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLB:0000000D", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:42 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/payments/calculate-rental-cost?toolId=00000000-0000-0000-0000-000000000002&startDate=2025-07-23&endDate=2025-07-24 - 200 null application/json; charset=utf-8 35.7671ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLB:0000000D", "RequestPath": "/api/payments/calculate-rental-cost", "ConnectionId": "0HNE7UBO8SCLB"}
[04:07:46 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/rentals - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLE:00000001", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLE:00000001", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/rentals - 204 null null 1.8889ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLE:00000001", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Request starting HTTP/1.1 POST http://localhost:5002/api/rentals - application/json; charset=utf-8 140 {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Route matched with {action = "CreateRental", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CreateRental(ToolsSharing.Core.Features.Rentals.CreateRentalDto) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "43c5048f-6f48-447e-b83f-fe57e8e158e0", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executed DbCommand (9ms) [Parameters=[@__command_ToolId_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `s`.`Id`, `s`.`Brand`, `s`.`Category`, `s`.`Condition`, `s`.`CreatedAt`, `s`.`DailyRate`, `s`.`DepositRequired`, `s`.`Description`, `s`.`IsAvailable`, `s`.`IsDeleted`, `s`.`LeadTimeHours`, `s`.`Location`, `s`.`Model`, `s`.`MonthlyRate`, `s`.`Name`, `s`.`OwnerId`, `s`.`UpdatedAt`, `s`.`WeeklyRate`, `s`.`Id0`, `s`.`AccessFailedCount`, `s`.`Address`, `s`.`AnonymizationDate`, `s`.`City`, `s`.`ConcurrencyStamp`, `s`.`Country`, `s`.`CreatedAt0`, `s`.`DataPortabilityRequested`, `s`.`DataProcessingConsent`, `s`.`DataRetentionDate`, `s`.`DateOfBirth`, `s`.`Email`, `s`.`EmailConfirmed`, `s`.`FirstName`, `s`.`GDPROptOut`, `s`.`IsDeleted0`, `s`.`LastConsentUpdate`, `s`.`LastName`, `s`.`LockoutEnabled`, `s`.`LockoutEnd`, `s`.`MarketingConsent`, `s`.`NormalizedEmail`, `s`.`NormalizedUserName`, `s`.`PasswordHash`, `s`.`PhoneNumber`, `s`.`PhoneNumberConfirmed`, `s`.`PostalCode`, `s`.`ProfilePictureUrl`, `s`.`PublicLocation`, `s`.`SecurityStamp`, `s`.`TermsAcceptedDate`, `s`.`TermsOfServiceAccepted`, `s`.`TermsVersion`, `s`.`TwoFactorEnabled`, `s`.`UpdatedAt0`, `s`.`UserName`, `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
FROM (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`, `a`.`Id` AS `Id0`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt` AS `CreatedAt0`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted` AS `IsDeleted0`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt` AS `UpdatedAt0`, `a`.`UserName`
    FROM `Tools` AS `t`
    INNER JOIN `AspNetUsers` AS `a` ON `t`.`OwnerId` = `a`.`Id`
    WHERE NOT (`t`.`IsDeleted`) AND ((`t`.`Id` = @__command_ToolId_0) AND NOT (`t`.`IsDeleted`))
    LIMIT 1
) AS `s`
LEFT JOIN (
    SELECT `t0`.`Id`, `t0`.`AltText`, `t0`.`CreatedAt`, `t0`.`ImageUrl`, `t0`.`IsDeleted`, `t0`.`IsPrimary`, `t0`.`Order`, `t0`.`ToolId`, `t0`.`UpdatedAt`
    FROM `ToolImages` AS `t0`
    WHERE NOT (`t0`.`IsDeleted`)
) AS `t1` ON `s`.`Id` = `t1`.`ToolId`
ORDER BY `s`.`Id`, `s`.`Id0` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "43c5048f-6f48-447e-b83f-fe57e8e158e0", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (Size = 255)], CommandType='Text', CommandTimeout='30']
SELECT `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`
FROM `AspNetUsers` AS `a`
WHERE `a`.`Id` = @__p_0
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "43c5048f-6f48-447e-b83f-fe57e8e158e0", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executed DbCommand (1ms) [Parameters=[@__userId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT `p`.`Id`, `p`.`BusinessName`, `p`.`BusinessType`, `p`.`CreatedAt`, `p`.`CustomCommissionRate`, `p`.`IsCommissionEnabled`, `p`.`IsDeleted`, `p`.`IsPayoutVerified`, `p`.`MinimumPayoutAmount`, `p`.`NotifyOnPaymentReceived`, `p`.`NotifyOnPayoutFailed`, `p`.`NotifyOnPayoutSent`, `p`.`PayPalEmail`, `p`.`PayoutDayOfMonth`, `p`.`PayoutDayOfWeek`, `p`.`PayoutSchedule`, `p`.`PreferredPayoutMethod`, `p`.`StripeAccountId`, `p`.`TaxIdLast4`, `p`.`TaxIdType`, `p`.`TaxInfoProvided`, `p`.`UpdatedAt`, `p`.`UserId`, `p`.`VerificationNotes`, `p`.`VerifiedAt`
FROM `PaymentSettings` AS `p`
WHERE NOT (`p`.`IsDeleted`) AND (`p`.`UserId` = @__userId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "43c5048f-6f48-447e-b83f-fe57e8e158e0", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executed DbCommand (1ms) [Parameters=[@__userId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT `u`.`Id`, `u`.`AllowDirectMessages`, `u`.`AllowRentalInquiries`, `u`.`AutoApproveRentals`, `u`.`CreatedAt`, `u`.`Currency`, `u`.`DefaultDepositPercentage`, `u`.`EmailMarketing`, `u`.`EmailMessages`, `u`.`EmailRentalRequests`, `u`.`EmailRentalUpdates`, `u`.`EmailSecurityAlerts`, `u`.`IsDeleted`, `u`.`Language`, `u`.`LoginAlertsEnabled`, `u`.`PushMessages`, `u`.`PushReminders`, `u`.`PushRentalRequests`, `u`.`PushRentalUpdates`, `u`.`RentalLeadTime`, `u`.`RequireDeposit`, `u`.`SessionTimeoutMinutes`, `u`.`ShowEmail`, `u`.`ShowLocation`, `u`.`ShowOnlineStatus`, `u`.`ShowPhoneNumber`, `u`.`ShowProfilePicture`, `u`.`ShowRealName`, `u`.`ShowStatistics`, `u`.`Theme`, `u`.`TimeZone`, `u`.`TwoFactorEnabled`, `u`.`UpdatedAt`, `u`.`UserId`
FROM `UserSettings` AS `u`
WHERE NOT (`u`.`IsDeleted`) AND (`u`.`UserId` = @__userId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "43c5048f-6f48-447e-b83f-fe57e8e158e0", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executed DbCommand (2ms) [Parameters=[@__command_ToolId_0='?' (DbType = Guid), @__command_StartDate_1='?' (DbType = DateTime), @__command_EndDate_2='?' (DbType = DateTime)], CommandType='Text', CommandTimeout='30']
SELECT EXISTS (
    SELECT 1
    FROM `Rentals` AS `r`
    WHERE NOT (`r`.`IsDeleted`) AND ((((`r`.`ToolId` = @__command_ToolId_0) AND (`r`.`Status` <> 'Returned')) AND (`r`.`Status` <> 'Cancelled')) AND ((((@__command_StartDate_1 >= `r`.`StartDate`) AND (@__command_StartDate_1 <= `r`.`EndDate`)) OR ((@__command_EndDate_2 >= `r`.`StartDate`) AND (@__command_EndDate_2 <= `r`.`EndDate`))) OR ((@__command_StartDate_1 <= `r`.`StartDate`) AND (@__command_EndDate_2 >= `r`.`EndDate`))))) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "43c5048f-6f48-447e-b83f-fe57e8e158e0", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executed DbCommand (24ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?' (DbType = DateTime), @p2='?' (Size = 4000), @p3='?' (DbType = DateTime), @p4='?' (DbType = DateTime), @p5='?' (DbType = Decimal), @p6='?' (DbType = DateTime), @p7='?' (DbType = DateTime), @p8='?' (DbType = Boolean), @p9='?' (Size = 500), @p10='?' (Size = 255), @p11='?' (DbType = DateTime), @p12='?' (Size = 255), @p13='?' (Size = 4000), @p14='?' (DbType = DateTime), @p15='?' (Size = 4000), @p16='?' (DbType = DateTime), @p17='?' (Size = 20), @p18='?' (DbType = Guid), @p19='?' (DbType = Decimal), @p20='?' (DbType = DateTime)], CommandType='Text', CommandTimeout='30']
SET AUTOCOMMIT = 1;
INSERT INTO `Rentals` (`Id`, `ApprovedAt`, `CancellationReason`, `CancelledAt`, `CreatedAt`, `DepositAmount`, `DisputeDeadline`, `EndDate`, `IsDeleted`, `Notes`, `OwnerId`, `PickupDate`, `RenterId`, `ReturnConditionNotes`, `ReturnDate`, `ReturnedByUserId`, `StartDate`, `Status`, `ToolId`, `TotalCost`, `UpdatedAt`)
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20); {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "43c5048f-6f48-447e-b83f-fe57e8e158e0", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executed DbCommand (6ms) [Parameters=[@__rental_Id_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `s`.`Id`, `s`.`ApprovedAt`, `s`.`CancellationReason`, `s`.`CancelledAt`, `s`.`CreatedAt`, `s`.`DepositAmount`, `s`.`DisputeDeadline`, `s`.`EndDate`, `s`.`IsDeleted`, `s`.`Notes`, `s`.`OwnerId`, `s`.`PickupDate`, `s`.`RenterId`, `s`.`ReturnConditionNotes`, `s`.`ReturnDate`, `s`.`ReturnedByUserId`, `s`.`StartDate`, `s`.`Status`, `s`.`ToolId`, `s`.`TotalCost`, `s`.`UpdatedAt`, `s`.`Id0`, `s`.`Brand`, `s`.`Category`, `s`.`Condition`, `s`.`CreatedAt0`, `s`.`DailyRate`, `s`.`DepositRequired`, `s`.`Description`, `s`.`IsAvailable`, `s`.`IsDeleted0`, `s`.`LeadTimeHours`, `s`.`Location`, `s`.`Model`, `s`.`MonthlyRate`, `s`.`Name`, `s`.`OwnerId0`, `s`.`UpdatedAt0`, `s`.`WeeklyRate`, `s`.`Id1`, `s`.`AccessFailedCount`, `s`.`Address`, `s`.`AnonymizationDate`, `s`.`City`, `s`.`ConcurrencyStamp`, `s`.`Country`, `s`.`CreatedAt1`, `s`.`DataPortabilityRequested`, `s`.`DataProcessingConsent`, `s`.`DataRetentionDate`, `s`.`DateOfBirth`, `s`.`Email`, `s`.`EmailConfirmed`, `s`.`FirstName`, `s`.`GDPROptOut`, `s`.`IsDeleted1`, `s`.`LastConsentUpdate`, `s`.`LastName`, `s`.`LockoutEnabled`, `s`.`LockoutEnd`, `s`.`MarketingConsent`, `s`.`NormalizedEmail`, `s`.`NormalizedUserName`, `s`.`PasswordHash`, `s`.`PhoneNumber`, `s`.`PhoneNumberConfirmed`, `s`.`PostalCode`, `s`.`ProfilePictureUrl`, `s`.`PublicLocation`, `s`.`SecurityStamp`, `s`.`TermsAcceptedDate`, `s`.`TermsOfServiceAccepted`, `s`.`TermsVersion`, `s`.`TwoFactorEnabled`, `s`.`UpdatedAt1`, `s`.`UserName`, `s`.`Id2`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `s`.`AccessFailedCount0`, `s`.`Address0`, `s`.`AnonymizationDate0`, `s`.`City0`, `s`.`ConcurrencyStamp0`, `s`.`Country0`, `s`.`CreatedAt2`, `s`.`DataPortabilityRequested0`, `s`.`DataProcessingConsent0`, `s`.`DataRetentionDate0`, `s`.`DateOfBirth0`, `s`.`Email0`, `s`.`EmailConfirmed0`, `s`.`FirstName0`, `s`.`GDPROptOut0`, `s`.`IsDeleted2`, `s`.`LastConsentUpdate0`, `s`.`LastName0`, `s`.`LockoutEnabled0`, `s`.`LockoutEnd0`, `s`.`MarketingConsent0`, `s`.`NormalizedEmail0`, `s`.`NormalizedUserName0`, `s`.`PasswordHash0`, `s`.`PhoneNumber0`, `s`.`PhoneNumberConfirmed0`, `s`.`PostalCode0`, `s`.`ProfilePictureUrl0`, `s`.`PublicLocation0`, `s`.`SecurityStamp0`, `s`.`TermsAcceptedDate0`, `s`.`TermsOfServiceAccepted0`, `s`.`TermsVersion0`, `s`.`TwoFactorEnabled0`, `s`.`UpdatedAt2`, `s`.`UserName0`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`, `t0`.`Id` AS `Id0`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt` AS `CreatedAt0`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted` AS `IsDeleted0`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId` AS `OwnerId0`, `t0`.`UpdatedAt` AS `UpdatedAt0`, `t0`.`WeeklyRate`, `a`.`Id` AS `Id1`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt` AS `CreatedAt1`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted` AS `IsDeleted1`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt` AS `UpdatedAt1`, `a`.`UserName`, `a0`.`Id` AS `Id2`, `a0`.`AccessFailedCount` AS `AccessFailedCount0`, `a0`.`Address` AS `Address0`, `a0`.`AnonymizationDate` AS `AnonymizationDate0`, `a0`.`City` AS `City0`, `a0`.`ConcurrencyStamp` AS `ConcurrencyStamp0`, `a0`.`Country` AS `Country0`, `a0`.`CreatedAt` AS `CreatedAt2`, `a0`.`DataPortabilityRequested` AS `DataPortabilityRequested0`, `a0`.`DataProcessingConsent` AS `DataProcessingConsent0`, `a0`.`DataRetentionDate` AS `DataRetentionDate0`, `a0`.`DateOfBirth` AS `DateOfBirth0`, `a0`.`Email` AS `Email0`, `a0`.`EmailConfirmed` AS `EmailConfirmed0`, `a0`.`FirstName` AS `FirstName0`, `a0`.`GDPROptOut` AS `GDPROptOut0`, `a0`.`IsDeleted` AS `IsDeleted2`, `a0`.`LastConsentUpdate` AS `LastConsentUpdate0`, `a0`.`LastName` AS `LastName0`, `a0`.`LockoutEnabled` AS `LockoutEnabled0`, `a0`.`LockoutEnd` AS `LockoutEnd0`, `a0`.`MarketingConsent` AS `MarketingConsent0`, `a0`.`NormalizedEmail` AS `NormalizedEmail0`, `a0`.`NormalizedUserName` AS `NormalizedUserName0`, `a0`.`PasswordHash` AS `PasswordHash0`, `a0`.`PhoneNumber` AS `PhoneNumber0`, `a0`.`PhoneNumberConfirmed` AS `PhoneNumberConfirmed0`, `a0`.`PostalCode` AS `PostalCode0`, `a0`.`ProfilePictureUrl` AS `ProfilePictureUrl0`, `a0`.`PublicLocation` AS `PublicLocation0`, `a0`.`SecurityStamp` AS `SecurityStamp0`, `a0`.`TermsAcceptedDate` AS `TermsAcceptedDate0`, `a0`.`TermsOfServiceAccepted` AS `TermsOfServiceAccepted0`, `a0`.`TermsVersion` AS `TermsVersion0`, `a0`.`TwoFactorEnabled` AS `TwoFactorEnabled0`, `a0`.`UpdatedAt` AS `UpdatedAt2`, `a0`.`UserName` AS `UserName0`
    FROM `Rentals` AS `r`
    INNER JOIN (
        SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
        FROM `Tools` AS `t`
        WHERE NOT (`t`.`IsDeleted`)
    ) AS `t0` ON `r`.`ToolId` = `t0`.`Id`
    INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
    INNER JOIN `AspNetUsers` AS `a0` ON `r`.`RenterId` = `a0`.`Id`
    WHERE NOT (`r`.`IsDeleted`) AND (`r`.`Id` = @__rental_Id_0)
    LIMIT 1
) AS `s`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `s`.`Id0` = `t2`.`ToolId`
ORDER BY `s`.`Id`, `s`.`Id0`, `s`.`Id1`, `s`.`Id2` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "43c5048f-6f48-447e-b83f-fe57e8e158e0", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executed DbCommand (1ms) [Parameters=[@__userId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT `u`.`Id`, `u`.`AllowDirectMessages`, `u`.`AllowRentalInquiries`, `u`.`AutoApproveRentals`, `u`.`CreatedAt`, `u`.`Currency`, `u`.`DefaultDepositPercentage`, `u`.`EmailMarketing`, `u`.`EmailMessages`, `u`.`EmailRentalRequests`, `u`.`EmailRentalUpdates`, `u`.`EmailSecurityAlerts`, `u`.`IsDeleted`, `u`.`Language`, `u`.`LoginAlertsEnabled`, `u`.`PushMessages`, `u`.`PushReminders`, `u`.`PushRentalRequests`, `u`.`PushRentalUpdates`, `u`.`RentalLeadTime`, `u`.`RequireDeposit`, `u`.`SessionTimeoutMinutes`, `u`.`ShowEmail`, `u`.`ShowLocation`, `u`.`ShowOnlineStatus`, `u`.`ShowPhoneNumber`, `u`.`ShowProfilePicture`, `u`.`ShowRealName`, `u`.`ShowStatistics`, `u`.`Theme`, `u`.`TimeZone`, `u`.`TwoFactorEnabled`, `u`.`UpdatedAt`, `u`.`UserId`
FROM `UserSettings` AS `u`
WHERE NOT (`u`.`IsDeleted`) AND (`u`.`UserId` = @__userId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "43c5048f-6f48-447e-b83f-fe57e8e158e0", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 WRN] Email sending skipped - SMTP not configured. Subject: New rental request for Circular Saw, To: john.doe@email.com {"SourceContext": "ToolsSharing.Infrastructure.Services.EmailNotificationService", "ActionId": "43c5048f-6f48-447e-b83f-fe57e8e158e0", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Email notification sent to john.doe@email.com with subject New rental request for Circular Saw {"SourceContext": "ToolsSharing.Infrastructure.Services.EmailNotificationService", "ActionId": "43c5048f-6f48-447e-b83f-fe57e8e158e0", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executing CreatedAtActionResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.Features.Rentals.RentalDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "43c5048f-6f48-447e-b83f-fe57e8e158e0", "ActionName": "ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executed action ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API) in 321.2352ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.CreateRental (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Request finished HTTP/1.1 POST http://localhost:5002/api/rentals - 201 null application/json; charset=utf-8 333.2004ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLE:00000002", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLE:00000003", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLE:00000003", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c - 204 null null 0.9931ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLE:00000003", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Request starting HTTP/1.1 POST http://localhost:5002/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c - null 0 {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executing endpoint 'ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Route matched with {action = "InitiatePayment", controller = "Payments"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] InitiatePayment(System.Guid) on controller ToolsSharing.API.Controllers.PaymentsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executed DbCommand (2ms) [Parameters=[@__rentalId_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`, `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM `Rentals` AS `r`
INNER JOIN (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE NOT (`t`.`IsDeleted`)
) AS `t0` ON `r`.`ToolId` = `t0`.`Id`
INNER JOIN `AspNetUsers` AS `a` ON `r`.`OwnerId` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `r`.`RenterId` = `a0`.`Id`
WHERE NOT (`r`.`IsDeleted`) AND (`r`.`Id` = @__rentalId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executed DbCommand (1ms) [Parameters=[@__rentalId_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']
SELECT `t`.`Id`, `t`.`CommissionAmount`, `t`.`CommissionRate`, `t`.`CreatedAt`, `t`.`Currency`, `t`.`DepositRefundedAt`, `t`.`DisputeOpenedAt`, `t`.`DisputeReason`, `t`.`DisputeResolvedAt`, `t`.`HasDispute`, `t`.`IsDeleted`, `t`.`OwnerPayoutAmount`, `t`.`PaymentCompletedAt`, `t`.`PayoutCompletedAt`, `t`.`PayoutScheduledAt`, `t`.`RentalAmount`, `t`.`RentalId`, `t`.`SecurityDeposit`, `t`.`Status`, `t`.`TotalAmount`, `t`.`UpdatedAt`
FROM `Transactions` AS `t`
WHERE NOT (`t`.`IsDeleted`) AND (`t`.`RentalId` = @__rentalId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:46 INF] Executed DbCommand (1ms) [Parameters=[@__ownerId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT `p`.`Id`, `p`.`BusinessName`, `p`.`BusinessType`, `p`.`CreatedAt`, `p`.`CustomCommissionRate`, `p`.`IsCommissionEnabled`, `p`.`IsDeleted`, `p`.`IsPayoutVerified`, `p`.`MinimumPayoutAmount`, `p`.`NotifyOnPaymentReceived`, `p`.`NotifyOnPayoutFailed`, `p`.`NotifyOnPayoutSent`, `p`.`PayPalEmail`, `p`.`PayoutDayOfMonth`, `p`.`PayoutDayOfWeek`, `p`.`PayoutSchedule`, `p`.`PreferredPayoutMethod`, `p`.`StripeAccountId`, `p`.`TaxIdLast4`, `p`.`TaxIdType`, `p`.`TaxInfoProvided`, `p`.`UpdatedAt`, `p`.`UserId`, `p`.`VerificationNotes`, `p`.`VerifiedAt`
FROM `PaymentSettings` AS `p`
WHERE NOT (`p`.`IsDeleted`) AND (`p`.`UserId` = @__ownerId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:47 INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?' (DbType = Decimal), @p2='?' (DbType = Decimal), @p3='?' (DbType = DateTime), @p4='?' (Size = 3), @p5='?' (DbType = DateTime), @p6='?' (DbType = DateTime), @p7='?' (Size = 1000), @p8='?' (DbType = DateTime), @p9='?' (DbType = Boolean), @p10='?' (DbType = Boolean), @p11='?' (DbType = Decimal), @p12='?' (DbType = DateTime), @p13='?' (DbType = DateTime), @p14='?' (DbType = DateTime), @p15='?' (DbType = Decimal), @p16='?' (DbType = Guid), @p17='?' (DbType = Decimal), @p18='?' (Size = 50), @p19='?' (DbType = Decimal), @p20='?' (DbType = DateTime)], CommandType='Text', CommandTimeout='30']
SET AUTOCOMMIT = 1;
INSERT INTO `Transactions` (`Id`, `CommissionAmount`, `CommissionRate`, `CreatedAt`, `Currency`, `DepositRefundedAt`, `DisputeOpenedAt`, `DisputeReason`, `DisputeResolvedAt`, `HasDispute`, `IsDeleted`, `OwnerPayoutAmount`, `PaymentCompletedAt`, `PayoutCompletedAt`, `PayoutScheduledAt`, `RentalAmount`, `RentalId`, `SecurityDeposit`, `Status`, `TotalAmount`, `UpdatedAt`)
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20); {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:47 INF] Executed DbCommand (1ms) [Parameters=[@__userId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT `p`.`Id`, `p`.`BusinessName`, `p`.`BusinessType`, `p`.`CreatedAt`, `p`.`CustomCommissionRate`, `p`.`IsCommissionEnabled`, `p`.`IsDeleted`, `p`.`IsPayoutVerified`, `p`.`MinimumPayoutAmount`, `p`.`NotifyOnPaymentReceived`, `p`.`NotifyOnPayoutFailed`, `p`.`NotifyOnPayoutSent`, `p`.`PayPalEmail`, `p`.`PayoutDayOfMonth`, `p`.`PayoutDayOfWeek`, `p`.`PayoutSchedule`, `p`.`PreferredPayoutMethod`, `p`.`StripeAccountId`, `p`.`TaxIdLast4`, `p`.`TaxIdType`, `p`.`TaxInfoProvided`, `p`.`UpdatedAt`, `p`.`UserId`, `p`.`VerificationNotes`, `p`.`VerifiedAt`
FROM `PaymentSettings` AS `p`
WHERE NOT (`p`.`IsDeleted`) AND (`p`.`UserId` = @__userId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:47 INF] Start processing HTTP request POST https://api-m.sandbox.paypal.com/v1/oauth2/token {"EventId": {"Id": 100, "Name": "RequestPipelineStart"}, "SourceContext": "System.Net.Http.HttpClient.Default.LogicalHandler", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE", "Scope": ["HTTP POST https://api-m.sandbox.paypal.com/v1/oauth2/token"]}
[04:07:47 INF] Sending HTTP request POST https://api-m.sandbox.paypal.com/v1/oauth2/token {"EventId": {"Id": 100, "Name": "RequestStart"}, "SourceContext": "System.Net.Http.HttpClient.Default.ClientHandler", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE", "Scope": ["HTTP POST https://api-m.sandbox.paypal.com/v1/oauth2/token"]}
[04:07:47 INF] Received HTTP response headers after 706.7563ms - 200 {"EventId": {"Id": 101, "Name": "RequestEnd"}, "SourceContext": "System.Net.Http.HttpClient.Default.ClientHandler", "HttpMethod": "POST", "Uri": "https://api-m.sandbox.paypal.com/v1/oauth2/token", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE", "Scope": ["HTTP POST https://api-m.sandbox.paypal.com/v1/oauth2/token"]}
[04:07:47 INF] End processing HTTP request after 716.621ms - 200 {"EventId": {"Id": 101, "Name": "RequestPipelineEnd"}, "SourceContext": "System.Net.Http.HttpClient.Default.LogicalHandler", "HttpMethod": "POST", "Uri": "https://api-m.sandbox.paypal.com/v1/oauth2/token", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE", "Scope": ["HTTP POST https://api-m.sandbox.paypal.com/v1/oauth2/token"]}
[04:07:47 INF] Start processing HTTP request POST https://api-m.sandbox.paypal.com/v2/checkout/orders {"EventId": {"Id": 100, "Name": "RequestPipelineStart"}, "SourceContext": "System.Net.Http.HttpClient.Default.LogicalHandler", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE", "Scope": ["HTTP POST https://api-m.sandbox.paypal.com/v2/checkout/orders"]}
[04:07:47 INF] Sending HTTP request POST https://api-m.sandbox.paypal.com/v2/checkout/orders {"EventId": {"Id": 100, "Name": "RequestStart"}, "SourceContext": "System.Net.Http.HttpClient.Default.ClientHandler", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE", "Scope": ["HTTP POST https://api-m.sandbox.paypal.com/v2/checkout/orders"]}
[04:07:48 INF] Received HTTP response headers after 824.4527ms - 201 {"EventId": {"Id": 101, "Name": "RequestEnd"}, "SourceContext": "System.Net.Http.HttpClient.Default.ClientHandler", "HttpMethod": "POST", "Uri": "https://api-m.sandbox.paypal.com/v2/checkout/orders", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE", "Scope": ["HTTP POST https://api-m.sandbox.paypal.com/v2/checkout/orders"]}
[04:07:48 INF] End processing HTTP request after 826.4439ms - 201 {"EventId": {"Id": 101, "Name": "RequestPipelineEnd"}, "SourceContext": "System.Net.Http.HttpClient.Default.LogicalHandler", "HttpMethod": "POST", "Uri": "https://api-m.sandbox.paypal.com/v2/checkout/orders", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE", "Scope": ["HTTP POST https://api-m.sandbox.paypal.com/v2/checkout/orders"]}
[04:07:48 INF] Executed DbCommand (2ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?' (DbType = Decimal), @p2='?' (DbType = DateTime), @p3='?' (Size = 3), @p4='?' (Size = 255), @p5='?' (Size = 255), @p6='?' (Size = 255), @p7='?' (DbType = DateTime), @p8='?' (Size = 500), @p9='?' (DbType = Boolean), @p10='?' (DbType = Boolean), @p11='?' (Size = 4000), @p12='?' (Size = 450), @p13='?' (Size = 450), @p14='?' (DbType = DateTime), @p15='?' (Size = 50), @p16='?' (Size = 500), @p17='?' (DbType = Decimal), @p18='?' (DbType = DateTime), @p19='?' (DbType = Guid), @p20='?' (Size = 50), @p21='?' (Size = 50), @p22='?' (DbType = DateTime)], CommandType='Text', CommandTimeout='30']
SET AUTOCOMMIT = 1;
INSERT INTO `Payments` (`Id`, `Amount`, `CreatedAt`, `Currency`, `ExternalOrderId`, `ExternalPayerId`, `ExternalPaymentId`, `FailedAt`, `FailureReason`, `IsDeleted`, `IsRefunded`, `Metadata`, `PayeeId`, `PayerId`, `ProcessedAt`, `Provider`, `RefundReason`, `RefundedAmount`, `RefundedAt`, `RentalId`, `Status`, `Type`, `UpdatedAt`)
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20, @p21, @p22); {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:48 INF] Payment initiated successfully for rental e03abe95-c9a3-42c7-8131-1949584ef91c, payment ID: 4H71327721114281W {"SourceContext": "ToolsSharing.Infrastructure.Services.PaymentService", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:48 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.DTOs.Payment.PaymentInitiationResponseDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "3cb921a5-9fb7-4129-91af-deb182275f96", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:48 INF] Executed action ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API) in 1895.5173ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:48 INF] Executed endpoint 'ToolsSharing.API.Controllers.PaymentsController.InitiatePayment (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:07:48 INF] Request finished HTTP/1.1 POST http://localhost:5002/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c - 200 null application/json; charset=utf-8 1902.7469ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLE:00000004", "RequestPath": "/api/payments/initiate/e03abe95-c9a3-42c7-8131-1949584ef91c", "ConnectionId": "0HNE7UBO8SCLE"}
[04:09:33 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/gdpr/cookies/session/88b4c0d0-a73e-4cdb-8fb1-14508b6a827e - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLG:00000001", "RequestPath": "/api/gdpr/cookies/session/88b4c0d0-a73e-4cdb-8fb1-14508b6a827e", "ConnectionId": "0HNE7UBO8SCLG"}
[04:09:33 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLG:00000001", "RequestPath": "/api/gdpr/cookies/session/88b4c0d0-a73e-4cdb-8fb1-14508b6a827e", "ConnectionId": "0HNE7UBO8SCLG"}
[04:09:33 INF] Executing endpoint 'ToolsSharing.API.Controllers.GDPR.CookieConsentController.GetSessionConsents (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLG:00000001", "RequestPath": "/api/gdpr/cookies/session/88b4c0d0-a73e-4cdb-8fb1-14508b6a827e", "ConnectionId": "0HNE7UBO8SCLG"}
[04:09:33 INF] Route matched with {action = "GetSessionConsents", controller = "CookieConsent"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetSessionConsents(System.String) on controller ToolsSharing.API.Controllers.GDPR.CookieConsentController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "a944e559-2d18-4a49-a447-34297a649254", "ActionName": "ToolsSharing.API.Controllers.GDPR.CookieConsentController.GetSessionConsents (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLG:00000001", "RequestPath": "/api/gdpr/cookies/session/88b4c0d0-a73e-4cdb-8fb1-14508b6a827e", "ConnectionId": "0HNE7UBO8SCLG"}
[04:09:33 INF] Executed DbCommand (13ms) [Parameters=[@__sessionId_0='?' (Size = 100)], CommandType='Text', CommandTimeout='30']
SELECT `c3`.`Id`, `c3`.`ConsentDate`, `c3`.`ConsentGiven`, `c3`.`CookieCategory`, `c3`.`CreatedAt`, `c3`.`ExpiryDate`, `c3`.`IPAddress`, `c3`.`IsDeleted`, `c3`.`SessionId`, `c3`.`UpdatedAt`, `c3`.`UserAgent`, `c3`.`UserId`
FROM (
    SELECT `c`.`CookieCategory`
    FROM `CookieConsents` AS `c`
    WHERE NOT (`c`.`IsDeleted`) AND ((`c`.`SessionId` = @__sessionId_0) AND (`c`.`ExpiryDate` > UTC_TIMESTAMP()))
    GROUP BY `c`.`CookieCategory`
) AS `c1`
LEFT JOIN (
    SELECT `c2`.`Id`, `c2`.`ConsentDate`, `c2`.`ConsentGiven`, `c2`.`CookieCategory`, `c2`.`CreatedAt`, `c2`.`ExpiryDate`, `c2`.`IPAddress`, `c2`.`IsDeleted`, `c2`.`SessionId`, `c2`.`UpdatedAt`, `c2`.`UserAgent`, `c2`.`UserId`
    FROM (
        SELECT `c0`.`Id`, `c0`.`ConsentDate`, `c0`.`ConsentGiven`, `c0`.`CookieCategory`, `c0`.`CreatedAt`, `c0`.`ExpiryDate`, `c0`.`IPAddress`, `c0`.`IsDeleted`, `c0`.`SessionId`, `c0`.`UpdatedAt`, `c0`.`UserAgent`, `c0`.`UserId`, ROW_NUMBER() OVER(PARTITION BY `c0`.`CookieCategory` ORDER BY `c0`.`ConsentDate` DESC) AS `row`
        FROM `CookieConsents` AS `c0`
        WHERE NOT (`c0`.`IsDeleted`) AND ((`c0`.`SessionId` = @__sessionId_0) AND (`c0`.`ExpiryDate` > UTC_TIMESTAMP()))
    ) AS `c2`
    WHERE `c2`.`row` <= 1
) AS `c3` ON `c1`.`CookieCategory` = `c3`.`CookieCategory` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "a944e559-2d18-4a49-a447-34297a649254", "ActionName": "ToolsSharing.API.Controllers.GDPR.CookieConsentController.GetSessionConsents (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLG:00000001", "RequestPath": "/api/gdpr/cookies/session/88b4c0d0-a73e-4cdb-8fb1-14508b6a827e", "ConnectionId": "0HNE7UBO8SCLG"}
[04:09:33 INF] Executing OkObjectResult, writing value of type 'System.Linq.Enumerable+ListSelectIterator`2[[ToolsSharing.Core.Entities.GDPR.CookieConsent, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[ToolsSharing.API.Controllers.GDPR.CookieConsentResponse, ToolsSharing.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "a944e559-2d18-4a49-a447-34297a649254", "ActionName": "ToolsSharing.API.Controllers.GDPR.CookieConsentController.GetSessionConsents (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLG:00000001", "RequestPath": "/api/gdpr/cookies/session/88b4c0d0-a73e-4cdb-8fb1-14508b6a827e", "ConnectionId": "0HNE7UBO8SCLG"}
[04:09:33 INF] Executed action ToolsSharing.API.Controllers.GDPR.CookieConsentController.GetSessionConsents (ToolsSharing.API) in 105.292ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLG:00000001", "RequestPath": "/api/gdpr/cookies/session/88b4c0d0-a73e-4cdb-8fb1-14508b6a827e", "ConnectionId": "0HNE7UBO8SCLG"}
[04:09:33 INF] Executed endpoint 'ToolsSharing.API.Controllers.GDPR.CookieConsentController.GetSessionConsents (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLG:00000001", "RequestPath": "/api/gdpr/cookies/session/88b4c0d0-a73e-4cdb-8fb1-14508b6a827e", "ConnectionId": "0HNE7UBO8SCLG"}
[04:09:33 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/gdpr/cookies/session/88b4c0d0-a73e-4cdb-8fb1-14508b6a827e - 200 null application/json; charset=utf-8 133.7319ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLG:00000001", "RequestPath": "/api/gdpr/cookies/session/88b4c0d0-a73e-4cdb-8fb1-14508b6a827e", "ConnectionId": "0HNE7UBO8SCLG"}
[04:09:35 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/auth/login - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000001", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLI:00000001", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/auth/login - 204 null null 2.1757ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000001", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Request starting HTTP/1.1 POST http://localhost:5002/api/auth/login - application/json; charset=utf-8 56 {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Executing endpoint 'ToolsSharing.API.Controllers.AuthController.Login (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Login(ToolsSharing.Core.Features.Auth.LoginCommand) on controller ToolsSharing.API.Controllers.AuthController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "3311fbc7-d810-4ba4-b2b4-ae383286f671", "ActionName": "ToolsSharing.API.Controllers.AuthController.Login (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Executed DbCommand (3ms) [Parameters=[@__normalizedEmail_0='?' (Size = 256)], CommandType='Text', CommandTimeout='30']
SELECT `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`
FROM `AspNetUsers` AS `a`
WHERE `a`.`NormalizedEmail` = @__normalizedEmail_0
LIMIT 2 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "3311fbc7-d810-4ba4-b2b4-ae383286f671", "ActionName": "ToolsSharing.API.Controllers.AuthController.Login (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Executed DbCommand (8ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `p`.`Id`, `p`.`Content`, `p`.`CreatedAt`, `p`.`CreatedBy`, `p`.`EffectiveDate`, `p`.`IsActive`, `p`.`IsDeleted`, `p`.`UpdatedAt`, `p`.`Version`
FROM `PrivacyPolicyVersions` AS `p`
WHERE NOT (`p`.`IsDeleted`) AND `p`.`IsActive`
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "3311fbc7-d810-4ba4-b2b4-ae383286f671", "ActionName": "ToolsSharing.API.Controllers.AuthController.Login (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Executed DbCommand (7ms) [Parameters=[@__userId_0='?' (Size = 255)], CommandType='Text', CommandTimeout='30']
SELECT `u`.`ConsentType`
FROM `UserConsents` AS `u`
WHERE NOT (`u`.`IsDeleted`) AND ((`u`.`UserId` = @__userId_0) AND `u`.`WithdrawnDate` IS NULL) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "3311fbc7-d810-4ba4-b2b4-ae383286f671", "ActionName": "ToolsSharing.API.Controllers.AuthController.Login (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Executed DbCommand (3ms) [Parameters=[@__userId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT `u`.`Id`, `u`.`AllowDirectMessages`, `u`.`AllowRentalInquiries`, `u`.`AutoApproveRentals`, `u`.`CreatedAt`, `u`.`Currency`, `u`.`DefaultDepositPercentage`, `u`.`EmailMarketing`, `u`.`EmailMessages`, `u`.`EmailRentalRequests`, `u`.`EmailRentalUpdates`, `u`.`EmailSecurityAlerts`, `u`.`IsDeleted`, `u`.`Language`, `u`.`LoginAlertsEnabled`, `u`.`PushMessages`, `u`.`PushReminders`, `u`.`PushRentalRequests`, `u`.`PushRentalUpdates`, `u`.`RentalLeadTime`, `u`.`RequireDeposit`, `u`.`SessionTimeoutMinutes`, `u`.`ShowEmail`, `u`.`ShowLocation`, `u`.`ShowOnlineStatus`, `u`.`ShowPhoneNumber`, `u`.`ShowProfilePicture`, `u`.`ShowRealName`, `u`.`ShowStatistics`, `u`.`Theme`, `u`.`TimeZone`, `u`.`TwoFactorEnabled`, `u`.`UpdatedAt`, `u`.`UserId`
FROM `UserSettings` AS `u`
WHERE NOT (`u`.`IsDeleted`) AND (`u`.`UserId` = @__userId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "3311fbc7-d810-4ba4-b2b4-ae383286f671", "ActionName": "ToolsSharing.API.Controllers.AuthController.Login (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Using user's session timeout preference: 480 minutes for user user1-guid-1234-5678-9012345678901 {"SourceContext": "ToolsSharing.Infrastructure.Features.Auth.AuthService", "ActionId": "3311fbc7-d810-4ba4-b2b4-ae383286f671", "ActionName": "ToolsSharing.API.Controllers.AuthController.Login (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Executed DbCommand (13ms) [Parameters=[@__userId_0='?' (Size = 255)], CommandType='Text', CommandTimeout='30']
SELECT `a0`.`Name`
FROM `AspNetUserRoles` AS `a`
INNER JOIN `AspNetRoles` AS `a0` ON `a`.`RoleId` = `a0`.`Id`
WHERE `a`.`UserId` = @__userId_0 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "3311fbc7-d810-4ba4-b2b4-ae383286f671", "ActionName": "ToolsSharing.API.Controllers.AuthController.Login (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Executed DbCommand (1ms) [Parameters=[@__userId_0='?' (Size = 255)], CommandType='Text', CommandTimeout='30']
SELECT `a0`.`Name`
FROM `AspNetUserRoles` AS `a`
INNER JOIN `AspNetRoles` AS `a0` ON `a`.`RoleId` = `a0`.`Id`
WHERE `a`.`UserId` = @__userId_0 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "3311fbc7-d810-4ba4-b2b4-ae383286f671", "ActionName": "ToolsSharing.API.Controllers.AuthController.Login (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.Features.Auth.AuthResult, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "3311fbc7-d810-4ba4-b2b4-ae383286f671", "ActionName": "ToolsSharing.API.Controllers.AuthController.Login (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Executed action ToolsSharing.API.Controllers.AuthController.Login (ToolsSharing.API) in 346.7397ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Executed endpoint 'ToolsSharing.API.Controllers.AuthController.Login (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:35 INF] Request finished HTTP/1.1 POST http://localhost:5002/api/auth/login - 200 null application/json; charset=utf-8 361.2759ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000002", "RequestPath": "/api/auth/login", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/tools - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000003", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLI:00000003", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/tools - 204 null null 0.9579ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000003", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/tools - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000004", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLI:00000004", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Executing endpoint 'ToolsSharing.API.Controllers.ToolsController.GetTools (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLI:00000004", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Route matched with {action = "GetTools", controller = "Tools"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetTools(ToolsSharing.Core.Features.Tools.GetToolsQuery) on controller ToolsSharing.API.Controllers.ToolsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "1f7c9536-72d1-4a2d-84bc-82a4693a5101", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetTools (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000004", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/settings - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000001", "RequestPath": "/api/settings", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLJ:00000001", "RequestPath": "/api/settings", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/settings - 204 null null 0.8475ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000001", "RequestPath": "/api/settings", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/settings - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000002", "RequestPath": "/api/settings", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLJ:00000002", "RequestPath": "/api/settings", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executing endpoint 'ToolsSharing.API.Controllers.SettingsController.GetSettings (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLJ:00000002", "RequestPath": "/api/settings", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Route matched with {action = "GetSettings", controller = "Settings"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[ToolsSharing.Core.Common.Models.ApiResponse`1[ToolsSharing.Core.Features.Settings.UserSettingsDto]]] GetSettings() on controller ToolsSharing.API.Controllers.SettingsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "49e6ab92-3fd7-4a93-b7fb-d168afd785cf", "ActionName": "ToolsSharing.API.Controllers.SettingsController.GetSettings (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLJ:00000002", "RequestPath": "/api/settings", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executed DbCommand (5ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`
FROM (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE NOT (`t`.`IsDeleted`) AND `t`.`IsAvailable`
    ORDER BY `t`.`Name`
    LIMIT @__p_1 OFFSET @__p_0
) AS `t0`
INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `t0`.`Id` = `t2`.`ToolId`
ORDER BY `t0`.`Name`, `t0`.`Id`, `a`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "1f7c9536-72d1-4a2d-84bc-82a4693a5101", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetTools (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000004", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Tools.ToolDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "1f7c9536-72d1-4a2d-84bc-82a4693a5101", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetTools (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000004", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Executed action ToolsSharing.API.Controllers.ToolsController.GetTools (ToolsSharing.API) in 26.8086ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLI:00000004", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Executed endpoint 'ToolsSharing.API.Controllers.ToolsController.GetTools (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLI:00000004", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/tools - 200 null application/json; charset=utf-8 31.8793ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000004", "RequestPath": "/api/tools", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Executed DbCommand (1ms) [Parameters=[@__userId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT `u`.`Id`, `u`.`AllowDirectMessages`, `u`.`AllowRentalInquiries`, `u`.`AutoApproveRentals`, `u`.`CreatedAt`, `u`.`Currency`, `u`.`DefaultDepositPercentage`, `u`.`EmailMarketing`, `u`.`EmailMessages`, `u`.`EmailRentalRequests`, `u`.`EmailRentalUpdates`, `u`.`EmailSecurityAlerts`, `u`.`IsDeleted`, `u`.`Language`, `u`.`LoginAlertsEnabled`, `u`.`PushMessages`, `u`.`PushReminders`, `u`.`PushRentalRequests`, `u`.`PushRentalUpdates`, `u`.`RentalLeadTime`, `u`.`RequireDeposit`, `u`.`SessionTimeoutMinutes`, `u`.`ShowEmail`, `u`.`ShowLocation`, `u`.`ShowOnlineStatus`, `u`.`ShowPhoneNumber`, `u`.`ShowProfilePicture`, `u`.`ShowRealName`, `u`.`ShowStatistics`, `u`.`Theme`, `u`.`TimeZone`, `u`.`TwoFactorEnabled`, `u`.`UpdatedAt`, `u`.`UserId`
FROM `UserSettings` AS `u`
WHERE NOT (`u`.`IsDeleted`) AND (`u`.`UserId` = @__userId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "49e6ab92-3fd7-4a93-b7fb-d168afd785cf", "ActionName": "ToolsSharing.API.Controllers.SettingsController.GetSettings (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLJ:00000002", "RequestPath": "/api/settings", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[ToolsSharing.Core.Features.Settings.UserSettingsDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "49e6ab92-3fd7-4a93-b7fb-d168afd785cf", "ActionName": "ToolsSharing.API.Controllers.SettingsController.GetSettings (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLJ:00000002", "RequestPath": "/api/settings", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executed action ToolsSharing.API.Controllers.SettingsController.GetSettings (ToolsSharing.API) in 30.8009ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLJ:00000002", "RequestPath": "/api/settings", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executed endpoint 'ToolsSharing.API.Controllers.SettingsController.GetSettings (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLJ:00000002", "RequestPath": "/api/settings", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/settings - 200 null application/json; charset=utf-8 41.9138ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000002", "RequestPath": "/api/settings", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/tools/my-tools - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000003", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLJ:00000003", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/tools/my-tools - 204 null null 0.9506ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000003", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/tools/my-tools - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000004", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLJ:00000004", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executing endpoint 'ToolsSharing.API.Controllers.ToolsController.GetMyTools (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLJ:00000004", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Route matched with {action = "GetMyTools", controller = "Tools"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetMyTools(ToolsSharing.Core.Features.Tools.GetToolsQuery) on controller ToolsSharing.API.Controllers.ToolsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "15752063-8f80-426a-8024-9c6591d897c6", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetMyTools (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLJ:00000004", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/disputes?pageNumber=1&pageSize=50&sortBy=CreatedAt&sortDescending=True - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000005", "RequestPath": "/api/disputes", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLI:00000005", "RequestPath": "/api/disputes", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/disputes?pageNumber=1&pageSize=50&sortBy=CreatedAt&sortDescending=True - 204 null null 1.0471ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000005", "RequestPath": "/api/disputes", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/disputes?pageNumber=1&pageSize=50&sortBy=CreatedAt&sortDescending=True - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000006", "RequestPath": "/api/disputes", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLI:00000006", "RequestPath": "/api/disputes", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Executing endpoint 'ToolsSharing.API.Controllers.DisputesController.GetDisputes (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLI:00000006", "RequestPath": "/api/disputes", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Route matched with {action = "GetDisputes", controller = "Disputes"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetDisputes(ToolsSharing.Core.DTOs.Dispute.GetDisputesRequest) on controller ToolsSharing.API.Controllers.DisputesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "9ed439b9-f8d2-44cc-b04c-5e4fc709c2e5", "ActionName": "ToolsSharing.API.Controllers.DisputesController.GetDisputes (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000006", "RequestPath": "/api/disputes", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:36 INF] Executed DbCommand (4ms) [Parameters=[@__userId_0='?' (Size = 255), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`
FROM (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE (NOT (`t`.`IsDeleted`) AND (NOT (`t`.`IsDeleted`) AND (`t`.`OwnerId` = @__userId_0))) AND `t`.`IsAvailable`
    ORDER BY `t`.`Name`
    LIMIT @__p_2 OFFSET @__p_1
) AS `t0`
INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `t0`.`Id` = `t2`.`ToolId`
ORDER BY `t0`.`Name`, `t0`.`Id`, `a`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "15752063-8f80-426a-8024-9c6591d897c6", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetMyTools (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLJ:00000004", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Tools.ToolDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "15752063-8f80-426a-8024-9c6591d897c6", "ActionName": "ToolsSharing.API.Controllers.ToolsController.GetMyTools (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLJ:00000004", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executed action ToolsSharing.API.Controllers.ToolsController.GetMyTools (ToolsSharing.API) in 30.5324ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLJ:00000004", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executed endpoint 'ToolsSharing.API.Controllers.ToolsController.GetMyTools (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLJ:00000004", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/tools/my-tools - 200 null application/json; charset=utf-8 36.3847ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000004", "RequestPath": "/api/tools/my-tools", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?status=Overdue&type=renter - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000005", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLJ:00000005", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?status=Overdue&type=renter - 204 null null 2.1745ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000005", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=renter - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLJ:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLJ:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Route matched with {action = "GetRentals", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetRentals(ToolsSharing.Core.Features.Rentals.GetRentalsQuery) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLJ:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executed DbCommand (12ms) [Parameters=[@__query_UserId_0='?' (Size = 255), @__query_Status_Value_1='?' (Size = 20), @__p_3='?' (DbType = Int32), @__p_2='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `r0`.`Id`, `r0`.`ApprovedAt`, `r0`.`CancellationReason`, `r0`.`CancelledAt`, `r0`.`CreatedAt`, `r0`.`DepositAmount`, `r0`.`DisputeDeadline`, `r0`.`EndDate`, `r0`.`IsDeleted`, `r0`.`Notes`, `r0`.`OwnerId`, `r0`.`PickupDate`, `r0`.`RenterId`, `r0`.`ReturnConditionNotes`, `r0`.`ReturnDate`, `r0`.`ReturnedByUserId`, `r0`.`StartDate`, `r0`.`Status`, `r0`.`ToolId`, `r0`.`TotalCost`, `r0`.`UpdatedAt`, `t0`.`Id`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId`, `t0`.`UpdatedAt`, `t0`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`
    FROM `Rentals` AS `r`
    WHERE (NOT (`r`.`IsDeleted`) AND (`r`.`RenterId` = @__query_UserId_0)) AND (`r`.`Status` = @__query_Status_Value_1)
    ORDER BY `r`.`CreatedAt` DESC
    LIMIT @__p_3 OFFSET @__p_2
) AS `r0`
INNER JOIN (
    SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
    FROM `Tools` AS `t`
    WHERE NOT (`t`.`IsDeleted`)
) AS `t0` ON `r0`.`ToolId` = `t0`.`Id`
INNER JOIN `AspNetUsers` AS `a` ON `t0`.`OwnerId` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `r0`.`RenterId` = `a0`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `t0`.`Id` = `t2`.`ToolId`
ORDER BY `r0`.`CreatedAt` DESC, `r0`.`Id`, `t0`.`Id`, `a`.`Id`, `a0`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLJ:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `t`.`RentalId`
FROM `Transactions` AS `t`
WHERE NOT (`t`.`IsDeleted`) AND ((`t`.`RentalId` = '00000000-0000-0000-0000-000000000003') AND `t`.`Status` IN ('PaymentCompleted', 'PayoutPending', 'PayoutCompleted')) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLJ:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Rentals.RentalDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLJ:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executed action ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API) in 58.9854ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLJ:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLJ:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=renter - 200 null application/json; charset=utf-8 62.9838ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000006", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:36 INF] Executed DbCommand (5ms) [Parameters=[@__request_UserId_0='?' (Size = 4000), @__request_UserId_0_1='?' (Size = 255)], CommandType='Text', CommandTimeout='30']
SELECT COUNT(*)
FROM `Disputes` AS `d`
INNER JOIN (
    SELECT `r`.`Id`, `r`.`RenterId`, `r`.`ToolId`
    FROM `Rentals` AS `r`
    WHERE NOT (`r`.`IsDeleted`)
) AS `r0` ON `d`.`RentalId` = `r0`.`Id`
INNER JOIN (
    SELECT `t`.`Id`, `t`.`OwnerId`
    FROM `Tools` AS `t`
    WHERE NOT (`t`.`IsDeleted`)
) AS `t0` ON `r0`.`ToolId` = `t0`.`Id`
WHERE NOT (`d`.`IsDeleted`) AND (((`d`.`InitiatedBy` = @__request_UserId_0) OR (`r0`.`RenterId` = @__request_UserId_0_1)) OR (`t0`.`OwnerId` = @__request_UserId_0_1)) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "9ed439b9-f8d2-44cc-b04c-5e4fc709c2e5", "ActionName": "ToolsSharing.API.Controllers.DisputesController.GetDisputes (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000006", "RequestPath": "/api/disputes", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Executed DbCommand (8ms) [Parameters=[@__request_UserId_0='?' (Size = 4000), @__request_UserId_0_1='?' (Size = 255), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `s`.`Id`, `s`.`Category`, `s`.`CreatedAt`, `s`.`Description`, `s`.`DisputeAmount`, `s`.`DisputedAmount`, `s`.`EscalatedAt`, `s`.`Evidence`, `s`.`ExternalCaseId`, `s`.`ExternalDisputeId`, `s`.`InitiatedBy`, `s`.`InitiatedByName`, `s`.`InitiatorId`, `s`.`IsDeleted`, `s`.`LastActionAt`, `s`.`Metadata`, `s`.`PayPalReason`, `s`.`PaymentId`, `s`.`RefundAmount`, `s`.`RentalId`, `s`.`Resolution`, `s`.`ResolutionNotes`, `s`.`ResolvedAt`, `s`.`ResolvedBy`, `s`.`ResponseDueDate`, `s`.`Status`, `s`.`Subject`, `s`.`Title`, `s`.`Type`, `s`.`UpdatedAt`, `s`.`Id0`, `s`.`ApprovedAt`, `s`.`CancellationReason`, `s`.`CancelledAt`, `s`.`CreatedAt0`, `s`.`DepositAmount`, `s`.`DisputeDeadline`, `s`.`EndDate`, `s`.`IsDeleted0`, `s`.`Notes`, `s`.`OwnerId`, `s`.`PickupDate`, `s`.`RenterId`, `s`.`ReturnConditionNotes`, `s`.`ReturnDate`, `s`.`ReturnedByUserId`, `s`.`StartDate`, `s`.`Status0`, `s`.`ToolId`, `s`.`TotalCost`, `s`.`UpdatedAt0`, `s`.`Id1`, `s`.`Brand`, `s`.`Category0`, `s`.`Condition`, `s`.`CreatedAt1`, `s`.`DailyRate`, `s`.`DepositRequired`, `s`.`Description0`, `s`.`IsAvailable`, `s`.`IsDeleted1`, `s`.`LeadTimeHours`, `s`.`Location`, `s`.`Model`, `s`.`MonthlyRate`, `s`.`Name`, `s`.`OwnerId0`, `s`.`UpdatedAt1`, `s`.`WeeklyRate`, `d1`.`Id`, `d1`.`Attachments`, `d1`.`CreatedAt`, `d1`.`DisputeId`, `d1`.`FromUserId`, `d1`.`IsDeleted`, `d1`.`IsFromAdmin`, `d1`.`IsInternal`, `d1`.`IsSystemGenerated`, `d1`.`Message`, `d1`.`ReadAt`, `d1`.`SenderId`, `d1`.`SenderName`, `d1`.`SenderRole`, `d1`.`ToUserId`, `d1`.`UpdatedAt`
FROM (
    SELECT `d`.`Id`, `d`.`Category`, `d`.`CreatedAt`, `d`.`Description`, `d`.`DisputeAmount`, `d`.`DisputedAmount`, `d`.`EscalatedAt`, `d`.`Evidence`, `d`.`ExternalCaseId`, `d`.`ExternalDisputeId`, `d`.`InitiatedBy`, `d`.`InitiatedByName`, `d`.`InitiatorId`, `d`.`IsDeleted`, `d`.`LastActionAt`, `d`.`Metadata`, `d`.`PayPalReason`, `d`.`PaymentId`, `d`.`RefundAmount`, `d`.`RentalId`, `d`.`Resolution`, `d`.`ResolutionNotes`, `d`.`ResolvedAt`, `d`.`ResolvedBy`, `d`.`ResponseDueDate`, `d`.`Status`, `d`.`Subject`, `d`.`Title`, `d`.`Type`, `d`.`UpdatedAt`, `r0`.`Id` AS `Id0`, `r0`.`ApprovedAt`, `r0`.`CancellationReason`, `r0`.`CancelledAt`, `r0`.`CreatedAt` AS `CreatedAt0`, `r0`.`DepositAmount`, `r0`.`DisputeDeadline`, `r0`.`EndDate`, `r0`.`IsDeleted` AS `IsDeleted0`, `r0`.`Notes`, `r0`.`OwnerId`, `r0`.`PickupDate`, `r0`.`RenterId`, `r0`.`ReturnConditionNotes`, `r0`.`ReturnDate`, `r0`.`ReturnedByUserId`, `r0`.`StartDate`, `r0`.`Status` AS `Status0`, `r0`.`ToolId`, `r0`.`TotalCost`, `r0`.`UpdatedAt` AS `UpdatedAt0`, `t0`.`Id` AS `Id1`, `t0`.`Brand`, `t0`.`Category` AS `Category0`, `t0`.`Condition`, `t0`.`CreatedAt` AS `CreatedAt1`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description` AS `Description0`, `t0`.`IsAvailable`, `t0`.`IsDeleted` AS `IsDeleted1`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId` AS `OwnerId0`, `t0`.`UpdatedAt` AS `UpdatedAt1`, `t0`.`WeeklyRate`
    FROM `Disputes` AS `d`
    INNER JOIN (
        SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`
        FROM `Rentals` AS `r`
        WHERE NOT (`r`.`IsDeleted`)
    ) AS `r0` ON `d`.`RentalId` = `r0`.`Id`
    INNER JOIN (
        SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
        FROM `Tools` AS `t`
        WHERE NOT (`t`.`IsDeleted`)
    ) AS `t0` ON `r0`.`ToolId` = `t0`.`Id`
    WHERE NOT (`d`.`IsDeleted`) AND (((`d`.`InitiatedBy` = @__request_UserId_0) OR (`r0`.`RenterId` = @__request_UserId_0_1)) OR (`t0`.`OwnerId` = @__request_UserId_0_1))
    ORDER BY `d`.`CreatedAt` DESC
    LIMIT @__p_2 OFFSET @__p_1
) AS `s`
LEFT JOIN (
    SELECT `d0`.`Id`, `d0`.`Attachments`, `d0`.`CreatedAt`, `d0`.`DisputeId`, `d0`.`FromUserId`, `d0`.`IsDeleted`, `d0`.`IsFromAdmin`, `d0`.`IsInternal`, `d0`.`IsSystemGenerated`, `d0`.`Message`, `d0`.`ReadAt`, `d0`.`SenderId`, `d0`.`SenderName`, `d0`.`SenderRole`, `d0`.`ToUserId`, `d0`.`UpdatedAt`
    FROM `DisputeMessages` AS `d0`
    WHERE NOT (`d0`.`IsDeleted`)
) AS `d1` ON `s`.`Id` = `d1`.`DisputeId`
ORDER BY `s`.`CreatedAt` DESC, `s`.`Id`, `s`.`Id0`, `s`.`Id1` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "9ed439b9-f8d2-44cc-b04c-5e4fc709c2e5", "ActionName": "ToolsSharing.API.Controllers.DisputesController.GetDisputes (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000006", "RequestPath": "/api/disputes", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType21`6[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.List`1[[ToolsSharing.Core.DTOs.Dispute.DisputeDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "9ed439b9-f8d2-44cc-b04c-5e4fc709c2e5", "ActionName": "ToolsSharing.API.Controllers.DisputesController.GetDisputes (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000006", "RequestPath": "/api/disputes", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Executed action ToolsSharing.API.Controllers.DisputesController.GetDisputes (ToolsSharing.API) in 297.9322ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLI:00000006", "RequestPath": "/api/disputes", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Executed endpoint 'ToolsSharing.API.Controllers.DisputesController.GetDisputes (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLI:00000006", "RequestPath": "/api/disputes", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/disputes?pageNumber=1&pageSize=50&sortBy=CreatedAt&sortDescending=True - 200 null application/json; charset=utf-8 313.7715ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000006", "RequestPath": "/api/disputes", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/payments/settings - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000007", "RequestPath": "/api/payments/settings", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLI:00000007", "RequestPath": "/api/payments/settings", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/payments/settings - 204 null null 0.9879ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000007", "RequestPath": "/api/payments/settings", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/payments/settings - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000008", "RequestPath": "/api/payments/settings", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLI:00000008", "RequestPath": "/api/payments/settings", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Executing endpoint 'ToolsSharing.API.Controllers.PaymentsController.GetPaymentSettings (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLI:00000008", "RequestPath": "/api/payments/settings", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Route matched with {action = "GetPaymentSettings", controller = "Payments"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetPaymentSettings() on controller ToolsSharing.API.Controllers.PaymentsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "900bf90d-8abb-4617-b342-1e019eda6ea7", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.GetPaymentSettings (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000008", "RequestPath": "/api/payments/settings", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Executed DbCommand (2ms) [Parameters=[@__userId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT `p`.`Id`, `p`.`BusinessName`, `p`.`BusinessType`, `p`.`CreatedAt`, `p`.`CustomCommissionRate`, `p`.`IsCommissionEnabled`, `p`.`IsDeleted`, `p`.`IsPayoutVerified`, `p`.`MinimumPayoutAmount`, `p`.`NotifyOnPaymentReceived`, `p`.`NotifyOnPayoutFailed`, `p`.`NotifyOnPayoutSent`, `p`.`PayPalEmail`, `p`.`PayoutDayOfMonth`, `p`.`PayoutDayOfWeek`, `p`.`PayoutSchedule`, `p`.`PreferredPayoutMethod`, `p`.`StripeAccountId`, `p`.`TaxIdLast4`, `p`.`TaxIdType`, `p`.`TaxInfoProvided`, `p`.`UpdatedAt`, `p`.`UserId`, `p`.`VerificationNotes`, `p`.`VerifiedAt`
FROM `PaymentSettings` AS `p`
WHERE NOT (`p`.`IsDeleted`) AND (`p`.`UserId` = @__userId_0)
LIMIT 1 {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "900bf90d-8abb-4617-b342-1e019eda6ea7", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.GetPaymentSettings (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000008", "RequestPath": "/api/payments/settings", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "900bf90d-8abb-4617-b342-1e019eda6ea7", "ActionName": "ToolsSharing.API.Controllers.PaymentsController.GetPaymentSettings (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:00000008", "RequestPath": "/api/payments/settings", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Executed action ToolsSharing.API.Controllers.PaymentsController.GetPaymentSettings (ToolsSharing.API) in 56.2157ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLI:00000008", "RequestPath": "/api/payments/settings", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Executed endpoint 'ToolsSharing.API.Controllers.PaymentsController.GetPaymentSettings (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLI:00000008", "RequestPath": "/api/payments/settings", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:37 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/payments/settings - 200 null application/json; charset=utf-8 83.3695ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000008", "RequestPath": "/api/payments/settings", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:38 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/messages/unread-count - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000009", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:38 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLI:00000009", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:38 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/messages/unread-count - 204 null null 2.3003ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:00000009", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:38 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/messages/unread-count - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:0000000A", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:38 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLI:0000000A", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:38 INF] Executing endpoint 'ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLI:0000000A", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:38 INF] Route matched with {action = "GetUnreadCount", controller = "Messages"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetUnreadCount() on controller ToolsSharing.API.Controllers.MessagesController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:0000000A", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:38 INF] Request starting HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?status=Overdue&type=owner - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:38 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLJ:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:38 INF] Request finished HTTP/1.1 OPTIONS http://localhost:5002/api/rentals?status=Overdue&type=owner - 204 null null 1.1688ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000007", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:38 INF] Request starting HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=owner - null null {"EventId": {"Id": 1}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:38 INF] CORS policy execution successful. {"EventId": {"Id": 4, "Name": "PolicySuccess"}, "SourceContext": "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", "RequestId": "0HNE7UBO8SCLJ:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:38 INF] Executing endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Name": "ExecutingEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLJ:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:38 INF] Route matched with {action = "GetRentals", controller = "Rentals"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetRentals(ToolsSharing.Core.Features.Rentals.GetRentalsQuery) on controller ToolsSharing.API.Controllers.RentalsController (ToolsSharing.API). {"EventId": {"Id": 102, "Name": "ControllerActionExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLJ:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:38 INF] Executed DbCommand (4ms) [Parameters=[@__query_UserId_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']
SELECT COUNT(*)
FROM `Messages` AS `m`
WHERE NOT (`m`.`IsDeleted`) AND ((((`m`.`RecipientId` = @__query_UserId_0) AND NOT (`m`.`IsRead`)) AND NOT (`m`.`IsDeleted`)) AND NOT (`m`.`IsBlocked`)) {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:0000000A", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:38 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "5117770a-c3bb-4950-b7b5-3b3450cb691a", "ActionName": "ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLI:0000000A", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:38 INF] Executed action ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API) in 31.9579ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLI:0000000A", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:38 INF] Executed endpoint 'ToolsSharing.API.Controllers.MessagesController.GetUnreadCount (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLI:0000000A", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:38 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/messages/unread-count - 200 null application/json; charset=utf-8 36.7755ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLI:0000000A", "RequestPath": "/api/messages/unread-count", "ConnectionId": "0HNE7UBO8SCLI"}
[04:09:38 INF] Executed DbCommand (8ms) [Parameters=[@__query_UserId_0='?' (Size = 255), @__query_Status_Value_1='?' (Size = 20), @__p_3='?' (DbType = Int32), @__p_2='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
SELECT `s`.`Id`, `s`.`ApprovedAt`, `s`.`CancellationReason`, `s`.`CancelledAt`, `s`.`CreatedAt`, `s`.`DepositAmount`, `s`.`DisputeDeadline`, `s`.`EndDate`, `s`.`IsDeleted`, `s`.`Notes`, `s`.`OwnerId`, `s`.`PickupDate`, `s`.`RenterId`, `s`.`ReturnConditionNotes`, `s`.`ReturnDate`, `s`.`ReturnedByUserId`, `s`.`StartDate`, `s`.`Status`, `s`.`ToolId`, `s`.`TotalCost`, `s`.`UpdatedAt`, `s`.`Id0`, `s`.`Brand`, `s`.`Category`, `s`.`Condition`, `s`.`CreatedAt0`, `s`.`DailyRate`, `s`.`DepositRequired`, `s`.`Description`, `s`.`IsAvailable`, `s`.`IsDeleted0`, `s`.`LeadTimeHours`, `s`.`Location`, `s`.`Model`, `s`.`MonthlyRate`, `s`.`Name`, `s`.`OwnerId0`, `s`.`UpdatedAt0`, `s`.`WeeklyRate`, `a`.`Id`, `a`.`AccessFailedCount`, `a`.`Address`, `a`.`AnonymizationDate`, `a`.`City`, `a`.`ConcurrencyStamp`, `a`.`Country`, `a`.`CreatedAt`, `a`.`DataPortabilityRequested`, `a`.`DataProcessingConsent`, `a`.`DataRetentionDate`, `a`.`DateOfBirth`, `a`.`Email`, `a`.`EmailConfirmed`, `a`.`FirstName`, `a`.`GDPROptOut`, `a`.`IsDeleted`, `a`.`LastConsentUpdate`, `a`.`LastName`, `a`.`LockoutEnabled`, `a`.`LockoutEnd`, `a`.`MarketingConsent`, `a`.`NormalizedEmail`, `a`.`NormalizedUserName`, `a`.`PasswordHash`, `a`.`PhoneNumber`, `a`.`PhoneNumberConfirmed`, `a`.`PostalCode`, `a`.`ProfilePictureUrl`, `a`.`PublicLocation`, `a`.`SecurityStamp`, `a`.`TermsAcceptedDate`, `a`.`TermsOfServiceAccepted`, `a`.`TermsVersion`, `a`.`TwoFactorEnabled`, `a`.`UpdatedAt`, `a`.`UserName`, `a0`.`Id`, `t2`.`Id`, `t2`.`AltText`, `t2`.`CreatedAt`, `t2`.`ImageUrl`, `t2`.`IsDeleted`, `t2`.`IsPrimary`, `t2`.`Order`, `t2`.`ToolId`, `t2`.`UpdatedAt`, `a0`.`AccessFailedCount`, `a0`.`Address`, `a0`.`AnonymizationDate`, `a0`.`City`, `a0`.`ConcurrencyStamp`, `a0`.`Country`, `a0`.`CreatedAt`, `a0`.`DataPortabilityRequested`, `a0`.`DataProcessingConsent`, `a0`.`DataRetentionDate`, `a0`.`DateOfBirth`, `a0`.`Email`, `a0`.`EmailConfirmed`, `a0`.`FirstName`, `a0`.`GDPROptOut`, `a0`.`IsDeleted`, `a0`.`LastConsentUpdate`, `a0`.`LastName`, `a0`.`LockoutEnabled`, `a0`.`LockoutEnd`, `a0`.`MarketingConsent`, `a0`.`NormalizedEmail`, `a0`.`NormalizedUserName`, `a0`.`PasswordHash`, `a0`.`PhoneNumber`, `a0`.`PhoneNumberConfirmed`, `a0`.`PostalCode`, `a0`.`ProfilePictureUrl`, `a0`.`PublicLocation`, `a0`.`SecurityStamp`, `a0`.`TermsAcceptedDate`, `a0`.`TermsOfServiceAccepted`, `a0`.`TermsVersion`, `a0`.`TwoFactorEnabled`, `a0`.`UpdatedAt`, `a0`.`UserName`
FROM (
    SELECT `r`.`Id`, `r`.`ApprovedAt`, `r`.`CancellationReason`, `r`.`CancelledAt`, `r`.`CreatedAt`, `r`.`DepositAmount`, `r`.`DisputeDeadline`, `r`.`EndDate`, `r`.`IsDeleted`, `r`.`Notes`, `r`.`OwnerId`, `r`.`PickupDate`, `r`.`RenterId`, `r`.`ReturnConditionNotes`, `r`.`ReturnDate`, `r`.`ReturnedByUserId`, `r`.`StartDate`, `r`.`Status`, `r`.`ToolId`, `r`.`TotalCost`, `r`.`UpdatedAt`, `t0`.`Id` AS `Id0`, `t0`.`Brand`, `t0`.`Category`, `t0`.`Condition`, `t0`.`CreatedAt` AS `CreatedAt0`, `t0`.`DailyRate`, `t0`.`DepositRequired`, `t0`.`Description`, `t0`.`IsAvailable`, `t0`.`IsDeleted` AS `IsDeleted0`, `t0`.`LeadTimeHours`, `t0`.`Location`, `t0`.`Model`, `t0`.`MonthlyRate`, `t0`.`Name`, `t0`.`OwnerId` AS `OwnerId0`, `t0`.`UpdatedAt` AS `UpdatedAt0`, `t0`.`WeeklyRate`
    FROM `Rentals` AS `r`
    INNER JOIN (
        SELECT `t`.`Id`, `t`.`Brand`, `t`.`Category`, `t`.`Condition`, `t`.`CreatedAt`, `t`.`DailyRate`, `t`.`DepositRequired`, `t`.`Description`, `t`.`IsAvailable`, `t`.`IsDeleted`, `t`.`LeadTimeHours`, `t`.`Location`, `t`.`Model`, `t`.`MonthlyRate`, `t`.`Name`, `t`.`OwnerId`, `t`.`UpdatedAt`, `t`.`WeeklyRate`
        FROM `Tools` AS `t`
        WHERE NOT (`t`.`IsDeleted`)
    ) AS `t0` ON `r`.`ToolId` = `t0`.`Id`
    WHERE (NOT (`r`.`IsDeleted`) AND (`t0`.`OwnerId` = @__query_UserId_0)) AND (`r`.`Status` = @__query_Status_Value_1)
    ORDER BY `r`.`CreatedAt` DESC
    LIMIT @__p_3 OFFSET @__p_2
) AS `s`
INNER JOIN `AspNetUsers` AS `a` ON `s`.`OwnerId0` = `a`.`Id`
INNER JOIN `AspNetUsers` AS `a0` ON `s`.`RenterId` = `a0`.`Id`
LEFT JOIN (
    SELECT `t1`.`Id`, `t1`.`AltText`, `t1`.`CreatedAt`, `t1`.`ImageUrl`, `t1`.`IsDeleted`, `t1`.`IsPrimary`, `t1`.`Order`, `t1`.`ToolId`, `t1`.`UpdatedAt`
    FROM `ToolImages` AS `t1`
    WHERE NOT (`t1`.`IsDeleted`)
) AS `t2` ON `s`.`Id0` = `t2`.`ToolId`
ORDER BY `s`.`CreatedAt` DESC, `s`.`Id`, `s`.`Id0`, `a`.`Id`, `a0`.`Id` {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLJ:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:38 INF] Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
SELECT `t`.`RentalId`
FROM `Transactions` AS `t`
WHERE FALSE {"EventId": {"Id": 20101, "Name": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"}, "SourceContext": "Microsoft.EntityFrameworkCore.Database.Command", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLJ:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:38 INF] Executing OkObjectResult, writing value of type 'ToolsSharing.Core.Common.Models.ApiResponse`1[[System.Collections.Generic.List`1[[ToolsSharing.Core.Features.Rentals.RentalDto, ToolsSharing.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'. {"EventId": {"Id": 1, "Name": "ObjectResultExecuting"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "ActionId": "c1e07048-e487-4762-9cab-165fed1ef0e3", "ActionName": "ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)", "RequestId": "0HNE7UBO8SCLJ:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:38 INF] Executed action ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API) in 53.749ms {"EventId": {"Id": 105, "Name": "ActionExecuted"}, "SourceContext": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "RequestId": "0HNE7UBO8SCLJ:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:38 INF] Executed endpoint 'ToolsSharing.API.Controllers.RentalsController.GetRentals (ToolsSharing.API)' {"EventId": {"Id": 1, "Name": "ExecutedEndpoint"}, "SourceContext": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "RequestId": "0HNE7UBO8SCLJ:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:09:38 INF] Request finished HTTP/1.1 GET http://localhost:5002/api/rentals?status=Overdue&type=owner - 200 null application/json; charset=utf-8 59.4198ms {"EventId": {"Id": 2}, "SourceContext": "Microsoft.AspNetCore.Hosting.Diagnostics", "RequestId": "0HNE7UBO8SCLJ:00000008", "RequestPath": "/api/rentals", "ConnectionId": "0HNE7UBO8SCLJ"}
[04:18:23 INF] Application is shutting down... {"SourceContext": "Microsoft.Hosting.Lifetime"}
[04:18:23 ERR] Error processing rental completion {"SourceContext": "ToolsSharing.API.Services.RentalCompletionService"}
System.Threading.Tasks.TaskCanceledException: A task was canceled.
   at ToolsSharing.API.Services.RentalCompletionService.ExecuteAsync(CancellationToken stoppingToken)
[04:18:23 INF] Payout background service stopped {"SourceContext": "ToolsSharing.API.Services.PayoutBackgroundService"}
